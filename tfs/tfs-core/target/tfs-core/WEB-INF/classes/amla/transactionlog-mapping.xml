<?xml version="1.0" encoding="UTF-8"?>
<!-- 
/**  PROLOGUE:
 * 	(revision)
	SCR/ER Number: 
	SCR/ER Description: created a new Event for AMLA, error in transaction and settlement amount
	[Created by:] Jonh Henry Alabin
	[Date Deployed:] 
	Program [Revision] Details: add new event and replace BCSettledEvent to BCSettledPriorBCEvent , using amountForCredit in transactionAmount and settlementAmount
	PROJECT: CORE
	MEMBER TYPE  : XML
	Project Name: transactionlog-mapping.xml
 */
 -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <util:map id="transactionLogMappers">
        <entry key="com.ucpb.tfs.domain.product.event.LetterOfCreditCreatedEvent">
            <bean id="lcCreatedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>  <!-- Always 'NA' -->
<!--                         <entry key="transactionTypeCode" value="'CCBI'"/> -->
						<entry key="transactionTypeCode" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? 'IDLDD':
                        			'1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? 'IDLID': 
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? 'IDLDC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? 'IDLDM':
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagFx')) ? 'IDLIC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? 'IDLDM':'CCBI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>  <!-- Always 'NA' because transactionTypeCode is mandatory -->
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')).multiply(tradeService?.details?.get('currentRate'))"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
<!--                         <entry key="transactionAmount" -->
<!--                                value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount( -->
<!--                               	  tradeService?.details?.get('currency'),  -->
<!--                              	 tradeService?.details?.get('amount'), -->
<!--                               	 tradeService?.details?.get('currentRate'))"/>  -->
                        <entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? tradeService?.details?.get('amlaCashFlagAmount') :
		                               '1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaCasaFlagFxCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaRemittanceFlagFxCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? tradeService?.details?.get('amlaCheckFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount'):new java.math.BigDecimal('0.00')"/>
					<!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'D'"/> 
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('currency'))?new java.math.BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.specialRateUsdToPhp,8)"/>
<!--                         <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/> -->
						<!-- since no CASH and CHECK Paymnent in USD and Thirds -->
						<entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency'))?new java.math.BigDecimal('0.00'):
									'1'.equals(tradeService?.details?.get('amlaCasaFlagFX')) ? tradeService?.details?.get('amlaCasaFlagAmount'): 
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCasaFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFX')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'): 
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCashFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCheckFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):new java.math.BigDecimal('0.00')"/>
                        <!-- beneficiaryName -->
                        <entry key="counterparty.name3" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType'))? tradeService?.details?.get('beneficiaryName').toString().toUpperCase():tradeService?.details?.get('exporterName').toString().toUpperCase()"/>
<!--                         <entry key="counterparty.address.address1" value="tradeService?.details?.get('exporterAddress') ?: tradeService?.details?.get('beneficiaryAddress')"/> -->
<!--                         <entry key="counterparty.institution.country" value="tradeService?.details?.get('portOfDischargeOrDestination')"/> -->

<!--                         <entry key="correspondentBank.name" -->
<!--                                value="tradeService?.details?.get('adviseThroughBankNameAndAddressTo') ?: tradeService?.details?.get('adviseThroughBankNameAndAddressFrom')"/> -->
<!--                         <entry key="correspondentBank.countryCode" value="tradeService?.details?.get('adviseThroughBankLocationTo') ?: tradeService?.details?.get('adviseThroughBankLocationFrom')"/> -->
                        
                        <!-- beneficiaryAddress -->
                        <entry key="beneficiary.name3" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType'))?tradeService?.details?.get('beneficiaryName').toString().toUpperCase():tradeService?.details?.get('exporterName').toString().toUpperCase()"/>
<!--                         <entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryAddress') ?: tradeService?.details?.get('exporterAddress')"/> -->
                        <!--<entry key="beneficiary.country" value="tradeService?.details?.get('portOfDischargeOrDestination')"/>-->

                        <entry key="productType" value="'TFSS1'"/>

                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <!--<entry key="inceptionDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('processDate'),'MM/dd/yyyy')"/>-->
                        <!--<entry key="maturityDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('expiryDate'),'MM/dd/yyyy')"/>-->
                        <entry key="inceptionDate" value="letterOfCredit?.processDate"/>
                        <entry key="maturityDate" value="letterOfCredit?.expiryDate"/>

                        <entry key="transactionCode" value="'LCOPN'"/>

                        <entry key="paymentMode" value="'LCFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.LCAdjustedEvent">
            <bean id="lcAdjustedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
<!--                         <entry key="transactionTypeCode" value="CCBI"/> -->
						<entry key="transactionTypeCode" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? 'IDLDD':
                        			'1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? 'IDLID': 
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? 'IDLDC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? 'IDLDM':
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagFx')) ? 'IDLIC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? 'IDLDM':'CCBI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
<!--                         <entry key="transactionAmount" -->
<!--                                value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount( -->
<!--                                tradeService?.details?.get('currency'), -->
<!--                                tradeService?.details?.get('amountTo') ?: tradeService?.details?.get('amountFrom'), -->
<!--                                tradeService?.details?.get('currentRate'))"/> -->
 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? tradeService?.details?.get('amlaCashFlagAmount') :
		                               '1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaCasaFlagFxCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaRemittanceFlagFxCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? tradeService?.details?.get('amlaCheckFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount'):new java.math.BigDecimal('0.00')"/>
                        <!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('currency'))?new java.math.BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.specialRateUsdToPhp,8)"/>
<!--                         <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/> -->
						<entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency'))?new java.math.BigDecimal('0.00'):
									'1'.equals(tradeService?.details?.get('amlaCasaFlagFX')) ? tradeService?.details?.get('amlaCasaFlagAmount'):
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCasaFlagAmount'),
	 								tradeService?.specialRateUsdToPhp): 
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFX')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'): 
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCashFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCheckFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):new java.math.BigDecimal('0.00')"/>
                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType'))?tradeService?.details?.get('beneficiaryName').toString().toUpperCase(): letterOfCredit?.exporterName.toString().toUpperCase()"/>
<!--                         <entry key="counterparty.address.address1" value="tradeService?.details?.get('exporterAddress') ?: letterOfCredit?.beneficiaryAddress"/> -->

<!--                         <entry key="counterparty.institution.country" value="letterOfCredit?.portOfDischargeOrDestination"/> -->

<!--                         <entry key="correspondentBank.name" value="tradeService?.details?.get('adviseThroughBankNameAndAddress')"/> -->
<!--                         <entry key="correspondentBank.countryCode" value="tradeService?.details?.get('adviseThroughBankLocation')"/> -->
                        <!-- beneficiaryAddress -->
<!--                         <entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryAddress') ?: letterOfCredit?.beneficiaryAddress"/> -->
                        <!--<entry key="beneficiary.country" value="tradeService?.details?.get('portOfDischargeOrDestination')"/>-->

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="letterOfCredit?.processDate"/>
                        <entry key="maturityDate" value="letterOfCredit?.expiryDate"/>

                        <entry key="transactionCode" value="'LCADJ'"/>

                        <entry key="paymentMode" value="'LCFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.LCNegotiationCreatedEvent">
            <bean id="lcNegotiationBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
<!--                         <entry key="transactionTypeCode" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType'))  ? 'ILCAM' : 'CASH'.equals(tradeService?.details?.get('documentSubType1')) ? 'ILCAC' : 'ILCAD'"/> -->
						<entry key="transactionTypeCode" 
                        		value="('DOMESTIC'.equals(tradeService?.details?.get('documentType')) AND '1'.equals(tradeService?.details?.get('amlaCasaFlagPhp'))) ? 'IDLSD':
                        		('DOMESTIC'.equals(tradeService?.details?.get('documentType')) AND '1'.equals(tradeService?.details?.get('amlaCasaFlagFx'))) ? 'IDLSD':
                        		('DOMESTIC'.equals(tradeService?.details?.get('documentType')) AND '1'.equals(tradeService?.details?.get('amlaCashFlagPhp'))) ? 'IDLSD':
                        		('DOMESTIC'.equals(tradeService?.details?.get('documentType')) AND '1'.equals(tradeService?.details?.get('amlaCheckFlagPhp'))) ? 'IDLSD':
                        		('DOMESTIC'.equals(tradeService?.details?.get('documentType')) AND '1'.equals(tradeService?.details?.get('amlaCashFlagFx'))) ? 'IDLSD':
                        		('DOMESTIC'.equals(tradeService?.details?.get('documentType')) AND '1'.equals(tradeService?.details?.get('amlaCheckFlagFx'))) ? 'IDLSD':
                        		('DOMESTIC'.equals(tradeService?.details?.get('documentType')) AND '1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx'))) ? 'IDLSD':
                        		('DOMESTIC'.equals(tradeService?.details?.get('documentType')) AND '1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp'))) ? 'IDLSD':
                        			'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? 'IDLDD':
                        			'1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? 'IDLID': 
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? 'IDLDC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? 'IDLDM':
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagFx')) ? 'IDLIC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? 'IDLDM':'ILCAD'"/>
<!--                         <entry key="transactionTypeCode"  -->
<!--                         		value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? 'PHP'.equals(tradeService?.details?.get('amlaCasaFlagCurrency')) ? 'IDLDD':  -->
<!-- 								'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? 'PHP'.equals(tradeService?.details?.get('amlaCashFlagCurrency')) ? 'IDLDC': -->
<!-- 								'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? 'PHP'.equals(tradeService?.details?.get('amlaCheckFlagCurrency')) ? 'IDLDM':''"/> -->
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('settlementCurrency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')).multiply(tradeService?.details?.get('currentRate'))"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
<!--                         <entry key="transactionAmount" -->
<!--                                value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount( -->
<!--                               		tradeService?.details?.get('negotiationCurrency'), -->
<!--                           			tradeService?.details?.get('negotiationAmount'), -->
<!--                     				tradeService?.details?.get('currentRate'))"/> -->
 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('negotiationCurrency'),
		 								tradeService?.details?.get('amlaCashFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):
		                               '1'.equals(tradeService?.details?.get('amlaCashFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('negotiationCurrency'),
		 								tradeService?.details?.get('amlaCashFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('negotiationCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('negotiationCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):
		 								'1'.equals(tradeService?.details?.get('amlaCheckFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('negotiationCurrency'),
		 								tradeService?.details?.get('amlaCheckFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):
	 									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('negotiationCurrency'),
		 								tradeService?.details?.get('amlaCheckFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):
	 									'1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('negotiationCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):
	 									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('negotiationCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):new java.math.BigDecimal('0.00')"/>
						
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.tradeProductNumber?.toString()"/>
                        <entry key="settlementCurrency" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType')) ? 'PHP' : 
                        			'PHP'.equals(tradeService?.details?.get('negotiationCurrency')) ? tradeService?.details?.get('amlaSettlementCurrency'): T(java.util.Currency).getInstance(tradeService?.details?.get('negotiationCurrency'))"/>
                        <entry key="exchangeRate" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType')) ? new java.math.BigDecimal('0.00') : 
                        			'PHP'.equals(tradeService?.details?.get('negotiationCurrency')) ? new java.math.BigDecimal('0.00'): T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
<!--                         <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('negotiationCurrency'))?new java.math.BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.specialRateUsdToPhp,8)"/> -->
<!--                         <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('negotiationCurrency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('negotiationAmount'))"/> -->
						<entry key="settlementAmount" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType')) ? new java.math.BigDecimal('0.00') : 
									'PHP'.equals(tradeService?.details?.get('negotiationCurrency')) ? new java.math.BigDecimal('0.00'):
									'1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? tradeService?.details?.get('amlaCasaFlagAmount'): 							 
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount'):
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'): 
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagFx')) ? tradeService?.details?.get('amlaCashFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? tradeService?.details?.get('amlaCashFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCheckFlagFx')) ? tradeService?.details?.get('amlaCheckFlagAmount'):
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? tradeService?.details?.get('amlaCheckFlagAmount'):new java.math.BigDecimal('0.00')"/>
	 					<entry key="counterparty.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>	
                        <entry key="counterparty.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : ('DOMESTIC'.equals(tradeService?.details?.get('documentType'))?negotiatedLetterOfCredit?.beneficiaryName.toString().toUpperCase():negotiatedLetterOfCredit?.exporterName.toString().toUpperCase())"/>
<!--                         <entry key="counterparty.address.address1" value="negotiatedLetterOfCredit?.exporterAddress"/> -->
<!--
                        <entry key="counterparty.name1" value="negotiatedLetterOfCredit?.importerName ?: negotiatedLetterOfCredit?.applicantName"/>
                        <entry key="counterparty.address.address1" value="negotiatedLetterOfCredit?.importerAddress ?: negotiatedLetterOfCredit?.applicantAddress"/>
-->

                        <!-- beneficiaryName -->
                        <entry key="beneficiary.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="beneficiary.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : ('DOMESTIC'.equals(tradeService?.details?.get('documentType'))?negotiatedLetterOfCredit?.beneficiaryName.toString().toUpperCase():negotiatedLetterOfCredit?.exporterName.toString().toUpperCase())"/>
                        <!-- beneficiaryAddress -->
<!--                         <entry key="beneficiary.address.address1" value="negotiatedLetterOfCredit?.beneficiaryAddress ?: negotiatedLetterOfCredit?.exporterAddress"/> -->
                        <!--<entry key="beneficiary.country" value="tradeService?.details?.get('portOfDischargeOrDestination')"/>-->

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="negotiatedLetterOfCredit?.processDate"/>
                        <entry key="maturityDate" value="negotiatedLetterOfCredit?.expiryDate"/>

                        <entry key="transactionCode" value="'LCNEG'"/>

                        <entry key="paymentMode" value="'NGADV'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

<!--
        <entry key="com.ucpb.tfs.domain.product.event.UALoanAdjustedEvent">
            <bean id="lcNegotiationBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        &lt;!&ndash; if documentSubType1 == Standby &ndash;&gt;
                        <entry key="transactionTypeCode" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType')) ? 'ILCAM' : 'ILCAD'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        &lt;!&ndash;<entry key="transactionMode" value="' '"/>&ndash;&gt;
                        &lt;!&ndash;<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('settlementCurrency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')).multiply(tradeService?.details?.get('currentRate'))"/>&ndash;&gt;
                        &lt;!&ndash;<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>&ndash;&gt;
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('negotiationCurrency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('negotiationCurrency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('negotiationAmount'))"/>

                        <entry key="counterparty.name1" value="letterOfCredit?.exporterName"/>
                        <entry key="counterparty.institution.country" value="letterOfCredit?.portOfDischargeOrDestination ?: letterOfCredit?.portOfOrigination"/>
                        <entry key="counterparty.address.address1" value="letterOfCredit?.exporterAddress"/>

                        <entry key="correspondentBank.countryCode" value="letterOfCredit?.bspCountryCode"/>
                        <entry key="correspondentBank.address.address1" value="letterOfCredit?.nameAndAddress"/>

                        &lt;!&ndash; beneficiaryName &ndash;&gt;
                        <entry key="beneficiary.name1" value="letterOfCredit?.exporterName"/>
                        &lt;!&ndash; beneficiaryAddress &ndash;&gt;
                        <entry key="beneficiary.address.address1" value="letterOfCredit?.exporterAddress"/>
                        &lt;!&ndash;<entry key="beneficiary.country" value="tradeService?.details?.get('portOfDischargeOrDestination')"/>&ndash;&gt;

                        <entry key="productType" value="'TFSS1'"/>
                        &lt;!&ndash; LC OPEN DATE &ndash;&gt;
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="letterOfCredit?.processDate"/>
                        <entry key="maturityDate" value="letterOfCredit?.expiryDate"/>

                        <entry key="transactionCode" value="'LCNEG'"/>

                        <entry key="paymentMode" value="'NGADV'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.UALoanPaidEvent">
            <bean id="lcNegotiationBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        &lt;!&ndash; if documentSubType1 == Standby &ndash;&gt;
                        <entry key="transactionTypeCode" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType')) ? 'ILCAM' : 'ILCAD'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        &lt;!&ndash;<entry key="transactionMode" value="' '"/>&ndash;&gt;
                        &lt;!&ndash;<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('settlementCurrency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')).multiply(tradeService?.details?.get('currentRate'))"/>&ndash;&gt;
                        &lt;!&ndash;<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>&ndash;&gt;
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('negotiationCurrency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('negotiationCurrency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('negotiationAmount'))"/>

                        <entry key="counterparty.name1" value="letterOfCredit?.exporterName"/>
                        <entry key="counterparty.institution.country" value="letterOfCredit?.portOfDischargeOrDestination ?: letterOfCredit?.portOfOrigination"/>
                        <entry key="counterparty.address.address1" value="letterOfCredit?.exporterAddress"/>

                        <entry key="correspondentBank.countryCode" value="letterOfCredit?.bspCountryCode"/>
                        <entry key="correspondentBank.address.address1" value="letterOfCredit?.nameAndAddress"/>

                        &lt;!&ndash; beneficiaryName &ndash;&gt;
                        <entry key="beneficiary.name1" value="letterOfCredit?.exporterName"/>
                        &lt;!&ndash; beneficiaryAddress &ndash;&gt;
                        <entry key="beneficiary.address.address1" value="letterOfCredit?.exporterAddress"/>
                        &lt;!&ndash;<entry key="beneficiary.country" value="tradeService?.details?.get('portOfDischargeOrDestination')"/>&ndash;&gt;

                        <entry key="productType" value="'TFSS1'"/>
                        &lt;!&ndash; LC OPEN DATE &ndash;&gt;
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="letterOfCredit?.processDate"/>
                        <entry key="maturityDate" value="letterOfCredit?.expiryDate"/>

                        <entry key="transactionCode" value="'LCNEG'"/>

                        <entry key="paymentMode" value="'NGADV'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
-->

		<entry key="com.ucpb.tfs.domain.product.event.UALoanPaidEvent">
            <bean id="lcNegotiationBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
<!--                         if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType')) ? 'ILCAM' : 'ILCAD'"/>

                        <entry key="transactionTypeCode" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? 'IDLDD':
                        			'1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? 'IDLID': 
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? 'IDLDC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? 'IDLDM':
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagFx')) ? 'IDLIC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? 'IDLDM':'ILCAD'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? tradeService?.details?.get('amlaCashFlagAmount') :
		                               '1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaCasaFlagFxCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaRemittanceFlagFxCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? tradeService?.details?.get('amlaCheckFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount'):new java.math.BigDecimal('0.00')"/>
						<!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('negotiationCurrency'))"/>
                        <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('negotiationCurrency'))?new java.math.BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.specialRateUsdToPhp,8)"/>
<!--                         <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('negotiationCurrency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('negotiationAmount'))"/> -->
						<entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('negotiationCurrency'))?new java.math.BigDecimal('0.00'):
									'1'.equals(tradeService?.details?.get('amlaCasaFlagFX')) ? tradeService?.details?.get('amlaCasaFlagAmount'): 
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCasaFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFX')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'): 
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCashFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCheckFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):new java.math.BigDecimal('0.00')"/>
                        <entry key="counterparty.name3" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType'))?letterOfCredit?.beneficiaryName.toString().toUpperCase():letterOfCredit?.exporterName.toString().toUpperCase()"/>
<!--                         <entry key="counterparty.institution.country" value="letterOfCredit?.portOfDischargeOrDestination ?: letterOfCredit?.portOfOrigination"/> -->
<!--                         <entry key="counterparty.address.address1" value="letterOfCredit?.exporterAddress"/> -->

<!--                         <entry key="correspondentBank.countryCode" value="letterOfCredit?.bspCountryCode"/> -->
<!--                         <entry key="correspondentBank.address.address1" value="letterOfCredit?.nameAndAddress"/> -->

						<!-- beneficiaryName -->
                        <entry key="beneficiary.name3" value="'DOMESTIC'.equals(tradeService?.details?.get('documentType'))?letterOfCredit?.beneficiaryName.toString().toUpperCase():letterOfCredit?.exporterName.toString().toUpperCase()"/>
						<!-- beneficiaryAddress  -->
<!--                         <entry key="beneficiary.address.address1" value="letterOfCredit?.exporterAddress"/> -->
<!--                         <entry key="beneficiary.country" value="tradeService?.details?.get('portOfDischargeOrDestination')"/> -->

                        <entry key="productType" value="'TFSS1'"/>
						<!--  LC OPEN DATE  -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="letterOfCredit?.processDate"/>
                        <entry key="maturityDate" value="letterOfCredit?.expiryDate"/>

                        <entry key="transactionCode" value="'LCNEG'"/>

                        <entry key="paymentMode" value="'NGADV'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.LCCancelledEvent">
            <bean id="lcCancelledEventMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'ILCC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               letterOfCredit?.currency?.currencyCode,
                               tradeService?.details?.get('outstandingBalance'),
                               T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="letterOfCredit?.currency?.currencyCode"/>
 	                    <entry key="exchangeRate" value="'PHP'.equals(letterOfCredit?.currency?.toString()) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(letterOfCredit?.currency?.toString()) ? new java.math.BigDecimal('0.00') : tradeService?.details?.get('outstandingBalance')"/>
						<entry key="counterparty.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>	
                        <entry key="counterparty.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : ('DOMESTIC'.equals(tradeService?.details?.get('documentType'))?letterOfCredit?.beneficiaryName.toString().toUpperCase():letterOfCredit?.exporterName.toString().toUpperCase())"/>

<!--                         <entry key="counterparty.name1" value="letterOfCredit?.exporterName"/> -->
<!--                         <entry key="counterparty.address.address1" value="letterOfCredit?.exporterAddress"/> -->

                        <!-- beneficiaryName -->
                        <entry key="beneficiary.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="beneficiary.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : ('DOMESTIC'.equals(tradeService?.details?.get('documentType'))?letterOfCredit?.beneficiaryName.toString().toUpperCase():letterOfCredit?.exporterName.toString().toUpperCase())"/>
                        <!-- beneficiaryAddress -->
<!--                         <entry key="beneficiary.address.address1" value="letterOfCredit?.beneficiaryAddress ?: letterOfCredit?.exporterAddress"/> -->
                        <!--<entry key="beneficiary.country" value="tradeService?.details?.get('portOfDischargeOrDestination')"/>-->

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="letterOfCredit?.processDate"/>
                        <entry key="maturityDate" value="letterOfCredit?.expiryDate"/>

                        <entry key="transactionCode" value="'LCC'"/>

                        <entry key="paymentMode" value="'LCFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.LCAmendedEvent">
            <bean id="lcAmendedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
<!--                         <entry key="transactionTypeCode" value="'CMISC'"/> as per meeting 1/10/2014 -->
						<entry key="transactionTypeCode" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? 'IDLDD':
                        			'1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? 'IDLID': 
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? 'IDLDC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? 'IDLDM':
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagFx')) ? 'IDLIC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? 'IDLIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? 'IDLDM':'CMISC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amountTo') ?: tradeService?.details?.get('amountFrom')) : new java.math.BigDecimal(tradeService?.details?.get('amountTo') ?: tradeService?.details?.get('amountFrom')).multiply(tradeService?.details?.get('currentRate'))"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
<!--                         <entry key="transactionAmount" -->
<!--                                value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount( -->
<!--                                tradeService?.details?.get('currency'), -->
<!--                                tradeService?.details?.get('amount'), -->
<!--                                tradeService?.details?.get('currentRate'))"/> -->
 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? tradeService?.details?.get('amlaCashFlagAmount') :
		                               '1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaCasaFlagFxCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaRemittanceFlagFxCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? tradeService?.details?.get('amlaCheckFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount'):new java.math.BigDecimal('0.00')"/>
						<!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('currency'))?new BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.specialRateUsdToPhp,8)"/>
<!--                         <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : new java.math.BigDecimal(tradeService?.details?.get('amountTo') ?: tradeService?.details?.get('amountFrom'))"/> -->
						<entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00'):
									'1'.equals(tradeService?.details?.get('amlaCasaFlagFX')) ? tradeService?.details?.get('amlaCasaFlagAmount'): 
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCasaFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFX')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'): 
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCashFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCheckFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):new java.math.BigDecimal('0.00')"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name3" value="tradeService?.details?.get('exporterNameTo') ? tradeService?.details?.get('exporterNameTo').toString().toUpperCase(): 
                        										tradeService?.details?.get('exporterNameFrom')? tradeService?.details?.get('exporterNameFrom').toString().toUpperCase():
                        										letterOfCredit?.beneficiaryName.toString().toUpperCase()"/>
<!--                         <entry key="counterparty.address.address1" value="amendedLc?.exporterAddress"/> -->

<!--                         <entry key="counterparty.institution.country" -->
<!--                                value="tradeService?.details?.get('portOfDischargeOrDestinationTo') ?: tradeService?.details?.get('portOfDischargeOrDestinationFrom')"/> -->

                        <!-- beneficiaryAddress -->
                        <entry key="beneficiary.name3" value="tradeService?.details?.get('exporterNameTo') ? tradeService?.details?.get('exporterNameTo').toString().toUpperCase(): 
                        										tradeService?.details?.get('exporterNameFrom')? tradeService?.details?.get('exporterNameFrom').toString().toUpperCase():
                        										letterOfCredit?.beneficiaryName.toString().toUpperCase()"/>
<!--                         <entry key="beneficiary.address.address1" value="tradeService?.details?.get('exporterAddressTo') ?: tradeService?.details?.get('exporterAddressTo')"/> -->
                        <!--<entry key="beneficiary.country" value="tradeService?.details?.get('portOfDischargeOrDestination')"/>-->

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <!--<entry key="inceptionDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('issueDate'),'MM/dd/yyyy')"/>-->
                        <!--<entry key="maturityDate"-->
                               <!--value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('expiryDateTo') ?: tradeService?.details?.get('expiryDateFrom'),'MM/dd/yyyy')"/>-->
                        <entry key="inceptionDate" value="amendedLc?.processDate"/>
                        <entry key="maturityDate" value="amendedLc?.expiryDate"/>

                        <entry key="transactionCode" value="'LCAMD'"/>

                        <entry key="paymentMode" value="'LCFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <!-- MD -->
        <entry key="com.ucpb.tfs.domain.settlementaccount.event.MarginalDepositUpdatedEvent">
            <bean id="mdupdatedEventMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'IIPC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                         <!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.specialRateUsdToPhp,8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

<!--                         <entry key="counterparty.name1" value="tradeService?.details?.get('longName')"/> -->
<!--                         <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/> -->
<!--                         <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/> -->

                        <!-- beneficiaryName -->
                        <entry key="beneficiary.name1" value="tradeService?.details?.get('longName').toString().toUpperCase()"/>
                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <!--<entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryCustomerAddress')"/>-->
                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'LCOPN'"/>

                        <entry key="paymentMode" value="'LCFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <!-- Commented out; should only log AMLA when Accepted
        <entry key="com.ucpb.tfs.domain.product.event.DACreatedEvent">
            <bean id="daCreatedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
        -->
                        <!--<entry key="transactionMode" value="''"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
        <!--
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
        -->
                        <!-- or should this be branch unit code? -->
        <!--
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>
        -->
                        <!-- beneficiaryName -->
        <!--
                        <entry key="counterparty.name1" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="counterparty.institution.country" value="tradeService?.details?.get('originalPort')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>

                        <entry key="correspondentBank.name" value="''"/>
                        <entry key="correspondentBank.countryCode" value="''"/>
        -->
                        <!--
                        <entry key="correspondentBank.name" value="tradeService?.details?.get('remittingBank')"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(tradeService?.details?.get('remittingBank'),4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
        <!--
                        <entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>
                        <entry key="beneficiary.country" value="T(org.apache.commons.lang3.StringUtils).substring(tradeService?.details?.get('originalPort'),0,2)"/>

                        <entry key="productType" value="'TFSS1'"/>
        -->
                        <!-- LC OPEN DATE -->
        <!--
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('processDate'),'MM/dd/yyyy')"/>
                        <entry key="maturityDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('maturityDate'),'MM/dd/yyyy')"/>

                        <entry key="transactionCode" value="'NONEG'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        -->

        <entry key="com.ucpb.tfs.domain.product.event.DAAcceptedEvent">
            <bean id="daCreatedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <!-- or should this be branch unit code? -->
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>
                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="counterparty.institution.country" value="tradeService?.details?.get('originalPort')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>

                        <entry key="correspondentBank.name" value="''"/>
                        <entry key="correspondentBank.countryCode" value="''"/>
                        <!--
                        <entry key="correspondentBank.name" value="tradeService?.details?.get('remittingBank')"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(tradeService?.details?.get('remittingBank'),4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name3" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>
                        <entry key="beneficiary.country" value="T(org.apache.commons.lang3.StringUtils).substring(tradeService?.details?.get('originalPort'),0,2)"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="documentAgainstAcceptance?.processDate"/>
                        <entry key="maturityDate" value="documentAgainstAcceptance?.maturityDate"/>

                        <entry key="transactionCode" value="'NONEG'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>


        <entry key="com.ucpb.tfs.domain.product.event.DASettlementCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
<!--                         <entry key="transactionTypeCode" value="'IDCLI'"/> -->
						<entry key="transactionTypeCode" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? 'IDNID': 
	 								'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? 'IDNIC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? 'IDNIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? 'IDNIM':'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
<!--                         <entry key="transactionAmount" -->
<!--                                value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount( -->
<!--                                tradeService?.details?.get('currency'), -->
<!--                                tradeService?.details?.get('productAmount'), -->
<!--                                tradeService?.details?.get('currentRate'))"/> 
 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? tradeService?.details?.get('amlaCashFlagAmount') :
		                               '1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaCasaFlagFxCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaRemittanceFlagFxCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? tradeService?.details?.get('amlaCheckFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount'):new java.math.BigDecimal('0.00')"/>-->
	 								
	 					<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
	 									'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCheckFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
	 									'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCashFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) : new java.math.BigDecimal('0.00')"/>
		 								
						<!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('currency'))?new java.math.BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
<!--                         <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('productAmount'))"/> 
						<entry key="settlementAmount" value="'1'.equals(tradeService?.details?.get('amlaCasaFlagFX')) ? tradeService?.details?.get('amlaCasaFlagAmount'): 
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCasaFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFX')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'): 
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCashFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCheckFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):new java.math.BigDecimal('0.00')"/>-->
						<entry key="settlementAmount" 
									value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCasaFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCashFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCheckFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaRemittanceFlagAmount')) : new java.math.BigDecimal('0.00')"/>
											
                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="counterparty.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : tradeService?.details?.get('beneficiaryName').toString().toUpperCase()"/>
<!--                         <entry key="counterparty.institution.country" value="documentAgainstAcceptance?.originalPort"/> -->
<!--                         <entry key="counterparty.address.address1" value="tradeService?.details?.get('beneficiaryName')"/> -->

<!--                         <entry key="correspondentBank.name" value="tradeService?.details?.get('remittingBank')"/> -->
<!--                         <entry key="correspondentBank.countryCode" value="''"/> -->
                        <!--
                        <entry key="correspondentBank.name" value="documentAgainstAcceptance?.remittingBank"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(documentAgainstAcceptance?.remittingBank,4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="beneficiary.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : tradeService?.details?.get('beneficiaryName').toString().toUpperCase()"/>
<!--                         <entry key="beneficiary.address.address1" value="documentAgainstAcceptance?.beneficiaryAddress"/> -->
<!--                         <entry key="beneficiary.country" value="T(org.apache.commons.lang3.StringUtils).substring(documentAgainstAcceptance?.originalPort,0,2)"/> -->

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="documentAgainstAcceptance?.processDate"/>
                        <entry key="maturityDate" value="documentAgainstAcceptance?.maturityDate"/>

                        <entry key="transactionCode" value="'NOSET'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.DACancelledEvent">
            <bean id="daCreatedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               documentAgainstAcceptance?.currency?.currencyCode,
                               documentAgainstAcceptance?.amount?.toString(),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <!-- or should this be branch unit code? -->
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="documentAgainstAcceptance?.currency?.currencyCode"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : documentAgainstAcceptance?.amount"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="documentAgainstAcceptance?.beneficiaryName"/>
                        <entry key="counterparty.address.address1" value="documentAgainstAcceptance?.beneficiaryAddress"/>

                        <entry key="correspondentBank.name" value="''"/>
                        <entry key="correspondentBank.countryCode" value="''"/>
                        <!--
                        <entry key="correspondentBank.name" value="documentAgainstAcceptance?.remittingBank"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(documentAgainstAcceptance?.remittingBank,4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name1" value="documentAgainstAcceptance?.beneficiaryName"/>
                        <entry key="beneficiary.address.address1" value="documentAgainstAcceptance?.beneficiaryAddress"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="maturityDate" value="documentAgainstAcceptance?.maturityDate"/>

                        <entry key="transactionCode" value="'NOCAL'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.DPCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="counterparty.institution.country" value="tradeService?.details?.get('originalPort')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>

                        <entry key="correspondentBank.name" value="''"/>
                        <entry key="correspondentBank.countryCode" value="''"/>
                        <!--
                        <entry key="correspondentBank.name" value="tradeService?.details?.get('remittingBank')"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(tradeService?.details?.get('remittingBank'),4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>
                        <entry key="beneficiary.country" value="T(org.apache.commons.lang3.StringUtils).substring(tradeService?.details?.get('originalPort'),0,2)"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('processDate'),'MM/dd/yyyy')"/>
                        <entry key="maturityDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('maturityDate'),'MM/dd/yyyy')"/>

                        <entry key="transactionCode" value="'NONEG'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.DPSettlementCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
<!--                         <entry key="transactionTypeCode" value="'IDCLI'"/> -->
						<entry key="transactionTypeCode" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? 'IDNID': 
	 								'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? 'IDNIC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? 'IDNIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? 'IDNIM':'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
<!--                         <entry key="transactionAmount" -->
<!--                                value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount( -->
<!--                                tradeService?.details?.get('currency'), -->
<!--                                tradeService?.details?.get('productAmount'), -->
<!--                                tradeService?.details?.get('currentRate'))"/> 
 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? tradeService?.details?.get('amlaCashFlagAmount') :
		                               '1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaCasaFlagFxCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaRemittanceFlagFxCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? tradeService?.details?.get('amlaCheckFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount'):new java.math.BigDecimal('0.00')"/>-->
	 					<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
	 									'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCheckFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
	 									'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCashFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) : new java.math.BigDecimal('0.00')"/>

                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('currency'))?new java.math.BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
<!--                         <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('productAmount'))"/> 
						<entry key="settlementAmount" value="'1'.equals(tradeService?.details?.get('amlaCasaFlagFX')) ? tradeService?.details?.get('amlaCasaFlagAmount'): 
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCasaFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFX')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'): 
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCashFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCheckFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCasaFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):new java.math.BigDecimal('0.00')"/>-->
						<entry key="settlementAmount" 
									value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCasaFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCashFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCheckFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaRemittanceFlagAmount')) : new java.math.BigDecimal('0.00')"/>
											
                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="counterparty.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : tradeService?.details?.get('beneficiaryName').toString().toUpperCase()"/>
<!--                         <entry key="counterparty.institution.country" value="tradeService?.details?.get('originalPort')"/> -->
<!--                         <entry key="counterparty.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/> -->

<!--                         <entry key="correspondentBank.name" value="tradeService?.details?.get('remittingBank')"/> -->
<!--                         <entry key="correspondentBank.countryCode" value="''"/> -->
                        <!--
                        <entry key="correspondentBank.name" value="documentAgainstPayment?.remittingBank"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(documentAgainstPayment?.remittingBank,4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                         <entry key="beneficiary.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="beneficiary.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : tradeService?.details?.get('beneficiaryName').toString().toUpperCase()"/>
<!--                         <entry key="beneficiary.address.address1" value="documentAgainstPayment?.beneficiaryAddress"/> -->
<!--                         <entry key="beneficiary.country" value="T(org.apache.commons.lang3.StringUtils).substring(documentAgainstPayment?.originalPort,0,2)"/> -->

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="documentAgainstPayment?.processDate"/>
                        <entry key="maturityDate" value="documentAgainstPayment?.maturityDate"/>
                        <entry key="transactionCode" value="'NOSET'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.DPCancelledEvent">
            <bean id="daCreatedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               documentAgainstPayment?.currency?.currencyCode,
                               documentAgainstPayment?.amount?.toString(),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <!-- or should this be branch unit code? -->
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="documentAgainstPayment?.currency?.currencyCode"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : documentAgainstPayment?.amount"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="documentAgainstPayment?.beneficiaryName"/>
                        <entry key="counterparty.address.address1" value="documentAgainstPayment?.beneficiaryAddress"/>

                        <entry key="correspondentBank.name" value="''"/>
                        <entry key="correspondentBank.countryCode" value="''"/>
                        <!--
                        <entry key="correspondentBank.name" value="documentAgainstPayment?.remittingBank"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(documentAgainstPayment?.remittingBank,4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name1" value="documentAgainstPayment?.beneficiaryName"/>
                        <entry key="beneficiary.address.address1" value="documentAgainstPayment?.beneficiaryAddress"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="maturityDate" value="documentAgainstPayment?.maturityDate"/>

                        <entry key="transactionCode" value="'NOCAL'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.OACreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="counterparty.institution.country" value="tradeService?.details?.get('originalPort')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>

                        <entry key="correspondentBank.name" value="''"/>
                        <entry key="correspondentBank.countryCode" value="''"/>
                        <!--
                        <entry key="correspondentBank.name" value="tradeService?.details?.get('remittingBank')"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(tradeService?.details?.get('remittingBank'),4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>
                        <entry key="beneficiary.country" value="T(org.apache.commons.lang3.StringUtils).substring(tradeService?.details?.get('originalPort'),0,2)"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('processDate'),'MM/dd/yyyy')"/>
                        <entry key="maturityDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('maturityDate'),'MM/dd/yyyy')"/>

                        <entry key="transactionCode" value="'NONEG'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.OASettlementCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
<!--                         <entry key="transactionTypeCode" value="'IDCLI'"/> -->
						<entry key="transactionTypeCode" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? 'IDNID': 
	 								'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? 'IDNIC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? 'IDNIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? 'IDNIM':'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
<!--                         <entry key="transactionAmount" -->
<!--                                value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount( -->
<!--                                tradeService?.details?.get('currency'), -->
<!--                                tradeService?.details?.get('productAmount'), -->
<!--                                tradeService?.details?.get('currentRate'))"/> -->
<!-- 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? tradeService?.details?.get('amlaCashFlagAmount') :
		                               '1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaCasaFlagFxCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaRemittanceFlagFxCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? tradeService?.details?.get('amlaCheckFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount'):new java.math.BigDecimal('0.00')"/>-->
 						
 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
	 									'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCheckFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
	 									'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCashFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) : new java.math.BigDecimal('0.00')"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('currency'))?new java.math.BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
<!--                         <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('productAmount'))"/> -->
<!-- 						<entry key="settlementAmount" value="'1'.equals(tradeService?.details?.get('amlaCasaFlagFX')) ? tradeService?.details?.get('amlaCasaFlagAmount'): 
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCasaFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFX')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'): 
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCashFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCheckFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):new java.math.BigDecimal('0.00')"/> -->
							<entry key="settlementAmount" 
									value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCasaFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCashFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCheckFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaRemittanceFlagAmount')) : new java.math.BigDecimal('0.00')"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="counterparty.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : tradeService?.details?.get('beneficiaryName').toString().toUpperCase()"/>
<!--                         <entry key="counterparty.institution.country" value="tradeService?.details?.get('originalPort')"/> -->
<!--                         <entry key="counterparty.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/> -->

<!--                         <entry key="correspondentBank.name" value="''"/> -->
<!--                         <entry key="correspondentBank.countryCode" value="''"/> -->
                        <!--
                        <entry key="correspondentBank.name" value="openAccount?.remittingBank"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(openAccount?.remittingBank,4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        
                        <entry key="beneficiary.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="beneficiary.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : tradeService?.details?.get('beneficiaryName').toString().toUpperCase()"/>
<!--                         <entry key="beneficiary.address.address1" value="openAccount?.beneficiaryAddress"/> -->
<!--                         <entry key="beneficiary.country" value="T(org.apache.commons.lang3.StringUtils).substring(openAccount?.originalPort,0,2)"/> -->

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="openAccount?.processDate"/>
                        <entry key="maturityDate" value="openAccount?.maturityDate"/>

                        <entry key="transactionCode" value="'NOSET'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.OACancelledEvent">
            <bean id="daCreatedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               openAccount?.currency?.currencyCode,
                               openAccount?.amount?.toString(),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <!-- or should this be branch unit code? -->
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="openAccount?.currency?.currencyCode"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : openAccount?.amount"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="openAccount?.beneficiaryName"/>
                        <entry key="counterparty.address.address1" value="openAccount?.beneficiaryAddress"/>

                        <entry key="correspondentBank.name" value="''"/>
                        <entry key="correspondentBank.countryCode" value="''"/>
                        <!--
                        <entry key="correspondentBank.name" value="openAccount?.remittingBank"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(openAccount?.remittingBank,4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name1" value="openAccount?.beneficiaryName"/>
                        <entry key="beneficiary.address.address1" value="openAccount?.beneficiaryAddress"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="maturityDate" value="openAccount?.maturityDate"/>

                        <entry key="transactionCode" value="'NOCAL'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.DRCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <!--as per discussion with maam juliet 02/16/2015 -->
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="counterparty.institution.country" value="tradeService?.details?.get('originalPort')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>

                        <entry key="correspondentBank.name" value="''"/>
                        <entry key="correspondentBank.countryCode" value="''"/>
                        <!--
                        <entry key="correspondentBank.name" value="tradeService?.details?.get('remittingBank')"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(tradeService?.details?.get('remittingBank'),4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiaryName')"/>
                        <entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/>
                        <entry key="beneficiary.country" value="T(org.apache.commons.lang3.StringUtils).substring(tradeService?.details?.get('originalPort'),0,2)"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('processDate'),'MM/dd/yyyy')"/>
                        <entry key="maturityDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('maturityDate'),'MM/dd/yyyy')"/>
                        <entry key="transactionCode" value="'NOSET'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.DRSettlementCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
<!--                         <entry key="transactionTypeCode" value="'IDCLI'"/> -->
						<entry key="transactionTypeCode" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? 'IDNID':
	 								'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? 'IDNIC':
									'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? 'IDNIM':
									'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? 'IDNIM':'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
<!--                         <entry key="transactionAmount" -->
<!--                                value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount( -->
<!--                                tradeService?.details?.get('currency'), -->
<!--                                tradeService?.details?.get('productAmount'), -->
<!--                                tradeService?.details?.get('currentRate'))"/> -->
<!-- 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? tradeService?.details?.get('amlaCashFlagAmount') :
		                               '1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaCasaFlagFxCurrency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('amlaRemittanceFlagFxCurrency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								tradeService?.specialRateUsdToPhp):
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? tradeService?.details?.get('amlaCheckFlagAmount'):
	 								'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount'):new java.math.BigDecimal('0.00')"/>-->
	 						<entry key="transactionAmount"
                               value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCasaFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
		 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
	 									'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCheckFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
	 									'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amlaCashFlagAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) : new java.math.BigDecimal('0.00')"/>	 								
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('currency'))?new java.math.BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
<!--                         <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('productAmount'))"/> -->
<!--  						<entry key="settlementAmount" value="'1'.equals(tradeService?.details?.get('amlaCasaFlagFX')) ? tradeService?.details?.get('amlaCasaFlagAmount'): 
									'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCasaFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagFX')) ? tradeService?.details?.get('amlaRemittanceFlagAmount'): 
	 								'1'.equals(tradeService?.details?.get('amlaRemittanceFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaRemittanceFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
	 								'1'.equals(tradeService?.details?.get('amlaCashFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCashFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):
									'1'.equals(tradeService?.details?.get('amlaCheckFlagPhp')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmountInOrigCurrency(
	 								tradeService?.details?.get('amlaCheckFlagAmount'),
	 								tradeService?.specialRateUsdToPhp):new java.math.BigDecimal('0.00')"/>-->
							<entry key="settlementAmount" 
									value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCasaFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaCashFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCashFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaCheckFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaCheckFlagAmount')) :
											'1'.equals(tradeService?.details?.get('amlaRemittanceFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amlaRemittanceFlagAmount')) : new java.math.BigDecimal('0.00')"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="counterparty.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : tradeService?.details?.get('beneficiaryName').toString().toUpperCase()"/>
<!--                         <entry key="counterparty.institution.country" value="directRemittance?.originalPort"/> -->
<!--                         <entry key="counterparty.address.address1" value="tradeService?.details?.get('beneficiaryAddress')"/> -->

<!--                         <entry key="correspondentBank.name" value="''"/> -->
<!--                         <entry key="correspondentBank.countryCode" value="''"/> -->
                        <!--
                        <entry key="correspondentBank.name" value="directRemittance?.remittingBank"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(directRemittance?.remittingBank,4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name1" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryFirstName').toString() : ''"/>
                        <entry key="beneficiary.name3" value="'I'.equals(tradeService?.details?.get('individualCorporateFlag')) ? tradeService?.details?.get('beneficiaryLastName').toString() : tradeService?.details?.get('beneficiaryName').toString().toUpperCase()"/>
<!--                         <entry key="beneficiary.address.address1" value="directRemittance?.beneficiaryAddress"/> -->
<!--                         <entry key="beneficiary.country" value="T(org.apache.commons.lang3.StringUtils).substring(directRemittance?.originalPort,0,2)"/> -->

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="inceptionDate" value="directRemittance?.processDate"/>
                        <entry key="maturityDate" value="directRemittance?.maturityDate"/>

                        <entry key="transactionCode" value="'NOSET'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.DRCancelledEvent">
            <bean id="daCreatedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <!--<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               directRemittance?.currency?.currencyCode,
                               directRemittance?.amount?.toString(),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <!-- or should this be branch unit code? -->
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="directRemittance?.currency?.currencyCode"/>
                        <entry key="exchangeRate" value="'PHP'.equals(tradeService?.details?.get('currency'))?new BigDecimal('0.00'):T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.specialRateUsdToPhp,8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : directRemittance?.amount"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="directRemittance?.beneficiaryName"/>
                        <entry key="counterparty.address.address1" value="directRemittance?.beneficiaryAddress"/>

                        <entry key="correspondentBank.name" value="''"/>
                        <entry key="correspondentBank.countryCode" value="''"/>
                        <!--
                        <entry key="correspondentBank.name" value="directRemittance?.remittingBank"/>
                        <entry key="correspondentBank.countryCode" value="T(org.apache.commons.lang3.StringUtils).mid(directRemittance?.remittingBank,4,2)"/>
                        -->

                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <entry key="beneficiary.name1" value="directRemittance?.beneficiaryName"/>
                        <entry key="beneficiary.address.address1" value="directRemittance?.beneficiaryAddress"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="maturityDate" value="directRemittance?.maturityDate"/>

                        <entry key="transactionCode" value="'NOCAL'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.IndemnityCreatedEvent">
            <bean id="indemnityCreatedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CCBI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <entry key="transactionMode" value="''"/>
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('shipmentAmount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('shipmentCurrency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('shipmentCurrency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('shipmentAmount'))"/>
                        <entry key="productType" value="'TFSS1'"/>

                        <entry key="inputDate" value="new java.util.Date()"/>
                        <!--
                        <entry key="inceptionDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('processDate'),'MM/dd/yyyy')"/>
                        <entry key="maturityDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('maturityDate'),'MM/dd/yyyy')"/>
                        -->
                        <entry key="inceptionDate" value="letterOfCredit?.processDate"/>
                        <entry key="maturityDate" value="letterOfCredit?.expiryDate"/>


                        <entry key="transactionCode" value="'BGUAR'"/>

                        <entry key="paymentMode" value="'BGFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

<!--
        <entry key="com.ucpb.tfs.domain.product.event.IndemnityCancelledEvent">
            <bean id="indemnityCreatedBeanMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CMISC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        &lt;!&ndash;<entry key="transactionMode" value="' '"/>&ndash;&gt;
                        &lt;!&ndash;<entry key="transactionAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal(tradeService?.details?.get('amount')) : new java.math.BigDecimal(tradeService?.details?.get('amount')) * tradeService?.details?.get('currentRate')"/>&ndash;&gt;
                        &lt;!&ndash;<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('shipmentAmount') ?: 0)"/>&ndash;&gt;
                        <entry key="transactionAmount" value="indemnity?.shipmentAmount"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="indemntiy?.shipmentCurrency?.currencyCode"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('creationExchangeRateUsdToPHPUrr') ?: tradeService?.details?.get('urr'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : letterOfCredit.outstandingBalance"/>
                        
                        <entry key="counterparty.name1" value="letterOfCredit?.exporterName"/>
                        <entry key="counterparty.institution.country" value="letterOfCredit?.portOfDischargeOrDestination ?: letterOfCredit?.portOfOrigination"/>
                        <entry key="counterparty.address.address1" value="letterOfCredit?.exporterAddress"/>

                        <entry key="correspondentBank.countryCode" value="letterOfCredit?.bspCountryCode"/>
                        <entry key="correspondentBank.address.address1" value="letterOfCredit?.nameAndAddress"/>

                        &lt;!&ndash; beneficiaryName &ndash;&gt;
                        <entry key="beneficiary.name1" value="letterOfCredit?.exporterName"/>
                        &lt;!&ndash; beneficiaryAddress &ndash;&gt;
                        <entry key="beneficiary.address.address1" value="letterOfCredit?.exporterAddress"/>
                        
                        <entry key="productType" value="'TFSS1'"/>

						<entry key="inceptionDate" value="indemnity?.indemnityIssueDate"/>
                        <entry key="maturityDate" value="T(com.ucpb.tfs.utils.DateUtil).convertToDate(tradeService?.details?.get('maturityDate'),'MM/dd/yyyy')"/>
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'BGUAR'"/>

                        <entry key="paymentMode" value="'BGFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
-->

        <entry key="com.ucpb.tfs.domain.product.event.BCNegotiatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'IDCLO'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="tradeService?.details?.get('buyerName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('buyerAddress')"/>

                        <entry key="productType" value="'TFSS2'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'EXNEG'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.BCSettledPriorBCEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
<!--                         <entry key="transactionTypeCode" value="'CCBCE'"/> -->
						<entry key="transactionTypeCode" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCashFlagLc')) ? 'IOBLC':
                        			'1'.equals(tradeService?.details?.get('amlaCashFlagNlc')) ? 'IOBNC':
                        			'1'.equals(tradeService?.details?.get('amlaCasaFlagLc')) ? 'IOBLK':
                        			'1'.equals(tradeService?.details?.get('amlaCasaFlagNlc')) ? 'IOBNK': 
	 								'1'.equals(tradeService?.details?.get('amlaIBTFlagLc')) ? 'IOBLM':
									'1'.equals(tradeService?.details?.get('amlaIBTFlagNLc')) ? 'IOBNM':'CCBCE'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--proceedsAmount change to amontForCredit Henry -->
                         <entry key="transactionAmount" 
                                value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amountForCredit'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) :
		 								'1'.equals(tradeService?.details?.get('amlaIBTFlag')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('amountForCredit'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)) : new java.math.BigDecimal('0.00')"/> 
						<!--<entry key="transactionAmount" 
                        		value="'1'.equals(tradeService?.details?.get('amlaCasaFlagPhp')) ? tradeService?.details?.get('amlaCasaFlagAmount') :
                        		 		'1'.equals(tradeService?.details?.get('amlaCasaFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('proceedsAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):
                        			'1'.equals(tradeService?.details?.get('amlaIBTFlagPhp')) ? tradeService?.details?.get('amlaIBTFlagAmount'):
                        				'1'.equals(tradeService?.details?.get('amlaIBTFlagFx')) ? T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
		 								tradeService?.details?.get('currency'),
		 								tradeService?.details?.get('proceedsAmount'),
		 								T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)):new java.math.BigDecimal('0.00')"/>-->
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                       	<!--proceedsAmount change to amontForCredit Henry -->
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amountForCredit'))"/>
                    <!--     <entry key="settlementAmount" 
									value="'1'.equals(tradeService?.details?.get('amlaCasaFlag')) ? tradeService?.details?.get('amlaCasaFlagAmount'):
                        			'1'.equals(tradeService?.details?.get('amlaIBTFlag')) ? tradeService?.details?.get('amlaIBTFlagAmount'):new java.math.BigDecimal('0.00')"/>	-->					
                        <!-- beneficiaryName -->
                        <entry key="counterparty.name3" value="tradeService?.details?.get('buyerName').toString().toUpperCase() ?: exportBills?.buyerName"/>
                        <entry key="counterparty.address.address3" value="tradeService?.details?.get('buyerAddress').toString().toUpperCase() ?: exportBills?.buyerAddress"/>
                        
						<entry key="beneficiary.name3" value="tradeService?.details?.get('sellerName').toString().toUpperCase()"/>
                        
                        <entry key="productType" value="'TFSS2'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'EXSET'"/>

                        <entry key="paymentMode" value="'CRADV'"/>
                        <entry key="beneficiaryAccountNo" value="'1'.equals(tradeService?.details?.get('amlaCasaFlag'))?'SD'+tradeService?.details?.get('amlaCasaFlagAccountNo'):tradeService?.details?.get('amlaCasaFlagAccountNo')"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.BCCancelledEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CCBCE'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address1')"/>

                        <entry key="productType" value="'TFSS2'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'EXNEG'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.BPNegotiatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'EXSET'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="tradeService?.details?.get('buyerName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('buyerAddress')"/>

                        <entry key="productType" value="'TFSS2'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'EXNEG'"/>

                        <entry key="paymentMode" value="'SHPDC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.BPSettledEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CCBCE'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="exportBills.getBuyerName()"/>
                        <entry key="productType" value="'TFSS2'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'EXSET'"/>

                        <entry key="paymentMode" value="'CRADV'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>


        <entry key="com.ucpb.tfs.domain.product.event.ImportAdvancePaymentCreatedEvent">
            <bean id="importAdvancePaymentEventMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <entry key="counterparty.name3" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/>

                        <!-- beneficiaryName -->
                        <!--<entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiary')"/>-->
                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <!--<entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryCustomerAddress')"/>-->
                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'LCOPN'"/>

                        <entry key="paymentMode" value="'LCFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.ImportAdvancePaymentRefundCreatedEvent">
            <bean id="importAdvanceRefundEventMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'IDCLI'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <entry key="counterparty.name3" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/>

                        <!-- beneficiaryName -->
                        <entry key="beneficiary.name3" value="tradeService?.details?.get('beneficiary')"/>
                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <!--<entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryCustomerAddress')"/>-->
                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'LCOPN'"/>

                        <entry key="paymentMode" value="'LCFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.ExportAdvancePaymentCreatedEvent">
            <bean id="importAdvancePaymentEventMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'CCBCE'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.ExportAdvancePaymentRefundCreatedEvent">
            <bean id="importAdvanceRefundEventMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'CMISC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.corresCharges.event.CorresChargeActualApprovedEvent">
            <bean id="actualCorresChargeEventMapper" class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'CMISC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <entry key="counterparty.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/>

                        <entry key="beneficiary.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="beneficiary.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="beneficiary.address.address2" value="tradeService?.details?.get('address2')"/>

                        <!-- beneficiaryName -->
                        <!--<entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiary')"/>-->
                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <!--<entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryCustomerAddress')"/>-->

                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'LCOPN'"/>

                        <entry key="paymentMode" value="'LCFRM'"/>
                        <!--<entry key="paymentMode" value="tradeService?.details?.get('paymentDetails')"/>-->
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.ExportAdvisingCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CMISC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('lcCurrency'),
                               tradeService?.details?.get('lcAmount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('lcCurrency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('lcCurrency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('lcAmount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="exportAdvising?.importerName"/>
                        <entry key="counterparty.address.address1" value="exportAdvising?.importerAddress"/>
                        <entry key="productType" value="'TFSS2'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'EXADV'"/>

                        <entry key="paymentMode" value="'EXPLC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.ExportAdvisingAmendedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CMISC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('lcCurrency'),
                               tradeService?.details?.get('lcAmount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('lcCurrency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('lcCurrency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('lcAmount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="amendedExportAdvising?.importerName"/>
                        <entry key="counterparty.address.address1" value="amendedExportAdvising?.importerAddress"/>
                        <entry key="productType" value="'TFSS2'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'EXAMD'"/>

                        <entry key="paymentMode" value="'EXPLC'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.ExportAdvisingCancelledEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CCBCE'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <entry key="transactionAmount" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('lcCurrency'),
                               tradeService?.details?.get('lcAmount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('lcCurrency') ?: 'PHP')"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('lcCurrency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('lcAmount'))"/>

                        <!-- beneficiaryName -->
                        <entry key="counterparty.name1" value="cancelledExportAdvising?.importerName"/>
                        <entry key="counterparty.address.address1" value="cancelledExportAdvising?.importerAddress"/>

                        <entry key="productType" value="'TFSS2'"/>

                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="''"/>

                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.cdt.event.CDTPaymentRequestPaidEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CCOL'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <entry key="transactionAmount" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + cdtPaymentRequest?.iedieirdNumber"/>
                        <entry key="settlementCurrency" value="'PHP'"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision('0',8)"/>
                        <entry key="settlementAmount" value="T(java.math.BigDecimal).ZERO"/>

                        <entry key="counterparty.address.address1" value="'MANILA'"/>

                        <entry key="productType" value="'TFSS1'"/>	
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <!--<entry key="inceptionDate" value="cdtPaymentRequest?.dateUploaded"/>-->
                        <!--<entry key="maturityDate" value="cdtPaymentRequest?.datePaid"/>-->

                        <entry key="transactionCode" value="''"/>

                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.cdt.event.CDTRefundCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CCOL'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <entry key="transactionAmount" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + cdtPaymentRequest?.iedieirdNumber"/>
                        <entry key="settlementCurrency" value="'PHP'"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision('0',8)"/>
                        <entry key="settlementAmount" value="T(java.math.BigDecimal).ZERO"/>

                        <entry key="counterparty.address.address1" value="'MANILA'"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="inceptionDate" value="cdtPaymentRequest?.dateUploaded"/>
                        <entry key="maturityDate" value="cdtPaymentRequest?.datePaid"/>

                        <entry key="transactionCode" value="''"/>

                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>

        <entry key="com.ucpb.tfs.domain.product.event.CDTRemittanceCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CPYGA'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('remittanceAmount'))"/>-->
                        <entry key="transactionAmount" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="tradeService?.details?.get('bocAccount')"/>
                        <entry key="settlementCurrency" value="'PHP'"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision('0',8)"/>
                        <entry key="settlementAmount" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="counterparty.address.address1" value="'MANILA'"/>

                        <entry key="productType" value="'TFSS1'"/>
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <!--<entry key="inceptionDate" value="cdtRemittance?.remittanceDate"/>-->
                        <!--<entry key="maturityDate" value="cdtRemittance?.remittanceDate"/>-->

                        <entry key="transactionCode" value="''"/>

                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
<!-- Not reportable to AMLA as per Ma'am Juliet 2/8/2014
        <entry key="com.ucpb.tfs.domain.product.event.RebateCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="transactionTypeCode" value="'CMISC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>  &lt;!&ndash; Always 'NA' because transactionTypeCode is mandatory &ndash;&gt;
                        <entry key="transactionAmount" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="rebate?.currency?.currencyCode"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : rebate?.amount"/>
                        <entry key="correspondentBank.name" value="tradeService?.details?.get('correspondentBankName')"/>
                        <entry key="correspondentBank.countryCode" value="tradeService?.details?.get('adviseThroughBankLocationTo') ?: tradeService?.details?.get('adviseThroughBankLocationFrom')"/>

                        &lt;!&ndash; beneficiaryAddress &ndash;&gt;
                        <entry key="beneficiary.name1" value="'UCPB'"/>
                        <entry key="beneficiary.address.address1" value="'UCPB Corporate Offices, 7907 Makati Avenue, Makati City, Philippines'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
-->

        <entry key="com.ucpb.tfs.domain.product.event.APCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'IIPC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <entry key="counterparty.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/>

                        <!-- beneficiaryName -->
                        <!--<entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiary')"/>-->
                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <!--<entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryCustomerAddress')"/>-->
                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <!--<entry key="transactionCode" value="'APOPN'"/>-->
                        <entry key="transactionCode" value="''"/>

                        <!--<entry key="paymentMode" value="'LCFRM'"/>-->
                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.APAppliedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'IIPC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <entry key="counterparty.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/>

                        <!-- beneficiaryName -->
                        <!--<entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiary')"/>-->
                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <!--<entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryCustomerAddress')"/>-->
                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <!--<entry key="transactionCode" value="'APAPP'"/>-->
                        <entry key="transactionCode" value="''"/>

                        <!--<entry key="paymentMode" value="'LCFRM'"/>-->
                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.ARCreatedEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'IIPC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <entry key="counterparty.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/>

                        <!-- beneficiaryName -->
                        <!--<entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiary')"/>-->
                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <!--<entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryCustomerAddress')"/>-->
                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <!--<entry key="transactionCode" value="'AROPN'"/>-->
                        <entry key="transactionCode" value="''"/>

                        <!--<entry key="paymentMode" value="'LCFRM'"/>-->
                        <entry key="paymentMode" value="''"/>

                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.ARSettledEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'IIPC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: '0')  * tradeService?.details?.get('currentRate')"/>-->
                        <!--<entry key="transactionAmount" value="new java.math.BigDecimal(tradeService?.details?.get('amount') ?: 0)"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('amount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('amount'))"/>

                        <entry key="counterparty.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/>

                        <!-- beneficiaryName -->
                        <!--<entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiary')"/>-->
                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <!--<entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryCustomerAddress')"/>-->
                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <!--<entry key="transactionCode" value="'ARSET'"/>-->
                        <entry key="transactionCode" value="''"/>
                        <!--<entry key="paymentMode" value="'LCFRM'"/>-->
                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.CashLcRefundEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <!-- if documentSubType1 == Standby -->
                        <entry key="transactionTypeCode" value="'IIPC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="' '"/>-->
                        <entry key="transactionAmount"
                               value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).getTransactionAmount(
                               tradeService?.details?.get('currency'),
                               tradeService?.details?.get('refundableAmount'),
                               tradeService?.details?.get('currentRate'))"/>
                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + tradeService?.documentNumber?.toString()"/>
                        <entry key="settlementCurrency" value="T(java.util.Currency).getInstance(tradeService?.details?.get('currency'))"/>
                        <entry key="exchangeRate" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).setPrecision(tradeService?.details?.get('currentRate'),8)"/>
                        <entry key="settlementAmount" value="'PHP'.equals(tradeService?.details?.get('currency')) ? new java.math.BigDecimal('0.00') : T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('refundableAmount'))"/>

                        <entry key="counterparty.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/>

                        <!-- beneficiaryName -->
                        <!--<entry key="beneficiary.name1" value="tradeService?.details?.get('beneficiary')"/>-->
                        <!--&lt;!&ndash; beneficiaryAddress &ndash;&gt;-->
                        <!--<entry key="beneficiary.address.address1" value="tradeService?.details?.get('beneficiaryCustomerAddress')"/>-->
                        <entry key="productType" value="'TFSS1'"/>
                        <!-- LC OPEN DATE -->
                        <entry key="inputDate" value="new java.util.Date()"/>

                        <entry key="transactionCode" value="'LCREF'"/>

                        <entry key="paymentMode" value="'LCFRM'"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.ImportChargesPaidEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CMISC'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <entry key="transactionAmount" value="T(java.math.BigDecimal).ZERO"/> <!-- will be overidden -->
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'O'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + (letterOfCredit != null ? letterOfCredit?.documentNumber?.toString() : tradeService?.details?.get('cifNumber'))"/>

                        <entry key="counterparty.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="counterparty.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="counterparty.address.address2" value="tradeService?.details?.get('address2')"/>

                        <entry key="beneficiary.name1" value="tradeService?.details?.get('longName')"/>
                        <entry key="beneficiary.address.address1" value="tradeService?.details?.get('address1')"/>
                        <entry key="beneficiary.address.address2" value="tradeService?.details?.get('address2')"/>

                        <entry key="settlementCurrency" value="'PHP'"/>
                        <entry key="exchangeRate" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="settlementAmount" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="productType" value="'TFSS1'"/>
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="transactionCode" value="''"/>
                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.ExportChargesPaidEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                    	<entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CCBCE'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->
                        <entry key="transactionAmount" value="T(java.math.BigDecimal).ZERO"/> <!-- will be overidden -->
                        <entry key="transactionType" value="'C'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + (tradeService?.documentNumber?.toString() ?: tradeService?.details?.get('cifNumber'))"/>
                        <entry key="settlementCurrency" value="'PHP'"/>
                        <entry key="exchangeRate" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="settlementAmount" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="productType" value="'TFSS1'"/>
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="transactionCode" value="''"/>
                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
        <entry key="com.ucpb.tfs.domain.product.event.ExportChargesRefundEvent">
            <bean class="com.ucpb.tfs.utils.BeanMapper">
                <constructor-arg name="properties">
                    <util:map>
                        <entry key="tradeServiceId" value="tradeService?.tradeServiceId"/>
                    	<entry key="transactionDate" value="new java.util.Date()"/>
                        <entry key="dealNumber" value="'NA'"/>
                        <entry key="transactionTypeCode" value="'CCBCE'"/>
                        <entry key="transactionSubtype" value="'NA'"/>
                        <!--<entry key="transactionMode" value="''"/>-->

                        <entry key="transactionAmount" value="T(com.ucpb.tfs.utils.AmlaLoggingUtil).formatAmount(tradeService?.details?.get('refundableServiceChargeAmount'))"/>

                        <entry key="transactionType" value="'D'"/>
                        <entry key="direction" value="'I'"/>
                        <entry key="branchCode" value="tradeService?.details?.get('processingUnitCode') ?: tradeService?.details?.get('unitcode')"/>
                        <entry key="accountNumber" value="'TFSS' + (tradeService?.documentNumber?.toString() ?: tradeService?.details?.get('cifNumber'))"/>
                        <entry key="settlementCurrency" value="'PHP'"/>
                        <entry key="exchangeRate" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="settlementAmount" value="T(java.math.BigDecimal).ZERO"/>
                        <entry key="productType" value="'TFSS1'"/>
                        <entry key="inputDate" value="new java.util.Date()"/>
                        <entry key="transactionCode" value="''"/>
                        <entry key="paymentMode" value="''"/>
                    </util:map>
                </constructor-arg>
                <constructor-arg name="targetClass" value="com.ucpb.tfs.domain.audit.TransactionLog"/>
            </bean>
        </entry>
        
    </util:map>

</beans>
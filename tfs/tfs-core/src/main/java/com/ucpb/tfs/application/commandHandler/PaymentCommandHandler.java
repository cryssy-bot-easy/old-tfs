package com.ucpb.tfs.application.commandHandler;

import com.incuventure.cqrs.token.TokenProvider;
import com.ucpb.tfs.application.command.EtsCommand;
import com.ucpb.tfs.application.command.PayCommand;
import com.ucpb.tfs.domain.payment.Payment;
import com.ucpb.tfs.domain.payment.PaymentInstrumentType;
import com.ucpb.tfs.domain.payment.PaymentRepository;
import com.ucpb.tfs.domain.service.ChargeType;
import com.ucpb.tfs.domain.service.TradeService;
import com.ucpb.tfs.domain.service.TradeServiceId;
import com.ucpb.tfs.domain.service.TradeServiceRepository;
import com.ucpb.tfs.interfaces.domain.Loan;
import com.ucpb.tfs.interfaces.services.LoanService;
import com.ucpb.tfs.utils.DateUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Currency;
import java.util.Map;

/**
 */
//@Component
@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
public class PaymentCommandHandler  {

    @Autowired
    PaymentRepository paymentRepository;

    @Autowired
    TradeServiceRepository tradeServiceRepository;

    @Autowired
    private LoanService loanService;

    @Autowired
    private TokenProvider tokenProvider;

    //TODO: Break this into multiple commands
    public void handle(PayCommand command) {
        System.out.println("inside PaymentCommandHandler");
        try {
            TradeService tradeService = tradeServiceRepository.load(new TradeServiceId(getParameter(command, "tradeServiceId")));
            ChargeType chargeType = ChargeType.valueOf(getParameter(command, "chargeType").toUpperCase());
            Payment payment = paymentRepository.get(tradeService.getTradeServiceId(), chargeType);
            PaymentInstrumentType paymentInstrumentType = PaymentInstrumentType.valueOf(getParameter(command, "modeOfPayment"));
            BigDecimal amount = new BigDecimal(getParameter(command, "amount").trim());
            Currency settlementCurrency = Currency.getInstance(getParameter(command, "settlementCurrency"));
            String referenceNumber = null;

            if (PaymentInstrumentType.UA_LOAN.equals(paymentInstrumentType)) {
                referenceNumber = tradeService.getDocumentNumber().toString();
            } else {
                referenceNumber = getParameter(command, getReferenceNumberKey(paymentInstrumentType));
            }

            if (PaymentInstrumentType.AP.equals(paymentInstrumentType)) {
                payment.payItem(paymentInstrumentType, tradeService.getDocumentNumber().toString(), referenceNumber, getParameter(command, "referenceId"));
            }else{
                payment.payItem(paymentInstrumentType,tradeService.getDocumentNumber().toString(),referenceNumber);
            }


            if(paymentInstrumentType.isLoan()){
                loanService.insertLoan(mapToLoan(command.getParameterMap(),tradeService.getDocumentNumber().toString()),false);
            }
            paymentRepository.saveOrUpdate(payment);

        } catch (Exception e) {
            //DO NOT EVER EVER EVER CATCH EXCEPTIONS WITHOUT DOING ANYTHING. Q___Q
            //HAD NO CHOICE.
            e.printStackTrace();
        }

    }

    private Loan mapToLoan(Map<String, Object> parameterMap,String documentNumber) throws ParseException {
        Loan loan = new Loan();
        loan.setCurrencyType((String)parameterMap.get("bookingCurrency"));
        loan.setDocumentNumber(documentNumber);
        loan.setInterestRate(new BigDecimal((String)parameterMap.get("interestRate")));
        //TODO: set payment frequency payment frequency
        loan.setIntPaymentFrequencyCode((String)parameterMap.get("interestTerm"));
        loan.setLoanTerm(Integer.valueOf((String)parameterMap.get("loanTerm")));
        loan.setLoanTermCode((String)parameterMap.get("loanTermCode"));
        //loan type -- not needed
        //TODO: confirm if mainCifNumber is being passed
        loan.setMainCifNumber((String)parameterMap.get("mainCifNumber"));
        loan.setMaturityDate(DateUtil.convertToDateInt((String)parameterMap.get("loanMaturityDate")));
        //3 character officer code
        loan.setOfficer((String)parameterMap.get("accountOfficer"));
       //TODO: set order amount
//        loan.setOrderExpiryDate();
//        loan.setOriginalBalance();   -- the amount of the nego (in php)
//        loan.setOriginalLoanDate();  -- date of debit (date loan was created)
//        loan.setPaymentAmount();   -- zero
//          loan.setPaymentCode();
//        loan.setPaymentFrequency();  -- how to calculate payment frequency
//        loan.setPaymentFrequencyCode(); -- how to get frequency code?
//        loan.setPnNumber();  -- generated by sibs
//        loan.setReportingBranch(); -- processing unit code
//        loan.setShortName();  -- not needed
//        loan.setTransactionSequenceNumber(); -- generated by loans service
//        loan.setTransactionStatus();  -- for retrieval
//        loan.setTrustUserId();
//        loan.setUnlinkFlag();
        // Use DocumentNumber as the referenceNumber for loans
        //
        //loan.setCreditorCode(); -- if UA (retrieve the BSP Creditor Code based on reimbursing bank code
      return loan;
    }




    private String getReferenceNumberKey(PaymentInstrumentType paymentType) {
        String referenceNumber = null;
        switch (paymentType) {
            case CASA:
            case MD:
            case AP:
            case AR:
                referenceNumber = "accountNumber";
                break;
            case CHECK:
            case CASH:
            case REMITTANCE:
                referenceNumber = "tradeSuspenseAccount";
                break;
        }
        return referenceNumber;
    }

    private String getParameter(EtsCommand command, String key) {
        return (String) command.getParameterMap().get(key);
    }
}

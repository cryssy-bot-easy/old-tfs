diff --git a/Database_Programs/Loans and Facility Interface/GET_BALANCE.sql b/Database_Programs/Loans and Facility Interface/GET_BALANCE.sql
--- a/Database_Programs/Loans and Facility Interface/GET_BALANCE.sql	
+++ b/Database_Programs/Loans and Facility Interface/GET_BALANCE.sql	
@@ -21,9 +21,8 @@
     DECLARE V_UNPAID_LOANS DECIMAL(15, 2);
     DECLARE V_TYPE_OF_CREDIT CHAR(1);
 
-    -- RETRIEVE FACILITY BALANCE LIMIT ON LNAPPF
-    SET (V_FACILITY_LIMIT, V_AFCPNO, V_TYPE_OF_CREDIT) =
+        SET (V_FACILITY_LIMIT, V_AFCPNO, V_TYPE_OF_CREDIT) =
         (SELECT A.AFFAMT, A.AFCPNO, B.LKREVL
         FROM TFSDB2S.LNAPPF A, TFSDB2S.LNPARK B WHERE A.AFFCDE = B.LKFCOD AND A.AFCIF# = P_CIFNUMBER
             AND A.AFFCDE = P_FACILITY_CODE AND A.AFSEQ = P_FACILITY_ID);
 
@@ -26,9 +25,8 @@
         (SELECT A.AFFAMT, A.AFCPNO, B.LKREVL
         FROM TFSDB2S.LNAPPF A, TFSDB2S.LNPARK B WHERE A.AFFCDE = B.LKFCOD AND A.AFCIF# = P_CIFNUMBER
             AND A.AFFCDE = P_FACILITY_CODE AND A.AFSEQ = P_FACILITY_ID);
 
-    -- IF REVOLVING
-    IF V_TYPE_OF_CREDIT = 'R' THEN
-        SET V_OUTSTANDING_AVAILMENT = COALESCE((SELECT SUM(TOSBAL_IRR) FROM TFSDB2S.LNCLST WHERE AFCPNO = V_AFCPNO), 0);
+        IF V_TYPE_OF_CREDIT = 'R' THEN
+        SET V_OUTSTANDING_AVAILMENT = COALESCE((SELECT SUM(TOSBAL_IRR) FROM TFSDB2S.LNCLST WHERE AFCPNO = V_AFCPNO AND CIFNO = P_CIFNUMBER), 0);
 
         SET V_UNPAID_LOANS = (
@@ -33,9 +31,4 @@
 
         SET V_UNPAID_LOANS = (
---            WITH LATEST_PER_LOAN AS (SELECT ACCTNO, MAX(TRSEQ) TRSEQ
---                    FROM TFSDB2S.LNTFINT
---                    GROUP BY ACCTNO),
---                COUNT_PER_LOAN AS (SELECT ACCTNO, COUNT(*) CNT FROM TFSDB2S.LNTFINT GROUP BY ACCTNO),
---                ACTIVE_LOAN AS (SELECT A.* FROM LATEST_PER_LOAN A, COUNT_PER_LOAN B WHERE A.ACCTNO = B.ACCTNO AND 1 = MOD(CNT, 2))
             SELECT SUM(A.LORGAMT) - SUM(A.LPMTAMT)
             FROM TFSDB2S.LNTFINT A
@@ -40,7 +33,6 @@
             SELECT SUM(A.LORGAMT) - SUM(A.LPMTAMT)
             FROM TFSDB2S.LNTFINT A
-            -- RETRIEVAL OF ACTIVE LOAN THAT HAS NO REVERSAL
-            INNER JOIN (
+                        INNER JOIN (
                  SELECT X.* FROM (SELECT ACCTNO, MAX(TRSEQ) TRSEQ 
                  FROM TFSDB2S.LNTFINT GROUP BY ACCTNO) X
                      , (SELECT ACCTNO, COUNT(*) CNT FROM TFSDB2S.LNTFINT GROUP BY ACCTNO) Y
@@ -48,8 +40,8 @@
             ) B
             ON A.ACCTNO = B.ACCTNO
                 AND A.TRSEQ = B.TRSEQ
-            WHERE A.TNUMBR IN (SELECT DISTINCT ACCTNO FROM TFSDB2S.LNCLST WHERE AFCPNO = V_AFCPNO)
+            WHERE A.ACCTNO IN (SELECT DISTINCT ACCTNO FROM TFSDB2S.LNTFINT WHERE CIFNO = P_CIFNUMBER)
                 AND A.LOAN_STATUS = 'UNPAID');
         
         SET V_OUTSTANDING_BAL = V_FACILITY_LIMIT - (V_OUTSTANDING_AVAILMENT + COALESCE(V_UNPAID_LOANS, 0));
     ELSE
@@ -52,7 +44,6 @@
                 AND A.LOAN_STATUS = 'UNPAID');
         
         SET V_OUTSTANDING_BAL = V_FACILITY_LIMIT - (V_OUTSTANDING_AVAILMENT + COALESCE(V_UNPAID_LOANS, 0));
     ELSE
-    -- IF NON REVOLVING
-        SET V_OUTSTANDING_BAL = V_FACILITY_LIMIT - COALESCE((SELECT SUM(ORGLMT_IRR) FROM TFSDB2S.LNCLST WHERE AFCPNO = V_AFCPNO), 0);
+            SET V_OUTSTANDING_BAL = V_FACILITY_LIMIT - COALESCE((SELECT SUM(ORGLMT_IRR) FROM TFSDB2S.LNCLST WHERE AFCPNO = V_AFCPNO), 0);
     END IF;
@@ -58,3 +49,4 @@
     END IF;
+    
     RETURN V_OUTSTANDING_BAL;
 END P1@
diff --git a/Database_Programs/Loans and Facility Interface/GET_CICLS.sql b/Database_Programs/Loans and Facility Interface/GET_CICLS.sql
--- a/Database_Programs/Loans and Facility Interface/GET_CICLS.sql	
+++ b/Database_Programs/Loans and Facility Interface/GET_CICLS.sql	
@@ -12,5 +12,4 @@
 --######################################################################################################
 P1: BEGIN
     DECLARE C_CICLS CURSOR WITH RETURN FOR
-        WITH IRR_RATES AS (SELECT JFXDCD, JFXDCR FROM TFSDB2S.JHFXDT WHERE JFXDBC = 'PHP' AND JFXDRN = 3)
         SELECT A.CIFNO AS "CLIENT_NUMBER",
@@ -16,9 +15,23 @@
         SELECT A.CIFNO AS "CLIENT_NUMBER",
-            CASE WHEN B.CFINDI = 'Y'
-                THEN COALESCE(TRIM(B.CFNA1A), '') || ' ' || COALESCE(TRIM(B.CFNA1B),'') || ' ' || COALESCE(TRIM(B.CFNA1), '')
-                WHEN B.CFINDI = 'N' THEN B.CL_NAME ELSE ''
-            END AS "CLIENT_NAME",
+            CASE WHEN CFINDI = 'Y' 
+                            THEN COALESCE(TRIM(B.CFNA1A), '') || ' ' ||
+                                    CASE WHEN B.CFNA1B = '' THEN
+                                        COALESCE(TRIM(B.CFNA1), '')
+                                    ELSE
+                                        COALESCE(TRIM(B.CFNA1B),'')  || ' ' || COALESCE(TRIM(B.CFNA1), '')
+                                    END
+                    WHEN CFINDI = 'N'
+                            THEN COALESCE(CL_NAME,
+                                    COALESCE(TRIM(B.CFNA1A), '') || ' ' ||
+                                    CASE WHEN CFNA1B = '' THEN
+                                        COALESCE(TRIM(B.CFNA1), '')
+                                    ELSE
+                                        COALESCE(TRIM(B.CFNA1B),'')  || ' ' || COALESCE(TRIM(B.CFNA1), '')
+                                    END
+                                    )
+                ELSE ''
+                END AS CLIENT_NAME,
             TRIM(B.CFTINN) AS "TIN_NUMBER",
             '0' AS TRAN_TYPE,
             A.CREATED_DATE PROCESS_DATE,
             C.CICLS_PRODUCT_CODE,
@@ -21,9 +34,9 @@
             TRIM(B.CFTINN) AS "TIN_NUMBER",
             '0' AS TRAN_TYPE,
             A.CREATED_DATE PROCESS_DATE,
             C.CICLS_PRODUCT_CODE,
-            A.ORGLMT_IRR AS "APPROVED_AMOUNT",
-            A.TOSBAL_IRR AS "OUTSTANDING_CURRENT",
+            COALESCE(A.ORGLMT_IRR, 0) AS "APPROVED_AMOUNT",
+            COALESCE(A.TOSBAL_IRR, 0) AS "OUTSTANDING_CURRENT",
             0 AS "OUTSTANDING_PAST_DUE"
         FROM TFSDB2S.LNCLST_CICLS A
         LEFT JOIN TFSDB2S.CFMAST B
@@ -32,4 +45,5 @@
             ON A.PRODUCT_ID = C.PROD_ID
         LEFT JOIN TFSDB2S.LNAPPF D
             ON A.AFCPNO = D.AFCPNO
+            
         UNION ALL
@@ -35,8 +49,13 @@
         UNION ALL
-        SELECT A.CIFNO, B.CFSNME SHORTNAME, B.CFTINN, '0', A.CREATED_DATE, C.CICLS_PRODUCT_CODE
-             , A.LORGAMT
-             , A.LPMTAMT
-             , A.OUTSTANDING_PAST_DUE
+
+        SELECT A.CIFNO
+             , B.CFSNME SHORTNAME
+             , B.CFTINN, '0'
+             , A.CREATED_DATE
+             , C.CICLS_PRODUCT_CODE
+             , COALESCE(A.LORGAMT, 0)
+             , COALESCE(A.LPMTAMT, 0)
+             , COALESCE(A.OUTSTANDING_PAST_DUE, 0)
         FROM TFSDB2S.LNTFINT_CICLS A
         INNER JOIN TFSDB2S.CFMAST B
             ON A.CIFNO = B.CFCIF#
@@ -46,6 +65,9 @@
             ON A.ACCTNO = D.PNNUMBER
         LEFT JOIN TFSDB2S.LNAPPF E
             ON D.FACILITYREFERENCENUMBER = E.AFCPNO
+        WHERE C.CICLS_PRODUCT_CODE <> '300'
+        OR C.CICLS_PRODUCT_CODE <> ''
+   	    OR C.CICLS_PRODUCT_CODE IS NOT NULL
         ;
 
     OPEN C_CICLS;
diff --git a/Database_Programs/Loans and Facility Interface/INQUIRE_CONTINGENT.sql b/Database_Programs/Loans and Facility Interface/INQUIRE_CONTINGENT.sql
--- a/Database_Programs/Loans and Facility Interface/INQUIRE_CONTINGENT.sql	
+++ b/Database_Programs/Loans and Facility Interface/INQUIRE_CONTINGENT.sql	
@@ -1,4 +1,4 @@
---<SCRIPTOPTIONS STATEMENTTERMINATOR="@">
+--<ScriptOptions statementTerminator="@">
 CREATE OR REPLACE PROCEDURE TFSDB2S.INQUIRE_CONTIGENT(IN P_CIFNUMBER VARCHAR(7)
     , IN P_DOCUMENTNUMBER VARCHAR(21), IN P_ORIGINALAMOUNT DECIMAL(19, 2)
     , IN P_OUTSTANDINGBALANCE DECIMAL(19, 2), IN P_TRANSACTIONDATE DECIMAL(6 , 0)
@@ -31,8 +31,8 @@
        ON C.DOCUMENTCLASS = D.MOP_PRODUCT
           AND C.SERVICETYPE = D.SERVICE_TYPE
        WHERE REPLACE(B.TRADEPRODUCTNUMBER, '-', '') = P_DOCUMENTNUMBER);
-    SET V_IRR_RATE = (SELECT JFXDCR FROM TFSDB2S.JHFXDT
-        WHERE JFXDBC = 'PHP' AND JFXDCD = P_CURRENCYCODE AND JFXDRN = 3);
+    SET V_IRR_RATE = CASE WHEN P_CURRENCYCODE = 'PHP' THEN 1 ELSE (SELECT JFXDCR FROM TFSDB2S.JHFXDT
+        WHERE JFXDBC = 'PHP' AND JFXDCD = P_CURRENCYCODE AND JFXDRN = 3) END;
     SET V_CLIENT_NAME = (SELECT CFSNME FROM TFSDB2S.CFMAST WHERE CFCIF# = P_CIFNUMBER);
 
     INSERT INTO TFSDB2S.LNCLST(SYSCOD, CIFNO, ACCTNO, ORGLMT, TOSBAL, PRODUCT
diff --git a/Database_Programs/Loans and Facility Interface/PROCESS_CICLS.sql b/Database_Programs/Loans and Facility Interface/PROCESS_CICLS.sql
--- a/Database_Programs/Loans and Facility Interface/PROCESS_CICLS.sql	
+++ b/Database_Programs/Loans and Facility Interface/PROCESS_CICLS.sql	
@@ -19,7 +19,7 @@
         , ORGLMT_IRR, TOSBAL_IRR)
     WITH LATEST_TS AS (SELECT TRADEPRODUCTNUMBER, MAX(CREATEDDATE) CREATEDDATE
         FROM TRADESERVICE
-        WHERE DOCUMENTCLASS = 'LC' AND SERVICETYPE NOT IN ('UA_LOAN_SETTLEMENT', 'ADJUSTMENT')
+        WHERE DOCUMENTCLASS IN ('DA','OA','LC', 'INDEMNITY') AND SERVICETYPE NOT IN ('UA_LOAN_SETTLEMENT', 'ADJUSTMENT')
         GROUP BY TRADEPRODUCTNUMBER),
         IRR_RATES AS (SELECT JFXDCD, JFXDCR FROM TFSDB2S.JHFXDT WHERE JFXDBC = 'PHP' AND JFXDRN = 3),
         REV_INFO AS (
@@ -47,4 +47,8 @@
                 AND LOC.TENOR = 'SIGHT'
                 AND (LOC.TYPE = 'CASH' OR LOC.CASHFLAG = 1)
         )        
+    SELECT SYSCOD, CIFNO, ACCTNO, NAME, CIFID, CIFCOD, ORGLMT, TOSBAL, PRODUCT, PRODSC
+        , DATE, TIME, LORGAM, TLOSBAL, CURTYP, ALFLG, ADBBAL, STADSC, AFCPNO, ORGSBL
+        , LOCSBL, PROD_ID, CREATED_DATE, ORGLMT_IRR, TOSBAL_IRR
+        FROM (
     -- FACILITY AVAILMENT / LNCLST
@@ -50,111 +54,122 @@
     -- FACILITY AVAILMENT / LNCLST
-    SELECT A.SYSCOD, A.CIFNO, A.ACCTNO, A.NAME, A.CIFID, A.CIFCOD, A.ORGLMT, A.TOSBAL, A.PRODUCT, A.PRODSC
-        , A.DATE, A.TIME, A.LORGAM, A.TLOSBAL, A.CURTYP, A.ALFLG, A.ADBBAL, A.STADSC, A.AFCPNO, A.ORGSBL
-        , A.LOCSBL, D.PROD_ID, NOW(), A.ORGLMT_IRR, A.TOSBAL_IRR
-    FROM TFSDB2S.LNCLST A
-    INNER JOIN LATEST_TS B
-    ON A.ACCTNO = REPLACE(B.TRADEPRODUCTNUMBER, '-', '')
-    INNER JOIN TRADESERVICE C
-    ON B.TRADEPRODUCTNUMBER = C.TRADEPRODUCTNUMBER
-        AND B.CREATEDDATE = C.CREATEDDATE
-    LEFT JOIN TFSDB2S.PROD_PAYMNT_CICLS_MAPPING D
-    ON C.DOCUMENTCLASS = D.MOP_PRODUCT
-       AND C.SERVICETYPE = D.SERVICE_TYPE
-    -- CASH LC
-    UNION ALL
-    SELECT 'TF', C.CIFNUMBER, REPLACE(A.DOCUMENTNUMBER, '-', ''), G.CFSNME, NULL, NULL, C.AMOUNT, A.OUTSTANDINGBALANCE, '25', NULL
-        , NULL, NULL, DECODE(C.CURRENCY , 'PHP', C.AMOUNT
-            , C.AMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = C.CURRENCY))
-        , DECODE(C.CURRENCY , 'PHP', A.OUTSTANDINGBALANCE
-            , A.OUTSTANDINGBALANCE * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = C.CURRENCY))
-        , C.CURRENCY, 'A', 0, 'CURRENT', '', 0, 0, F.PROD_ID, NOW()
-        , DECODE(C.CURRENCY , 'PHP', C.AMOUNT
-            , C.AMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = C.CURRENCY))
-        , DECODE(C.CURRENCY , 'PHP', A.OUTSTANDINGBALANCE
-            , A.OUTSTANDINGBALANCE * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = C.CURRENCY))
-    FROM FINAL_CASH A
-    LEFT JOIN LETTEROFCREDIT_AUDIT B
-        ON A.DOCUMENTNUMBER = B.DOCUMENTNUMBER
-            AND A.LASTMODIFIEDDATE = B.LASTMODIFIEDDATE
-    LEFT JOIN TRADEPRODUCT_AUDIT C
-        ON B.DOCUMENTNUMBER = C.DOCUMENTNUMBER
-            AND B.REV_ID = C.REV_ID
-    INNER JOIN LATEST_TS D
-        ON B.DOCUMENTNUMBER = D.TRADEPRODUCTNUMBER
-    INNER JOIN TRADESERVICE E
-        ON D.TRADEPRODUCTNUMBER = E.TRADEPRODUCTNUMBER
-            AND D.CREATEDDATE = E.CREATEDDATE
-    LEFT JOIN TFSDB2S.PROD_PAYMNT_CICLS_MAPPING F
-        ON E.DOCUMENTCLASS = F.MOP_PRODUCT
-           AND E.SERVICETYPE = F.SERVICE_TYPE
-    INNER JOIN TFSDB2S.CFMAST G
-        ON C.CIFNUMBER = G.CFCIF#
-    WHERE C.STATUS <> 'EXPIRED'
-        AND C.STATUS <> 'CANCELLED'
-        AND C.STATUS <> 'CLOSED'
-        AND A.OUTSTANDINGBALANCE > 0
-    -- OA, DA
-    UNION ALL
-    SELECT 'TF', A.CIFNUMBER, REPLACE(A.DOCUMENTNUMBER, '-', ''), G.CFSNME, NULL, NULL, DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT)
-        , DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT), '25', NULL, NULL, NULL
-        , DECODE(A.CURRENCY , 'PHP', DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT)
-            , DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT) * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURRENCY))
-        , DECODE(A.CURRENCY , 'PHP', DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT)
-            , DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT) * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURRENCY))
-        , A.CURRENCY, 'A', 0, 'CURRENT', '', 0, 0, F.PROD_ID, NOW()
-        , DECODE(A.CURRENCY , 'PHP', DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT)
-            , DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT) * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURRENCY))
-        , DECODE(A.CURRENCY , 'PHP', DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT)
-            , DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT) * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURRENCY))
-    FROM TRADEPRODUCT AS A
-    LEFT JOIN DOCUMENTAGAINSTACCEPTANCE AS B
-        ON A.DOCUMENTNUMBER = B.DOCUMENTNUMBER
-    LEFT JOIN OPENACCOUNT AS C
-        ON A.DOCUMENTNUMBER = C.DOCUMENTNUMBER
-    INNER JOIN LATEST_TS D
-        ON A.DOCUMENTNUMBER = D.TRADEPRODUCTNUMBER
-    INNER JOIN TRADESERVICE E
-        ON D.TRADEPRODUCTNUMBER = E.TRADEPRODUCTNUMBER
-            AND D.CREATEDDATE = E.CREATEDDATE
-    LEFT JOIN TFSDB2S.PROD_PAYMNT_CICLS_MAPPING F
-        ON E.DOCUMENTCLASS = F.MOP_PRODUCT
-           AND E.SERVICETYPE = F.SERVICE_TYPE
-    INNER JOIN TFSDB2S.CFMAST G
-        ON A.CIFNUMBER = G.CFCIF#
-    WHERE A.PRODUCTTYPE IN ('DA', 'OA')
-    AND (B.DOCUMENTTYPE = 'FOREIGN' OR C.DOCUMENTTYPE = 'FOREIGN')
-    AND (A.STATUS = 'NEGOTIATED' OR A.STATUS ='ACCEPTED')
-    -- BG
-    UNION ALL
-    SELECT 'TF', B.CIFNUMBER, REPLACE(A.INDEMNITYNUMBER, '-', ''), F.CFSNME, NULL, NULL, A.SHIPMENTAMOUNT
-        , A.SHIPMENTAMOUNT, '25', NULL, NULL, NULL
-        , DECODE(B.CURRENCY , 'PHP', A.SHIPMENTAMOUNT
-            , A.SHIPMENTAMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = B.CURRENCY))
-        , DECODE(B.CURRENCY , 'PHP', A.SHIPMENTAMOUNT
-            , A.SHIPMENTAMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = B.CURRENCY))
-        , B.CURRENCY, 'A', 0, 'CURRENT', '', 0, 0, E.PROD_ID, NOW()
-        , DECODE(B.CURRENCY , 'PHP', A.SHIPMENTAMOUNT
-            , A.SHIPMENTAMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = B.CURRENCY))
-        , DECODE(B.CURRENCY , 'PHP', A.SHIPMENTAMOUNT
-            , A.SHIPMENTAMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = B.CURRENCY))
-    FROM INDEMNITY A
-    INNER JOIN TRADEPRODUCT AS B
-        ON A.INDEMNITYNUMBER = B.DOCUMENTNUMBER
-    INNER JOIN LATEST_TS C
-        ON A.INDEMNITYNUMBER = C.TRADEPRODUCTNUMBER
-    INNER JOIN TRADESERVICE D
-        ON C.TRADEPRODUCTNUMBER = D.TRADEPRODUCTNUMBER
-            AND C.CREATEDDATE = D.CREATEDDATE
-    LEFT JOIN TFSDB2S.PROD_PAYMNT_CICLS_MAPPING E
-        ON D.DOCUMENTCLASS = E.MOP_PRODUCT
-           AND D.SERVICETYPE = E.SERVICE_TYPE
-    INNER JOIN TFSDB2S.CFMAST F
-        ON B.CIFNUMBER = F.CFCIF#
-    WHERE DAYS_BETWEEN(NOW(), A.INDEMNITYISSUEDATE) > 60
-        AND A.SHIPMENTAMOUNT > 0
-        AND A.INDEMNITYTYPE = 'BG'
-        AND B.STATUS = 'OPEN'
-    ;
+        SELECT A.SYSCOD, A.CIFNO, A.ACCTNO, A.NAME, A.CIFID, A.CIFCOD, A.ORGLMT, A.TOSBAL, A.PRODUCT, A.PRODSC
+            , A.DATE, A.TIME, A.LORGAM, A.TLOSBAL, A.CURTYP, A.ALFLG, A.ADBBAL, A.STADSC, A.AFCPNO, A.ORGSBL
+            , A.LOCSBL, D.PROD_ID, NOW() AS "CREATED_DATE"
+            , DECODE(A.CURTYP, 'PHP', A.ORGLMT, A.ORGLMT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURTYP)) AS "ORGLMT_IRR"
+            , DECODE(A.CURTYP, 'PHP', A.TOSBAL, A.TOSBAL * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURTYP)) AS "TOSBAL_IRR"
+            , C.STATUS
+        FROM TFSDB2S.LNCLST A
+        INNER JOIN LATEST_TS B
+        ON A.ACCTNO = REPLACE(B.TRADEPRODUCTNUMBER, '-', '')
+        INNER JOIN TRADESERVICE C
+        ON B.TRADEPRODUCTNUMBER = C.TRADEPRODUCTNUMBER
+            AND B.CREATEDDATE = C.CREATEDDATE
+        LEFT JOIN TFSDB2S.PROD_PAYMNT_CICLS_MAPPING D
+        ON C.DOCUMENTCLASS = D.MOP_PRODUCT
+            AND C.SERVICETYPE = D.SERVICE_TYPE
+            AND C.STATUS NOT IN ( 'EXPIRED', 'RETURNED', 'PENDING' )
+        -- CASH LC
+        UNION ALL
+        SELECT 'TF', C.CIFNUMBER, REPLACE(A.DOCUMENTNUMBER, '-', ''), G.CFSNME, NULL, NULL, C.AMOUNT, A.OUTSTANDINGBALANCE, '25', NULL
+            , NULL, NULL, DECODE(C.CURRENCY , 'PHP', C.AMOUNT
+                , C.AMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = C.CURRENCY))
+            , DECODE(C.CURRENCY , 'PHP', A.OUTSTANDINGBALANCE
+                , A.OUTSTANDINGBALANCE * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = C.CURRENCY))
+            , C.CURRENCY, 'A', 0, 'CURRENT', '', 0, 0, F.PROD_ID, NOW() AS "CREATED_DATE"
+            , DECODE(C.CURRENCY , 'PHP', C.AMOUNT
+                , C.AMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = C.CURRENCY))
+            , DECODE(C.CURRENCY , 'PHP', A.OUTSTANDINGBALANCE
+                , A.OUTSTANDINGBALANCE * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = C.CURRENCY))
+            , E.STATUS
+        FROM FINAL_CASH A
+        LEFT JOIN LETTEROFCREDIT_AUDIT B
+            ON A.DOCUMENTNUMBER = B.DOCUMENTNUMBER
+                AND A.LASTMODIFIEDDATE = B.LASTMODIFIEDDATE
+        LEFT JOIN TRADEPRODUCT_AUDIT C
+            ON B.DOCUMENTNUMBER = C.DOCUMENTNUMBER
+                AND B.REV_ID = C.REV_ID
+        INNER JOIN LATEST_TS D
+            ON B.DOCUMENTNUMBER = D.TRADEPRODUCTNUMBER
+        INNER JOIN TRADESERVICE E
+            ON D.TRADEPRODUCTNUMBER = E.TRADEPRODUCTNUMBER
+                AND D.CREATEDDATE = E.CREATEDDATE
+        LEFT JOIN TFSDB2S.PROD_PAYMNT_CICLS_MAPPING F
+            ON E.DOCUMENTCLASS = F.MOP_PRODUCT
+            AND E.SERVICETYPE = F.SERVICE_TYPE
+        INNER JOIN TFSDB2S.CFMAST G
+            ON C.CIFNUMBER = G.CFCIF#
+        WHERE C.STATUS <> 'EXPIRED'
+            AND C.STATUS <> 'CANCELLED'
+            AND C.STATUS <> 'CLOSED'
+            AND A.OUTSTANDINGBALANCE > 0
+            AND E.STATUS NOT IN ( 'EXPIRED', 'RETURNED', 'PENDING' )
+        -- OA, DA
+        UNION ALL
+        SELECT 'TF', A.CIFNUMBER, REPLACE(A.DOCUMENTNUMBER, '-', ''), G.CFSNME, NULL, NULL, DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT)
+            , DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT), '25', NULL, NULL, NULL
+            , DECODE(A.CURRENCY , 'PHP', DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT)
+                , DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT) * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURRENCY))
+            , DECODE(A.CURRENCY , 'PHP', DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT)
+                , DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT) * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURRENCY))
+            , A.CURRENCY, 'A', 0, 'CURRENT', '', 0, 0, F.PROD_ID, NOW() AS "CREATED_DATE"
+            , DECODE(A.CURRENCY , 'PHP', DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT)
+                , DECODE(A.PRODUCTTYPE, 'DA', B.AMOUNT, C.AMOUNT) * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURRENCY))
+            , DECODE(A.CURRENCY , 'PHP', DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT)
+                , DECODE(A.PRODUCTTYPE, 'DA', B.OUTSTANDINGAMOUNT, C.OUTSTANDINGAMOUNT) * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = A.CURRENCY))
+            , E.STATUS
+        FROM TRADEPRODUCT AS A
+        LEFT JOIN DOCUMENTAGAINSTACCEPTANCE AS B
+            ON A.DOCUMENTNUMBER = B.DOCUMENTNUMBER
+        LEFT JOIN OPENACCOUNT AS C
+            ON A.DOCUMENTNUMBER = C.DOCUMENTNUMBER
+        INNER JOIN LATEST_TS D
+            ON A.DOCUMENTNUMBER = D.TRADEPRODUCTNUMBER
+        INNER JOIN TRADESERVICE E
+            ON D.TRADEPRODUCTNUMBER = E.TRADEPRODUCTNUMBER
+                AND D.CREATEDDATE = E.CREATEDDATE
+        LEFT JOIN TFSDB2S.PROD_PAYMNT_CICLS_MAPPING F
+            ON E.DOCUMENTCLASS = F.MOP_PRODUCT
+            AND E.SERVICETYPE = F.SERVICE_TYPE
+        INNER JOIN TFSDB2S.CFMAST G
+            ON A.CIFNUMBER = G.CFCIF#
+        WHERE A.PRODUCTTYPE IN ('DA', 'OA', 'LC')
+        AND (B.DOCUMENTTYPE = 'FOREIGN' OR C.DOCUMENTTYPE = 'FOREIGN')
+        AND (A.STATUS = 'NEGOTIATED' OR A.STATUS ='ACCEPTED')
+        AND E.STATUS NOT IN ( 'EXPIRED', 'RETURNED', 'PENDING' )
+        -- BG
+        UNION ALL
+        SELECT 'TF', B.CIFNUMBER, REPLACE(A.INDEMNITYNUMBER, '-', ''), F.CFSNME, NULL, NULL, A.SHIPMENTAMOUNT
+            , A.SHIPMENTAMOUNT, '25', NULL, NULL, NULL
+            , DECODE(B.CURRENCY , 'PHP', A.SHIPMENTAMOUNT
+                , A.SHIPMENTAMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = B.CURRENCY))
+            , DECODE(B.CURRENCY , 'PHP', A.SHIPMENTAMOUNT
+                , A.SHIPMENTAMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = B.CURRENCY))
+            , B.CURRENCY, 'A', 0, 'CURRENT', '', 0, 0, E.PROD_ID, NOW() AS "CREATED_DATE"
+            , DECODE(B.CURRENCY , 'PHP', A.SHIPMENTAMOUNT
+                , A.SHIPMENTAMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = B.CURRENCY))
+            , DECODE(B.CURRENCY , 'PHP', A.SHIPMENTAMOUNT
+                , A.SHIPMENTAMOUNT * (SELECT JFXDCR FROM IRR_RATES WHERE JFXDCD = B.CURRENCY))
+            , D.STATUS
+        FROM INDEMNITY A
+        INNER JOIN TRADEPRODUCT AS B
+            ON A.INDEMNITYNUMBER = B.DOCUMENTNUMBER
+        INNER JOIN LATEST_TS C
+            ON A.INDEMNITYNUMBER = C.TRADEPRODUCTNUMBER
+        INNER JOIN TRADESERVICE D
+            ON C.TRADEPRODUCTNUMBER = D.TRADEPRODUCTNUMBER
+                AND C.CREATEDDATE = D.CREATEDDATE
+        LEFT JOIN TFSDB2S.PROD_PAYMNT_CICLS_MAPPING E
+            ON D.DOCUMENTCLASS = E.MOP_PRODUCT
+            AND D.SERVICETYPE = E.SERVICE_TYPE
+        INNER JOIN TFSDB2S.CFMAST F
+            ON B.CIFNUMBER = F.CFCIF#
+        WHERE 
+            -- DAYS_BETWEEN(NOW(), A.INDEMNITYISSUEDATE) > 60
+            AND A.SHIPMENTAMOUNT > 0
+            AND A.INDEMNITYTYPE = 'BG'
+            AND B.STATUS = 'OPEN'
+            AND E.STATUS NOT IN ( 'EXPIRED', 'RETURNED', 'PENDING' )
+        );
 
     DELETE FROM TFSDB2S.LNTFINT_CICLS;
     INSERT INTO TFSDB2S.LNTFINT_CICLS(AANO, FCODE, FSEQ, TRSEQ, ACCTNO
@@ -165,9 +180,27 @@
         , TAMTOR, TEXP6, TRSTS, TRUNLINK, TRUSERID, CRDTCD, PMTCOD
         , REQSTS, SYSCOD, RS4FLG, PRODUCT_ID, OUTSTANDING_PAST_DUE, LOAN_STATUS
         , CREATED_DATE, LORGAMT, LPMTAMT)
+    -- -- SELECT AANO, FCODE, FSEQ, A.TRSEQ, A.ACCTNO
+    -- --     , ACTYPE, "BR#", "RBR#", "TYPE", CURTYP, SNAME, CIFNO
+    -- --     , TERM, TMCODE, LORGAMT, ORGDT6, RATE, LPMTAMT
+    -- --     , CFPDT, DRLIMT, MATDT6, OFFCR, FREQ, FRCODE
+    -- --     , IPFREQ, IPCODE, GLBOOK, "GROUP", TRIM(TNUMBR), TIMPOR
+    -- --     , TAMTOR, TEXP6, TRSTS, TRUNLINK, TRUSERID, CRDTCD, PMTCOD
+    -- --     , REQSTS, SYSCOD, RS4FLG, PRODUCT_ID, OUTSTANDING_PAST_DUE, LOAN_STATUS
+    -- --     , NOW(), LORGAMT, LPMTAMT
+    -- -- FROM TFSDB2S.LNTFINT A
+    -- -- -- REMOVAL OF REVERSED(UNLINKED) PAYMENTS
+    -- -- INNER JOIN (SELECT ACCTNO, MAX(TRSEQ) TRSEQ
+    -- --     FROM TFSDB2S.LNTFINT
+    -- --     GROUP BY ACCTNO) B
+    -- -- ON A.ACCTNO = B.ACCTNO
+    -- --     AND A.TRSEQ = B.TRSEQ
+    -- --     AND 1 = MOD((SELECT COUNT(*) FROM TFSDB2S.LNTFINT WHERE ACCTNO = A.ACCTNO), 2)
+    -- --     AND A.LOAN_STATUS <> 'PAID'
+    -- -- WHERE A.TRSTS = 'Y';
     SELECT AANO, FCODE, FSEQ, A.TRSEQ, A.ACCTNO
         , ACTYPE, "BR#", "RBR#", "TYPE", CURTYP, SNAME, CIFNO
         , TERM, TMCODE, LORGAMT, ORGDT6, RATE, LPMTAMT
         , CFPDT, DRLIMT, MATDT6, OFFCR, FREQ, FRCODE
         , IPFREQ, IPCODE, GLBOOK, "GROUP", TRIM(TNUMBR), TIMPOR
         , TAMTOR, TEXP6, TRSTS, TRUNLINK, TRUSERID, CRDTCD, PMTCOD
@@ -168,8 +201,8 @@
     SELECT AANO, FCODE, FSEQ, A.TRSEQ, A.ACCTNO
         , ACTYPE, "BR#", "RBR#", "TYPE", CURTYP, SNAME, CIFNO
         , TERM, TMCODE, LORGAMT, ORGDT6, RATE, LPMTAMT
         , CFPDT, DRLIMT, MATDT6, OFFCR, FREQ, FRCODE
         , IPFREQ, IPCODE, GLBOOK, "GROUP", TRIM(TNUMBR), TIMPOR
         , TAMTOR, TEXP6, TRSTS, TRUNLINK, TRUSERID, CRDTCD, PMTCOD
-        , REQSTS, SYSCOD, RS4FLG, PRODUCT_ID, OUTSTANDING_PAST_DUE, LOAN_STATUS
+        , REQSTS, SYSCOD, RS4FLG, F.PROD_ID, OUTSTANDING_PAST_DUE, LOAN_STATUS
         , NOW(), LORGAMT, LPMTAMT
@@ -175,5 +208,4 @@
         , NOW(), LORGAMT, LPMTAMT
-    FROM TFSDB2S.LNTFINT A
-    -- REMOVAL OF REVERSED(UNLINKED) PAYMENTS
-    INNER JOIN (SELECT ACCTNO, MAX(TRSEQ) TRSEQ
+ 	FROM TFSDB2S.LNTFINT A
+ 	INNER JOIN (SELECT ACCTNO, MAX(TRSEQ) TRSEQ
         FROM TFSDB2S.LNTFINT
@@ -179,3 +211,4 @@
         FROM TFSDB2S.LNTFINT
+        WHERE TRUNLINK = 'N'
         GROUP BY ACCTNO) B
     ON A.ACCTNO = B.ACCTNO
@@ -180,7 +213,16 @@
         GROUP BY ACCTNO) B
     ON A.ACCTNO = B.ACCTNO
-        AND A.TRSEQ = B.TRSEQ
-        AND 1 = MOD((SELECT COUNT(*) FROM TFSDB2S.LNTFINT WHERE ACCTNO = A.ACCTNO), 2)
-        AND A.LOAN_STATUS <> 'PAID'
-    WHERE A.TRSTS = 'Y';
+	INNER JOIN TFSDB2P.PAYMENTDETAIL C
+	 	ON A.ACCTNO = C.PNNUMBER
+	INNER JOIN TFSDB2P.PAYMENT D
+	 	ON C.PAYMENTID = D.ID
+	INNER JOIN TFSDB2P.TRADESERVICE E
+	 	ON D.TRADESERVICEID = E.TRADESERVICEID
+	INNER JOIN TFSDB2S.PROD_PAYMNT_CICLS_MAPPING F
+		ON E.DOCUMENTCLASS = F.MOP_PRODUCT
+		AND E.SERVICETYPE = F.SERVICE_TYPE
+    WHERE
+	   A.LOAN_STATUS NOT IN ('CANCEL', 'PAID')
+	   AND A.TRSTS = 'Y'
+	   AND E.STATUS <>'APPROVED';
 END P1@
diff --git a/tfs-app/src/main/java/com/ucpb/tfs/application/query/interfaces/FacilityService.java b/tfs-app/src/main/java/com/ucpb/tfs/application/query/interfaces/FacilityService.java
deleted file mode 100644
--- a/tfs-app/src/main/java/com/ucpb/tfs/application/query/interfaces/FacilityService.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.ucpb.tfs.application.query.interfaces;
-
-
-import java.util.List;
-import java.util.Map;
-
-/*
-	(revision)
-	SCR/ER Number: ER# 20170109-040
-	SCR/ER Description: Transaction allowed to be created even the facility is expired
-	[Revised by:] Jesse James Joson
-	[Date revised:] 1/17/2017
-	Program [Revision] Details: Check the expiry date of the facility before allowing to amend LC
-	Member Type: Java
-	Project: Core
-	Project Name: FacilityService.java
-*/
-
-public interface FacilityService {
-
-	public List<Map<String,?>> getFacilitiesByCifNumber(String cifNumber);
-	
-	public List<Map<String,?>> getFacilitiesByChildAndMainCifNumber(String childCifNumber, String mainCifNumber, String facilityType);
-	
-	public List<Map<String,Object>> getFacilitiesByCifNumberAndType(String cifNumber, String type);
-
-//    public List<Map<String,Object>> getFacilitiesByCifNumberAndFacilityTypes(String cifNumber,String... facilityTypes);
-public List<Map<String,Object>> getFacilitiesByCifNumberAndFacilityTypes(String cifNumber,String mainCifNumber,String seqNo, String... facilityTypes);
-
-    public List<Map<String,Object>> getFacilitiesByCifNumberAndFacilityTypesSearch(String cifNumber,
-																				   String mainCifNumber,
-                                                                                   String seqNo,
-                                                                                   String... facilityTypes);
-
-
-    public Map<String,Object> getFacilityBalance(Long transactionSequenceNumber);
-
-//    public List<Map<String,Object>> getFacilitiesByCifCurrencyAndFacilityTypes(String cifNumber,String currency, String... facilityTypes);
-public List<Map<String,Object>> getFacilitiesByCifCurrencyAndFacilityTypes(String cifNumber,String mainCifNumber,String currency,String seqNo, String... facilityTypes);
-
-	public List<Map<String,Object>> getFacilitiesByCifAndFacility(String cifNumber, String facilityRefNo, String facilityType, String facilityId);
-}
diff --git a/tfs-batch/src/main/java/com/ucpb/tfs/batch/job/CiclsReportGeneratorJob.java b/tfs-batch/src/main/java/com/ucpb/tfs/batch/job/CiclsReportGeneratorJob.java
--- a/tfs-batch/src/main/java/com/ucpb/tfs/batch/job/CiclsReportGeneratorJob.java
+++ b/tfs-batch/src/main/java/com/ucpb/tfs/batch/job/CiclsReportGeneratorJob.java
@@ -55,7 +55,7 @@
         File tempFailFile = new File(failFileName);
 
         for (CiclsHandoffRecord ciclsRec : ciclsList) {
-            if(validateListCicls(ciclsRec)){
+            if(validateListCicls(ciclsRec) && validateCiclsLength(ciclsRec)){
                 successList.add(ciclsRec);
             }
             else{
@@ -110,4 +110,5 @@
     private Boolean validateListCicls(CiclsHandoffRecord records) {
         return !( 
             records.getTinNumber() == null ||
+            records.getTinNumber().trim().isEmpty() ||
             records.getClientName() == null ||
@@ -113,4 +114,4 @@
             records.getClientName() == null ||
-            records.getTranType() == null ||
+            records.getClientName().trim().isEmpty() ||
             records.getProcessDate() == null ||
             records.getCiclsProductCode() == null ||
@@ -115,4 +116,5 @@
             records.getProcessDate() == null ||
             records.getCiclsProductCode() == null ||
+            records.getCiclsProductCode().trim().isEmpty() ||
             records.getApprovedAmount() == null ||
             records.getOutstandingCurrent() == null ||
@@ -117,6 +119,6 @@
             records.getApprovedAmount() == null ||
             records.getOutstandingCurrent() == null ||
-            records.getOutstandingPastDue() == null 
+            records.getOutstandingPastDue() == null
         );
     }
 
@@ -120,6 +122,22 @@
         );
     }
 
+    public Boolean validateCiclsLength(CiclsHandoffRecord ciclsRec) {
+        if(ciclsRec.getApprovedAmount() != null || 
+           ciclsRec.getOutstandingCurrent() != null ||
+           ciclsRec.getOutstandingPastDue() != null){
+            int approvedAmount = ciclsRec.getApprovedAmount().precision();
+            int outstandingCurrent = ciclsRec.getOutstandingCurrent().precision();
+            int outstandingPastDue = ciclsRec.getOutstandingPastDue().precision();
+            if(approvedAmount > 18 || 
+               outstandingCurrent > 18 ||
+               outstandingPastDue > 18 ){
+                return false;
+            }
+        }
+        return true;
+    }
+
     public void setCiclsDao(CiclsDao ciclsDao) {
         this.ciclsDao = ciclsDao;
     }
diff --git a/tfs-batch/src/main/java/com/ucpb/tfs/batch/report/dw/service/BatchFacilityReearmarkServiceImpl.java b/tfs-batch/src/main/java/com/ucpb/tfs/batch/report/dw/service/BatchFacilityReearmarkServiceImpl.java
--- a/tfs-batch/src/main/java/com/ucpb/tfs/batch/report/dw/service/BatchFacilityReearmarkServiceImpl.java
+++ b/tfs-batch/src/main/java/com/ucpb/tfs/batch/report/dw/service/BatchFacilityReearmarkServiceImpl.java
@@ -41,7 +41,8 @@
 			silverlakeLocalDao.deleteEarmarksTrade();
 			for(Availment availment : availments){
 				if(silverlakeLocalDao.updateFacilityAvailment(availment) == 0){
-					returnVal = silverlakeLocalDao.insertFacilityAvailment(availment) == 1;
+					silverlakeLocalDao.insertFacilityAvailment(availment);
+					returnVal = true;
 				}
 			}
 		}catch (Exception e){
diff --git a/tfs-core/pom.xml.rej b/tfs-core/pom.xml.rej
new file mode 100644
--- /dev/null
+++ b/tfs-core/pom.xml.rej
@@ -0,0 +1,29 @@
+--- pom.xml
++++ pom.xml
+@@ -52,7 +52,7 @@
+                             <dependency>
+                                 <groupId>com.ibm.db2.jcc</groupId>
+                                 <artifactId>jcc4</artifactId>
+-                                <version>4.13.127</version>
++                                <version>4.25.13</version>
+                             </dependency>
+                         </dependencies>
+                         <!--<executions>-->
+@@ -105,7 +105,7 @@
+                             <dependency>
+                                 <groupId>com.ibm.db2.jcc</groupId>
+                                 <artifactId>jcc4</artifactId>
+-                                <version>4.13.127</version>
++                                <version>4.25.13</version>
+                             </dependency>
+                         </dependencies>
+                         <!--<executions>-->
+@@ -537,7 +537,7 @@
+        	<dependency>
+               <groupId>com.ibm.db2.jcc</groupId>
+               <artifactId>jcc4</artifactId>
+-              <version>4.13.127</version>
++              <version>4.25.13</version>
+         </dependency>
+ 
+ <!--        <dependency>
diff --git a/tfs-core/src/config/uat-schemas.properties b/tfs-core/src/config/uat-schemas.properties
--- a/tfs-core/src/config/uat-schemas.properties
+++ b/tfs-core/src/config/uat-schemas.properties
@@ -3,7 +3,7 @@
 #cfmast=UCDATUBWC2
 #facility=UCDATULNS2
 #loan=UCDATULNS2
-rates=UCPARUCMN
+rates=TFSDB2S
 #officers=UCPARUCMN2
 #ccbdbranch=UCPARUCMN2
 #gl=UCDATUGLD2
@@ -20,10 +20,10 @@
 cifAccount=UCDATURBK7
 
 holiday=UCPARUCMN7
-dailyrates=JHFXDTTF
-historicalrates=JHYXDTTF
-ratenames=JHFXPRTF
-rateunknown=JHFXRTTF
+dailyrates=TFSDB2S
+historicalrates=JHYXDT
+ratenames=JHFXPR
+rateunknown=JHFXRT
 
 
 #sibs=UCENVUCMN6
diff --git a/tfs-core/src/config/uat-schemas.properties.rej b/tfs-core/src/config/uat-schemas.properties.rej
new file mode 100644
--- /dev/null
+++ b/tfs-core/src/config/uat-schemas.properties.rej
@@ -0,0 +1,62 @@
+--- uat-schemas.properties
++++ uat-schemas.properties
+@@ -3,9 +3,9 @@
+ #cfmast=UCDATUBWC2
+ #facility=UCDATULNS2
+ #loan=UCDATULNS2
+-rates=UCPARUCMN
++rates=TFSDB2S
+ #officers=UCPARUCMN2
+ #ccbdbranch=UCPARUCMN2
+ #gl=UCDATUGLD2
+ #cifAccount=UCDATURBK2
+ 
+@@ -7,15 +7,15 @@
+ #officers=UCPARUCMN2
+ #ccbdbranch=UCPARUCMN2
+ #gl=UCDATUGLD2
+ #cifAccount=UCDATURBK2
+ 
+-cif=UCDATUBWC1
+-account=UCDATUBWC2
+-cfmast=UCDATUBWC1
+-facility=UCDATULNS1
+-loan=UCDATULNS1
+-officers=UCPARUCMN1
+-ccbdbranch=UCPARUCMN1
+-gl=UCDATUGLD1
+-cifAccount=UCDATURBK1
++cif=TFSDB2S
++account=TFSDB2S
++cfmast=TFSDB2S
++facility=TFSDB2S
++loan=TFSDB2S
++officers=TFSDB2S
++ccbdbranch=TFSDB2S
++gl=TFSDB2S
++cifAccount=TFSDB2S
+ 
+@@ -21,3 +21,3 @@
+ 
+-dailyrates=JHFXDTTF
++dailyrates=TFSDB2S
+ #dailyrates=JHFXDT
+@@ -23,7 +23,7 @@
+ #dailyrates=JHFXDT
+-historicalrates=JHYXDTTF
+-ratenames=JHFXPRTF
+-rateunknown=JHFXRTTF
++historicalrates=JHYXDT
++ratenames=JHFXPR
++rateunknown=JHFXRT
+ 
+ 
+ #sibs=UCENVUCMN6
+@@ -27,4 +27,4 @@
+ 
+ 
+ #sibs=UCENVUCMN6
+-sibs=UCENVUCMN1
+\ No newline at end of file
++sibs=UCENVUCMN7
+\ No newline at end of file
diff --git a/tfs-core/src/main/groovy/com/ucpb/tfs2/infrastructure/rest/BatchRestServices.groovy b/tfs-core/src/main/groovy/com/ucpb/tfs2/infrastructure/rest/BatchRestServices.groovy
deleted file mode 100644
--- a/tfs-core/src/main/groovy/com/ucpb/tfs2/infrastructure/rest/BatchRestServices.groovy
+++ /dev/null
@@ -1,3041 +0,0 @@
-package com.ucpb.tfs2.infrastructure.rest
-import com.google.gson.Gson
-import com.ucpb.tfs.application.service.AccountingService
-import com.ucpb.tfs.application.service.AllocationUnitCodeService
-import com.ucpb.tfs.application.service.AmlaExpiredLcService
-import com.ucpb.tfs.application.service.CifNormalizationLogService
-import com.ucpb.tfs.batch.job.*
-import com.ucpb.tfs.core.batch.process.CifNormalization
-import com.ucpb.tfs.core.batch.process.CifNormalizationProcess
-import com.ucpb.tfs.core.batch.process.FacilityReferenceNormalization
-
-
-import com.ucpb.tfs.domain.cdt.services.PAS5FilesLoaderService
-import com.ucpb.tfs.domain.product.TradeProductRepository
-import com.ucpb.tfs.domain.service.ItrsService
-import com.ucpb.tfs.domain.service.TradeServiceRepository
-import com.ucpb.tfs.interfaces.services.HolidayService
-import com.ucpb.tfs.parsers.handlers.RmaBankHandler
-import com.ucpb.tfs.util.FileUtil
-import com.ucpb.tfs.utils.DateUtil
-import com.ucpb.tfs2.application.service.RefBankService
-import com.ucpb.tfs2.application.service.casa.exception.CasaServiceException
-
-
-import groovy.io.FileType
-import org.apache.commons.io.IOUtils
-import org.springframework.beans.factory.annotation.Autowired
-import org.springframework.beans.factory.annotation.Qualifier
-import org.springframework.beans.factory.config.PropertiesFactoryBean
-import org.springframework.stereotype.Component
-import org.springframework.util.Assert
-import org.xml.sax.SAXException
-import org.xml.sax.helpers.DefaultHandler
-
-import javax.annotation.Resource
-import javax.ws.rs.GET
-import javax.ws.rs.Path
-import javax.ws.rs.Produces
-import javax.ws.rs.core.*
-import javax.xml.parsers.SAXParser
-import javax.xml.parsers.SAXParserFactory
-import java.text.SimpleDateFormat
-import java.util.List;
-
-/**
- */
-
-/*	PROLOGUE:
- * 	(revision)
-	SCR/ER Number: IBD-15-0828-01
-	SCR/ER Description: Comparison of Balances in DW and SIBS-GL
-	[Revised by:] Jesse James Joson
-	[Date revised:] 09/17/2015
-	Program [Revision] Details: add new methods that will execute SIBS extraction
-	INPUT: extractSibs
-	OUTPUT: Daily_Master_GL_Summary.xls & Daily_Master_GL_DailyBalance_Summary.xls
-	PROCESS: execute SIBS extraction
- */
-/*	PROLOGUE:
- * 	(revision)
-	SCR/ER Number: 20150820-072
-	SCR/ER Description: To catch duplication in CIF.
-	[Revised by:] Jesse James Joson
-	[Date revised:] 10/13/2015
-	Program [Revision] Details: add a response whether to failed in UI or Success.
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices 
- */
-
-/*  PROLOGUE:
- * 	(revision)
-	SCR/ER Number: SCR IBD-16-0219-01
-	SCR/ER Description: Generate CIC File
-	[Revised by:] Jesse James Joson
-	[Date Deployed:]  02/24/2016
-	Program [Revision] Details: This class will call the methods that will generate CIC File
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
- */
-/*  PROLOGUE:
- * 	(revision)
-	SCR/ER Number:  
-	SCR/ER Description: Sibs Disconnection
-	[Revised by:] Allan Comboy Jr.
-	[Date Deployed:]  06/07/2016
-	Program [Revision] Details: to reconnect when disconnected to sibs
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
- */
-
-/*  PROLOGUE:
- * 	(revision)
-	SCR/ER Number:  20160607-024
-	SCR/ER Description: Amla wrong status
-	[Revised by:] Allan Comboy Jr.
-	[Date Deployed:]  06/07/2016
-	Program [Revision] Details: to Address Amla status affected by deployment 06/07/2016
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
- */
-
-/*  PROLOGUE:
- * 	(revision)
-	SCR/ER Number:  20160613-044
-	SCR/ER Description: Program abnormally terminates during SIBS DB access time-out.
-	[Revised by:] Allan Comboy Jr.
-	[Date Deployed:]  06/14/2016
-	Program [Revision] Details: to reconnect when disconnected to sibs (for 4 additional programs)
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
- */
-/**  PROLOGUE:
- * 	(revision)
-	SCR/ER Number: ER# 20140909-038
-	SCR/ER Description: CIF Normalization Not Working in TFS
-	[Revised by:] Jesse James Joson
-	[Date Deployed:] 08/05/2016
-	Program [Revision] Details: The CIF Normalization was redesigned, since not all tables are normalized.
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
- */
-
-/**  PROLOGUE:
- * 	(revision)
-	SCR/ER Number: SCR# IBD-16-0615-01
-	SCR/ER Description: To comply with the requirement for CIF archiving/purging of inactive accounts in TFS.
-	[Revised by:] Jesse James Joson
-	[Date Revised:] 09/22/2016
-	Program [Revision] Details: Additional methods to run account purging
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
- */
-
-/**  PROLOGUE:
- * 	(revision)
-	SCR/ER Number: ER# 20160905-019
-	SCR/ER Description: Revert ets to pending cannot connect to SIBS.
-	[Revised by:] Jesse James Joson
-	[Date Revised:] 10/13/2016
-	Program [Revision] Details: To include Revert ets to pending for those program connecting to SIBS.
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
- */
-
-/**  PROLOGUE:
- * 	(revision)
-	SCR/ER Number:
-	SCR/ER Description:
-	[Revised by:] Cedrick C. Nungay
-	[Date Revised:] 09/29/2017
-	Program [Revision] Details: Updated service for throwing of exception if the file is not found.
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
-*/
-/**  PROLOGUE:
- * 	(revision)
-	 SCR/ER Number:
-	 SCR/ER Description:
-	 [Revised by:] Prochina, Daniel Jericho B.
-	 [Date Revised:] 06/20/2018
-	 Program [Revision] Details: To include service for ITRS Interface.
-	 PROJECT: CORE
-	 MEMBER TYPE  : Groovy
-	 Project Name: BatchRestServices
- */
-
-/**  PROLOGUE:
- * 	(revision)
-	SCR/ER Number: ER# 20180614-030
-	SCR/ER Description: Update Allocation Unit Code module of TFS bactch encountered FAILED message during execution.
-	[Revised by:] Jesse James Joson
-	[Date Revised:] 7/13/2018
-	Program [Revision] Details: Update method to add the sibsretry parameter to the return value upon execution of Update Allocation Unit Code.
-	PROJECT: CORE
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
- */
-
- /**  PROLOGUE:
- * 	(revision)
-	SCR/ER Number:
-	SCR/ER Description:
-	[Revised by:] Crystiann Puso
-	[Date Revised:] 2/23/2024
-	Program [Revision] Details: Added service and functions for Process Cicls and Cicls Report Generator
-	PROJECT: CORE 
-	MEMBER TYPE  : Groovy
-	Project Name: BatchRestServices
- */  
- 
-@Component
-@Path("/batch")
-class BatchRestServices {
-	def TestTimehehe = false;
-	def sibsReq = false;
-	def sibsRecon = false;
-	def sibsStatus = false;
-	def checkConn = false;
-    private static final String REPORT_DATE = "date"
-
-	private static final String GL_QUERY =
-				"SELECT " +
-				"GL.RESPONDINGUNITCODE, " +
-				"GL.BOOKCODE, " +
-		  	    "CASE WHEN B.LBP_ACCOUNTINGCODE IS NULL OR B.LBP_ACCOUNTINGCODE = '' THEN " +
-		  	        "GL.ACCOUNTINGCODE ELSE B.LBP_ACCOUNTINGCODE " +
-		  	    "END AS ACCOUNTINGCODE, " +
-		  	    "CASE WHEN B.LBP_ACCOUNTINGCODE IS NULL OR B.LBP_ACCOUNTINGCODE = '' THEN " +
-		  	        "'NOT MAPPED: ' || GL.PARTICULARS ELSE B.LBP_PARTICULARS " +
-		  	    "END AS PARTICULARS, " +
-				"GL.ORIGINALCURRENCY, " +
-				"GL.EFFECTIVEDATE, " +
-				"GL.ENTRYTYPE, " +
-				"GL.PESOAMOUNT, " +
-				"GL.ORIGINALAMOUNT," +
-				"GL.UNITCODE, " +
-				"(CASE TS.DOCUMENTCLASS WHEN 'INDEMNITY' THEN TS.DOCUMENTNUMBER  WHEN 'CDT' THEN TS.TRADESERVICEREFERENCENUMBER ELSE TS.TRADEPRODUCTNUMBER END) AS DOCUMENTNUMBER, " +
-				"GL.ID, " +
-				"(CASE WHEN (GL.PRODUCTID='CDT') THEN TS.TRADESERVICEREFERENCENUMBER ELSE TS.SERVICEINSTRUCTIONID END) AS SERVICEINSTRUCTIONID, " +
-				"GL.TRANSACTIONSHORTNAME, " +
-				"GL.SERVICETYPE, " +
-				"TS.DOCUMENTCLASS, " +
-				"TS.DOCUMENTTYPE, " +
-				"GL.UCPBPRODUCTID, " +
-				"(CASE WHEN(TS.DOCUMENTCLASS='CDT') THEN CDT.CLIENT_NAME ELSE TS.CIFNAME END) AS CIFNAME, " +
-				"TS.TRADESERVICEREFERENCENUMBER " +
-				"FROM INT_ACCENTRYACTUAL GL " +
-				"INNER JOIN TRADESERVICE TS ON TS.TRADESERVICEID = GL.TRADESERVICEID " +
-				"LEFT JOIN CDTPAYMENTREQUEST CDT ON TS.TRADESERVICEREFERENCENUMBER = CDT.IEDIEIRDNO " +
-    			"LEFT JOIN TFSDB2S.REF_GLMAPPING B " +
-	 			"ON GL.ACCOUNTINGCODE = B.ACCOUNTINGCODE " +
-		   		"AND GL.BOOKCODE = B.BOOKCODE " +
-		   		"AND GL.BOOKCURRENCY = B.BOOKCURRENCY " +
-				"WHERE " +
-				"DAYS(GL.EFFECTIVEDATE) = DAYS(CAST(? AS TIMESTAMP)) AND GL.STATUS IN ('APPROVED','PRE_APPROVED','POST_APPROVED','POSTED', 'EXPIRED','REINSTATED') AND " +
-				"GL.TRADESERVICEID NOT IN (SELECT GLSUB.TRADESERVICEID FROM INT_ACCENTRYACTUAL GLSUB WHERE (GLSUB.WITHERROR IS NOT NULL AND (LENGTH(TRIM(GLSUB.WITHERROR)) > 0))) "+
-				
-			//added for Auto Expired Cancellation
-				"UNION " +
-				"SELECT  " +
-				"GLE.RESPONDINGUNITCODE, " +
-				"GLE.BOOKCODE, " +
-		  	    "CASE WHEN B.LBP_ACCOUNTINGCODE IS NULL OR B.LBP_ACCOUNTINGCODE = '' THEN " +
-		  	        "GLE.ACCOUNTINGCODE ELSE B.LBP_ACCOUNTINGCODE " +
-		  	    "END AS ACCOUNTINGCODE, " +
-		  	    "CASE WHEN B.LBP_ACCOUNTINGCODE IS NULL OR B.LBP_ACCOUNTINGCODE = '' THEN " +
-		  	        "'NOT MAPPED: ' || GLE.PARTICULARS ELSE B.LBP_PARTICULARS " +
-		  	    "END AS PARTICULARS, " +
-				"GLE.ORIGINALCURRENCY, " +
-				"GLE.EFFECTIVEDATE, " +
-				"GLE.ENTRYTYPE, " +
-				"GLE.PESOAMOUNT, " +
-				"GLE.ORIGINALAMOUNT,  " +
-				"GLE.UNITCODE,  " +
-				"TPE.DOCUMENTNUMBER as DOCUMENTNUMBER,  " +
-				"GLE.ID,  " +
-				//no tradeServiceId since it is not a transaction
-				"\'\',  " +
-				"GLE.TRANSACTIONSHORTNAME,  " +
-				"GLE.SERVICETYPE, " +
-				"\'\', " +
-				"\'\',  " +
-				"GLE.UCPBPRODUCTID, " +
-				"TPE.CIFNAME, " +
-				"TPE.DOCUMENTNUMBER " +
-				"FROM INT_ACCENTRYACTUAL GLE " +
-			//change from tradeservice to tradeproduct for the multiple upload of expired lc bug
-				"INNER JOIN TRADEPRODUCT TPE ON TPE.DOCUMENTNUMBER = GLE.DOCUMENTNUMBER " +
-    			"LEFT JOIN TFSDB2S.REF_GLMAPPING B " +
-	 			"ON GLE.ACCOUNTINGCODE = B.ACCOUNTINGCODE " +
-		   		"AND GLE.BOOKCODE = B.BOOKCODE " +
-		   		"AND GLE.BOOKCURRENCY = B.BOOKCURRENCY " +
-				"where " +
-				"DATE(GLE.EFFECTIVEDATE) = ? AND GLE.ACCEVTRANID = 'CANCELLATION-EXPIRED-LC' AND "+
-				 //"GLE.ISPOSTED IS NULL AND GLE.status='EXPIRED' AND " +  //@carlo uncomment changging cancellation to effective date
-				"TPE.PRODUCTTYPE='LC' " +
-			//for untag gl
-			"UNION " +
-			"SELECT "+
-				" GLP.RESPONDINGUNITCODE, " +
-					"GLP.BOOKCODE, " +
-			  	    "CASE WHEN B.LBP_ACCOUNTINGCODE IS NULL OR B.LBP_ACCOUNTINGCODE = '' THEN " +
-			  	        "GLP.ACCOUNTINGCODE ELSE B.LBP_ACCOUNTINGCODE " +
-			  	    "END AS ACCOUNTINGCODE, " +
-			  	    "CASE WHEN B.LBP_ACCOUNTINGCODE IS NULL OR B.LBP_ACCOUNTINGCODE = '' THEN " +
-			  	        "'NOT MAPPED: ' || GLP.PARTICULARS ELSE B.LBP_PARTICULARS " +
-			  	    "END AS PARTICULARS, " +
-					"GLP.ORIGINALCURRENCY, " +
-					"GLP.EFFECTIVEDATE, " +
-					"GLP.ENTRYTYPE, " +
-					"GLP.PESOAMOUNT, " +
-					"GLP.ORIGINALAMOUNT, " +
-					"GLP.UNITCODE, " +
-					"(CASE TSP.DOCUMENTCLASS WHEN 'INDEMNITY' THEN TSP.DOCUMENTNUMBER WHEN 'CDT' THEN TSP.TRADESERVICEREFERENCENUMBER ELSE TSP.TRADEPRODUCTNUMBER END) AS DOCUMENTNUMBER, " +
-					"GLP.ID, " +
-					"(CASE WHEN (GLP.PRODUCTID='CDT') THEN TSP.TRADESERVICEREFERENCENUMBER ELSE TSP.SERVICEINSTRUCTIONID END) AS SERVICEINSTRUCTIONID, " +
-					"GLP.TRANSACTIONSHORTNAME, " +
-					"GLP.SERVICETYPE, " +
-					"TSP.DOCUMENTCLASS, " +
-					"TSP.DOCUMENTTYPE, " +
-					"GLP.UCPBPRODUCTID, " +
-					"(CASE WHEN(TSP.DOCUMENTCLASS='CDT') THEN CDT.CLIENT_NAME ELSE TSP.CIFNAME END) AS CIFNAME, " +
-					"TSP.TRADESERVICEREFERENCENUMBER " +
-				"FROM INT_ACCENTRYACTUAL GLP " +
-					"INNER JOIN TRADESERVICE TSP ON TSP.TRADESERVICEID = GLP.TRADESERVICEID " +
-					"LEFT JOIN CDTPAYMENTREQUEST CDT ON TSP.TRADESERVICEREFERENCENUMBER = CDT.IEDIEIRDNO " +
-	    			"LEFT JOIN TFSDB2S.REF_GLMAPPING B " +
-		 			"ON GLP.ACCOUNTINGCODE = B.ACCOUNTINGCODE " +
-			   		"AND GLP.BOOKCODE = B.BOOKCODE " +
-			   		"AND GLP.BOOKCURRENCY = B.BOOKCURRENCY " +
-				"WHERE " +
-					"GLP.ISPOSTED <> 1 AND GLP.STATUS IN ('APPROVED','PRE_APPROVED','POST_APPROVED','POSTED', 'EXPIRED','REINSTATED') AND " +
-					"GLP.TRADESERVICEID NOT IN (SELECT GLSUBP.TRADESERVICEID FROM INT_ACCENTRYACTUAL GLSUBP WHERE (GLSUBP.WITHERROR IS NOT NULL AND (LENGTH(TRIM(GLSUBP.WITHERROR)) > 0))) ";
-					
-					
-					
-    private static final String TRANSACTION_LOG_QUERY = "SELECT * from TRANSACTIONLOG WHERE DAYS(TXNDATE) = DAYS(cast(? as timestamp)) " + 
-											"AND TRANSACTIONTYPECODE IN ('ICOBD','ICDCC','IDLDC','IDLDD','IDLDM','IDLIC','IDLID','IDLIM','IDLSD','IDNIC','IDNID','IDNIM','IOBLC','IOBLK','IOBLM','IOBNC','IOBNK','IOBNM','ILCC') or BATCHFLAG = 1 " +
-											"ORDER BY TXNDATE ASC";
-
-    private static final String ACCOUNT_LOG_QUERY = "select * from ACCOUNTLOG WHERE DAYS(DATE_CREATED) = DAYS(cast(? as timestamp)) or BATCHFLAG = 1 ORDER BY DATE_CREATED ASC";
-
-    private static final String CUSTOMER_ACCOUNT_LOG_QUERY = "SELECT * from CUSTOMERACCOUNT WHERE DAYS(DATE_CREATED) = DAYS(cast(? as timestamp)) or BATCHFLAG = 1 ORDER BY DATE_CREATED ASC";
-
-    private static final String CUSTOMER_LOG_QUERY = "SELECT ID, customerType, firstName, middleName, lastName,gender,dateOfBirth," +
-            "placeOfBirth,maritalStatus,'' AS DUMMY,nationality,cntry_iso,businessAddress1,businessAddress2,businessAddress3,businessAddress4," +
-            "businessAddressZipCode,lengthOfStayInPresentAddress,permanentAddress1,permanentAddress2,permanentAddress3,permanentAddress4,permanentAddressZipCode," +
-            "lengthOfStayInPermanentAddress,occupation,natureOfBusiness,monthlyIncome,annualIncome,financialStatus,individualOrCorporate,financialStatus,residencePhoneNumber," +
-            "officePhoneNumber,mobileNumber,natureofselfemployment,sourceoffunds " +
-            "from CUSTOMERLOG cust " +
-            "left join REF_TFCNTRY cntry on cust.nationOfBirth = cntry.cntry_cd " +
-            "WHERE DAYS(LAST_UPDATED) = DAYS(cast(? as timestamp)) ORDER BY LAST_UPDATED ASC";
-
-    private static final String AMLA_TOTALS_QUERY = "select 'TRN71.txt' as FILENAME, count(TXNREFERENCENUMBER) as TOTALRECORDS, sum(transactionAmount) as TOTALAMOUNT from transactionLog where DAYS(TXNDATE) = DAYS(cast(? as timestamp))" +
-			"AND TRANSACTIONTYPECODE IN ('ICOBD','ICDCC','IDLDC','IDLDD','IDLDM','IDLIC','IDLID','IDLIM','IDLSD','IDNIC','IDNID','IDNIM','IOBLC','IOBLK','IOBLM','IOBNC','IOBNK','IOBNM','ILCC') " +
-			" union " +
-            "select 'ACC71.txt' as FILENAME, count(ID) as TOTALRECORDS, null as TOTALAMOUNT from accountLog where DAYS(DATE_CREATED) = DAYS(cast(? as timestamp))" +
-            " union " +
-            "select 'CAC71.txt' as FILENAME, count(ID) as TOTALRECORDS, null as TOTALAMOUNT from customerAccount where DAYS(DATE_CREATED) = DAYS(cast(? as timestamp))";
-
-    private static final String DATE_FORMAT = "MM-dd-yyyy";
-    private static final String DATE_FORMAT_DESC = "yyyy-MM-dd";
-	private static final String DATE_FORMAT_BATCH_CONTROLLER = "MM-dd-yyyy";
-
-    private static final SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat(DATE_FORMAT);
-    private static final SimpleDateFormat DATE_FORMATTER_DESC = new SimpleDateFormat(DATE_FORMAT_DESC);
-	private static final SimpleDateFormat DATE_FORMATTER_BATCH_CONTROLLER = new SimpleDateFormat(DATE_FORMAT_BATCH_CONTROLLER);
-	private static final String GL_PARAMETER_FILE_SQL = "SELECT DISTINCT GLCODE, RECORDTYPE FROM GL_ENTRY_TYPES";
-    private static final String DW_PARAMETER_FILE_SQL = "SELECT * FROM DW_REFERENCE WHERE REF_TYPE = 'CBR'";
-    private static final String CBR_PARAMETER_FILE_SQL = "SELECT * FROM DW_REFERENCE WHERE REF_TYPE = 'CBR1' ORDER BY FIELD, PRODUCTID";
-
-	private static final String SYNCHRONIZE_ROUTING_STATUS = "{CALL SYNCHRONIZE_LC_STATUS(?,?,?)}";
-
-    //TODO MOVE THIS QUERIES PROPERTIES INTO PROPERTIES FILE
-
-
-    @Autowired
-    @Qualifier("transactionLogGeneratorJob")
-    private CsvReportGeneratorJob transactionLogJob;
-
-    @Autowired
-    @Qualifier("accountLogGeneratorJob")
-    private CsvReportGeneratorJob accountLogJob;
-
-    @Autowired
-    @Qualifier("customerAccountLogGeneratorJob")
-    private CsvReportGeneratorJob customerAccountLogGeneratorJob;
-
-    @Autowired
-    @Qualifier("customerLogGeneratorJob")
-    private CsvReportGeneratorJob customerLogGeneratorJob;
-	
-	@Autowired
-	@Qualifier("amlaTotalsGeneratorJob")
-	private CsvReportGeneratorJob amlaTotalsLogJob;
-	
-    @Autowired
-    @Qualifier("synchronizeRoutingStatusCsvJob")
-    private CsvReportGeneratorJob synchronizeRoutingStatusCsvJob;
-
-    @Autowired
-    @Qualifier("glReportGeneratorJob")
-    private GlReportGeneratorJob glReportGenerator;
-
-    @Autowired
-    @Qualifier("glisReportGeneratorJob")
-    private GlisReportGeneratorJob glisReportGenerator;
-
-	@Autowired
-	@Qualifier("ciclsProcessorJob")
-    private CiclsProcessorJob ciclsProcessorJob;
-
-	@Autowired
-	@Qualifier("ciclsReportGeneratorJob")
-    private CiclsReportGeneratorJob ciclsReportGeneratorJob;
-
-	@Autowired
-	@Qualifier("cifPurgingGeneratorJob")
-	private CifPurgingGeneratorJob cifPurgingGeneratorJob;
-	
-	@Autowired
-	@Qualifier("cifPurgingJob")
-	private CifPurgingJob cifPurgingJob;
-	
-	@Autowired
-	private AmlaExpiredLcService amlaExpiredLcService;
-	
-    @Autowired
-    @Qualifier("abortPendingEtsReversalJob")
-    private AbortPendingEtsReversalJob abortPendingEtsReversalJob;
-
-	//ER# 20140909-038 : Start
-	@Autowired
-    @Qualifier("cifNormalizationProcess")
-    private CifNormalizationProcess cifNormalizationProcess;
-	//ER# 20140909-038 : End
-	
-    @Autowired
-    @Qualifier("facilityReferenceNormalization")
-    private FacilityReferenceNormalization facilityReferenceNormalization;
-
-    @Autowired
-    private MasterFileReportGeneratorJob masterFileReportGeneratorJob;
-	
-	@Autowired
-	private MasterExcelFileGeneratorJob masterExcelFileGeneratorJob;
-
-    @Autowired
-    private AllocationFileReportGeneratorJob glAllocationsReportJob;
-
-	@Autowired
-	private AllocationExcelFileGeneratorJob glAllocationsExcelJob;
-
-	@Autowired
-	private SibsExtractionJob sibsExtractionJob;
-	
-	@Autowired
-	private YearEndInsertJob yearEndInsertJob;
-	
-	@Autowired
-	private CicExtractionJob cicExtractionJob;    // IBD-16-0219-01
-		
-    @Autowired
-    @Resource(name = "dailyBalanceRecorderJob")
-    private SpringJob dailyBalanceRecorderJob;
-//    private SqlRunnerJob dailyBalanceRecorderJob;
-
-//    @Autowired
-//    @Resource(name = "tradeServiceRevertJob")
-//    private SpringJob tradeServiceRevertJob;
-    
-    @Autowired
-    @Resource(name = "serviceInstructionRevertJob")
-    private SpringJob serviceInstructionRevertJob;
-
-    @Autowired
-    @Resource(name = "tradeProductExpireJob")
-    private SpringJob tradeProductExpireJob;
-
-    @Autowired
-    @Qualifier("setExpiredLcsStatusToExpired")
-    private SpringJob setExpiredLcsStatusToExpired;
-
-    @Autowired
-    @Resource(name = "cancelDormantEtsJob")
-    private SpringJob cancelDormantEtsJob;
-    
-    @Autowired
-    @Resource(name = "uploadRoutingJob")
-    private SpringJob uploadRoutingJob;
-
-    @Autowired
-    @Qualifier("glParameterFileJob")
-    private FixedFileReportGeneratorJob glParameterFileJob;
-
-    @Autowired
-    @Qualifier("dwParameterRecord")
-    private FixedFileReportGeneratorJob dwParameterRecord;
-
-    @Autowired
-    @Qualifier("cbrParameterFileGenerator")
-    private FixedFileReportGeneratorJob cbrParameterFileGenerator;
-	
-	@Autowired
-	private PAS5FilesLoaderService pas5FilesLoaderService;
-
-    @Autowired
-    private TradeProductRepository tradeProductRepository;
-	
-    @Autowired
-    private TradeServiceRepository tradeServiceRepository;
-
-    @Autowired
-    private CifNormalizationLogService cifNormalizationLogService;
-
-    @Autowired
-    @Resource(name = "batchFacilityRevaluationJob")
-    private SpringJob batchFacilityRevaluationJob;
-
-    @Autowired
-    private PurgeSecEmloyeeAuditJob purgeSecEmloyeeAuditJob;
-
-	@Autowired
-	RefBankService refBankService
-	
-	@Autowired
-	PropertiesFactoryBean appProperties
-
-    @Autowired
-    AllocationUnitCodeService allocationUnitCodeService
-
-	@Autowired
-	AccountingService accountingService
-
-	@Autowired
-	ItrsService itrsService
-
-    @Autowired
-    @Qualifier("rerouteTradeServiceJob")
-    private RerouteTradeServiceJob rerouteTradeServiceJob;
-
-	@Autowired
-	private HolidayService holidayService;
-    
-	def timerStarts = 0
-
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/getInterfaceDirectories")
-	public Response getInterfaceDirectories(@Context UriInfo allUri) {
-		def directories = [:]
-		Gson gson = new Gson();
-		try{
-			String itrsDirectory = appProperties.object.getProperty('itrs.batch.directory')	
-			directories << [itrs: itrsDirectory]
-			return Response.status(200).entity(gson.toJson([directories : directories])).build();
-		} catch(Exception e) {
-			e.printStackTrace();
-			return Response.status(200).entity(gson.toJson([directories : []])).build();
-		}
-	}
-
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/extractItrs")
-	public Response extractItrs(@Context UriInfo allUri){
-		println "\n--- START: ITRS Interface, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		Assert.notNull(reportDate,"Report date must not be null!")
-		try{
-			reportDate = DATE_FORMATTER_DESC.format(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate)) + "-00.00.00"
-			String directory = appProperties.object.getProperty('itrs.batch.directory')			
-			println "reportDate:"+reportDate
-			itrsService.execute(reportDate, directory);
-			println "\n--- END (SUCCESS): ITRS Interface, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'ITRS Interface'])).build();
-		}catch(Exception e){
-			e.printStackTrace();
-			System.err.println("ITRS Interface: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): ITRS Interface, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-	
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/master")
-    public Response generateMasterFile(@Context UriInfo allUri){
-		println "\n--- START: Master File, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-        String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-        Assert.notNull(reportDate,"Report date must not be null!")
-        println "reportDate:"+reportDate
-		try{
-			String masterDate = DATE_FORMATTER_DESC.format(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate)) + "-00.00.00"
-            println "masterDate:"+masterDate
-            masterFileReportGeneratorJob.execute(masterDate);
-			masterExcelFileGeneratorJob.execute(masterDate);
-			println "\n--- END (SUCCESS): Master File, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Master File'])).build();
-		}catch(Exception e){
-			e.printStackTrace();
-			System.err.println("Master: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): Master File, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-    }
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/extractSibs")
-	public Response extractSibs(@Context UriInfo allUri){
-		println "\n--- START: Extract Sibs, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		Assert.notNull(reportDate,"Report date must not be null!")
-		println "reportDate:"+reportDate
-		try{
-			String masterDate = DATE_FORMATTER_DESC.format(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate)) + "-00.00.00"
-			println "masterDate:"+masterDate
-			
-		
-						//test
-
-								def selfTimer = 0;
-								def tryConn = true;
-								System.out.println("Connecting to SIBS...");
-									//Log.debug("Connecting to SIBS...");
-								while(tryConn == true){
-								try{
-								
-									
-								if(selfTimer >= 30) //Terminator
-								tryConn = false;
-						
-								if(selfTimer != 0){
-
-								timerStarts = 1000
-								while(timerStarts != 60000){
-																
-								Thread.sleep(1000); //sleep for 1 second
-								timerStarts += 1000;
-
-
-																
-								}
-
-								}
-						
-				
-					sibsExtractionJob.execute(masterDate);
-					
-					tryConn = false;
-					sibsReq = false;
-					sibsRecon = false;
-					
-					//set false to exit loop if success
-//					tryConn = false;
-					println "\n--- END (SUCCESS): Extract SIBS GL Accounts, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-					return Response.status(200).entity(gson.toJson([success : true,name:'Extract SIBS GL Accounts'])).build();
-			
-					}catch(Exception e) {
-		
-					
-										
-					if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-						
-					sibsReq = true;
-					sibsRecon = true;
-					println ("count " + selfTimer)
-					if(tryConn == false){
-						sibsReq = false;
-						sibsRecon = false;
-						e.printStackTrace();
-						System.err.println("expireLcs: "+e.getCause()?.getMessage())
-						println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes): Extract SIBS GL Accounts, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-						return Response.status(200).entity(gson.toJson([sibsretry : true,name:'Extract SIBS GL Accounts'])).build();
-					}
-					
-					
-
-							   System.out.println("Error Message Start : " + e + " : Error Message End");
-							   selfTimer++;
-							   System.out.println("Reconnecting to SIBS...");
-			//				   Log.debug("Reconnecting to SIBS...");
-			
-							}else{
-							sibsReq = false;
-							sibsRecon = false;
-							e.printStackTrace();
-							throw new IllegalArgumentException(e.printStackTrace()); 
-							}
-					
-					}
-			
-					}
-					//test end
-	
-			println "\n--- END (SUCCESS): Extract SIBS GL Accounts, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Extract SIBS GL Accounts'])).build();
-		}catch(Exception e){
-
-			e.printStackTrace();
-			System.err.println("Master: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): Extract SIBS GL Accounts, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-	
-	// Start IBD-16-0219-01
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/extractCic")
-	public Response extractCic(@Context UriInfo allUri){
-		println "\n--- START: CIC Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		Assert.notNull(reportDate,"Report date must not be null!")
-		println "reportDate:"+reportDate
-		try{
-			
-			
-			String masterDate = DATE_FORMATTER_DESC.format(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate))
-			println "Batch Run Date: "+masterDate
-			Date runDate = DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate)
-			println "runDate: " + runDate
-			String systemDate = DATE_FORMATTER_DESC.format(new Date())
-			println "System Date: "+systemDate
-			
-			def selfTimer = 0;
-			def tryConn = true;
-			System.out.println("Connecting to SIBS...");
-				//Log.debug("Connecting to SIBS...");
-			while(tryConn == true){
-			try{
-			
-				
-			if(selfTimer >= 30) //Terminator
-			tryConn = false;
-	
-			if(selfTimer != 0){
-
-			timerStarts = 1000
-			while(timerStarts != 60000){
-											
-			Thread.sleep(1000); //sleep for 1 second
-			timerStarts += 1000;
-
-
-											
-			}
-
-			}
-			
-			
-			
-			cicExtractionJob.executeMonthly(masterDate,systemDate,runDate);
-			
-			
-			
-
-			
-			//set false to exit loop if success
-			tryConn = false;
-			sibsReq = false;
-			sibsRecon = false;
-			
-			//set false to exit loop if success
-//					tryConn = false;
-					println "\n--- END (SUCCESS): CIC Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'CIC Report'])).build();
-	
-	
-			}catch(Exception e) {
-
-			
-								
-			if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-				
-			sibsReq = true;
-			sibsRecon = true;
-			println ("count " + selfTimer)
-			if(tryConn == false){
-				sibsReq = false;
-				sibsRecon = false;
-				e.printStackTrace();
-				System.err.println("expireLcs: "+e.getCause()?.getMessage())
-				println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes): CIC Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-
-				return Response.status(200).entity(gson.toJson([sibsretry : true,name:'CIC Report'])).build();
-			}
-			
-			
-
-					   System.out.println("Error Message Start : " + e + " : Error Message End");
-					   selfTimer++;
-					   System.out.println("Reconnecting to SIBS...");
-	//				   Log.debug("Reconnecting to SIBS...");
-	
-					}else{
-					sibsReq = false;
-					sibsRecon = false;
-					e.printStackTrace();
-					throw new IllegalArgumentException(e.printStackTrace());
-					}
-			
-			}
-			
-			}
-			
-			
-			
-			//test end
-			
-			println "\n--- END (SUCCESS): CIC Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'CIC Report'])).build();
-			
-			
-			}catch(Exception e){
-			e.printStackTrace();
-			System.err.println("Master: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): CIC Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/extractCicHistorical")
-	public Response extractCicHistorical(@Context UriInfo allUri){
-		println "\n--- START: CIC Historical Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		Assert.notNull(reportDate,"Report date must not be null!")
-		println "reportDate:"+reportDate
-		try{
-			String masterDate = DATE_FORMATTER_DESC.format(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate))
-			println "Batch Run Date: "+masterDate
-			Date runDate = DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate)
-			println "runDate: " + runDate
-			String systemDate = DATE_FORMATTER_DESC.format(new Date())
-			println "System Date: "+systemDate
-			cicExtractionJob.execute(masterDate,systemDate,runDate);
-			println "\n--- END (SUCCESS): CIC Historical Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'CIC Historical Report'])).build();
-		}catch(Exception e){
-			e.printStackTrace();
-			System.err.println("Master: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): CIC Historical Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-	
-	// End IBD-16-0219-01
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/yearEndInsert")
-	public Response yearEndInsert(@Context UriInfo allUri){
-		println "\n--- START: Year-end Insert, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		Assert.notNull(reportDate,"Report date must not be null!")
-		println "reportDate:"+reportDate
-		try{
-			String masterDate = DATE_FORMATTER_DESC.format(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate)) + "-00.00.00"
-			println "masterDate:"+masterDate
-			yearEndInsertJob.execute(masterDate);
-			println "\n--- END (SUCCESS): Year-end Insert, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Sequence Number Parameter Update'])).build();
-		}catch(Exception e){
-			e.printStackTrace();
-			System.err.println("Master: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): Year-end Insert, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/yearEndHolidays")
-	public Response yearEndHolidays(@Context UriInfo allUri){
-		println "\n--- START: Year-end Holidays, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		Assert.notNull(reportDate,"Report date must not be null!")
-		println "reportDate:"+reportDate
-		try {
-			String masterDate = DATE_FORMATTER_DESC.format(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate)) + "-00.00.00"
-			holidayService.generateHolidays(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate));
-			println "\n--- END (SUCCESS): Year-end Holidays, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Generate Holidays'])).build();
-		} catch(Exception e) {
-			e.printStackTrace();
-			System.err.println("Master: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): Year-end Holidays, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/masterException")
-	public Response generateMasterExceptionReport(@Context UriInfo allUri){
-		println "\n--- START: Master Exception Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		Assert.notNull(reportDate,"Report date must not be null!")
-		println "reportDate:"+reportDate
-		try{
-			String masterExceptionDate = DATE_FORMATTER_DESC.format(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate)) + "-00.00.00"
-			println "masterExceptionDate:"+masterExceptionDate
-			masterExcelFileGeneratorJob.executeMasterExceptionReport(masterExceptionDate);
-			println "\n--- END (SUCCESS): Master Exception Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Master Exception Report'])).build();
-		}catch(Exception e){
-			e.printStackTrace();
-			System.err.println("Master: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): Master Exception Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-	
-//    @GET
-//    @Produces(MediaType.APPLICATION_JSON)
-//    @Path("/revertToPending")
-//    public Response revertUnapprovedTradeServices(@Context UriInfo allUri){
-//        println "\n--- START: Revert Data Entry to Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-//        Gson gson = new Gson();
-//		try{
-//			tradeServiceRevertJob.execute();
-//            println "\n--- END (SUCCESS): Revert Data Entry to Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-//			return Response.status(200).entity(gson.toJson([success : true,name:'Revert Data Entry to Pending'])).build();
-//		}catch(Exception e){
-//            e.printStackTrace();
-//			System.err.println("revertToPending: "+e.getCause()?.getMessage())
-//            println "\n--- END (FAILED): Revert Data Entry to Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-//			return Response.status(200).entity(gson.toJson([success : false])).build();
-//		}
-//    }
-    
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/etsToPending")
-    public Response revertUnapprovedServiceInstructions(@Context UriInfo allUri){
-    	println "\n--- START: Revert e-TS to Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-    	Gson gson = new Gson();
-		
-		// ER# 20160905-019 Start
-		sibsReq = true;
-		sibsRecon = true;
-
-		try {
-			def selfTimer = 0;
-			def tryConn = true;
-
-			while(tryConn == true){
-				try{
-					if(selfTimer >= 30) {
-						tryConn = false;
-					}
-
-					if(selfTimer != 0){
-						timerStarts = 1000
-						while(timerStarts != 60000){
-							Thread.sleep(1000);
-							timerStarts += 1000;
-						}
-					}
-
-					serviceInstructionRevertJob.execute();
-
-					tryConn = false;
-					sibsReq = false;
-					sibsRecon = false;
-
-					println "\n--- END (SUCCESS): Revert e-TS to Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-					return Response.status(200).entity(gson.toJson([success : true,name:'Revert e-TS to Pending'])).build();
-
-				}catch(Exception e) {
-
-					if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-						sibsReq = true;
-						sibsRecon = true;
-
-						if(tryConn == false){
-							sibsReq = false;
-							sibsRecon = false;
-							e.printStackTrace();
-							System.err.println("Revert e-TS to Pending: "+e.getCause()?.getMessage())
-							println "\n--- END (SIBS Disconnection): Revert e-TS to Pending:" + DateUtil.convertToTimeString(new Date()) + "---"
-							return Response.status(200).entity(gson.toJson([sibsretry : true,name:'Revert e-TS to Pending'])).build();
-						}
-
-						System.out.println("Error Message Start : " + e + " : Error Message End");
-						selfTimer++;
-						System.out.println("Reconnecting to SIBS...");
-
-					} else{
-						sibsReq = false;
-						sibsRecon = false;
-						e.printStackTrace();
-						throw new IllegalArgumentException(e.printStackTrace());
-					}
-
-				}
-			}
-
-			println "\n--- END (SUCCESS): Revert e-TS to Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Revert e-TS to Pending'])).build();
-			// ER# 20160905-019 End
-    	}catch(Exception e){
-    		e.printStackTrace();
-    		System.err.println("etsToPending: "+e.getCause()?.getMessage())
-    		println "\n--- END (FAILED): Revert e-TS to Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-    		return Response.status(200).entity(gson.toJson([success : false])).build();
-    	}
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/expireLcs")
-    public Response changeExpiredLcStatuses(@Context UriInfo allUri){
-        Gson gson = new Gson();
-		try{
-            MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-            String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-            Assert.notNull(reportDate,"Report date must not be null!")
-
-			 setExpiredLcsStatusToExpired.execute(reportDate);
-			 return Response.status(200).entity(gson.toJson([success : true,name:'Process Expired LCs'])).build();
-		}catch(Exception e){
-            e.printStackTrace();
-			System.err.println("expireLcs: "+e.getCause()?.getMessage())
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-    }
-	
-	
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/tagLcAsExpired")
-    public Response changeExpiredLcStatusesWithAccounting(@Context UriInfo allUri){
-		TestTimehehe = false;
-        println "\n--- START: Tag LC as Expired, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        try {
-            MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-            String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-//            Assert.notNull(reportDate,"Report date must not be null!")
-			//test
-			
-			def selfTimer = 0;
-			def tryConn = true;
-			System.out.println("Connecting to SIBS...");
-				//Log.debug("Connecting to SIBS...");
-			while(tryConn == true){
-			try{
-			
-				
-			if(selfTimer >= 30) //Terminator
-			tryConn = false;
-	
-			if(selfTimer != 0){
-
-			timerStarts = 1000
-			while(timerStarts != 60000){
-											
-			Thread.sleep(1000); //sleep for 1 second
-			timerStarts += 1000;
-
-
-											
-			}
-
-			}
-			
-			
-			
-			
-
-            if(reportDate == null){
-				
-				tradeProductExpireJob.execute(); // for expired LC
-                tradeProductRepository.updateTrade("UPDATE TRADEPRODUCT SET STATUS = 'EXPIRED' WHERE DOCUMENTNUMBER IN (SELECT LC.DOCUMENTNUMBER FROM LETTEROFCREDIT LC JOIN TRADEPRODUCT TP ON LC.DOCUMENTNUMBER = TP.DOCUMENTNUMBER WHERE LC.TYPE <> 'CASH' AND TP.STATUS IN ('OPEN','REINSTATED') AND LC.EXPIRYDATE <= CAST(CURRENT_TIMESTAMP AS TIMESTAMP))");
-			
-				
-            } else {
-                // MM-dd-yyyy
-				String[] split = reportDate.split("-")
-				String MM = split[0]
-				String dd = split[1]
-				String yyyy = split[2]
-				SimpleDateFormat df1 = new SimpleDateFormat("MM/dd/yyyy");
-				SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
-				Date date = df1.parse(MM+"/"+dd+"/"+yyyy);  // Does not have time component, meaning this is midnight...
-														// ...so we need to add one day as the "limit"
-				
-				//Expired LC Batch Run early morning including holidays and weekends
-				//tag as 'EXPIRED' for those LCs which was matured a day before
-				Calendar dateToday = GregorianCalendar.getInstance();
-				dateToday.setTime(date);
-				dateToday.add(GregorianCalendar.DATE, -1);
-				Date dateToExpire = dateToday.getTime();
-				
-                String timestampFormattedDate = reportDate+"-00.00.00"
-                println "timestampFormattedDate:"+timestampFormattedDate
-				println "Date to Expire: "+dateToExpire+"-00.00.0"
-               
-                
-                GregorianCalendar cal = GregorianCalendar.getInstance();
-                cal.setTime(date);
-				//cal.add(GregorianCalendar.DATE, 1);
-				
-                println ">>>>>>>>>>>>>>>>>> date = ${date}"
-                //println ">>>>>>>>>>>>>>>>>> limit = ${cal.getTime()}"
-
-                String update = "UPDATE TRADEPRODUCT SET STATUS = 'EXPIRED' WHERE DOCUMENTNUMBER IN (SELECT LC.DOCUMENTNUMBER FROM LETTEROFCREDIT LC JOIN TRADEPRODUCT TP ON LC.DOCUMENTNUMBER = TP.DOCUMENTNUMBER WHERE LC.TYPE <> 'CASH' AND TP.STATUS IN ('OPEN','REINSTATED') AND LC.EXPIRYDATE <= CAST('${df2.format(cal.getTime())}' AS TIMESTAMP))"
-				tradeProductExpireJob.execute(reportDate);
-				//update TradeProduct table and create a reversal entry for those recently expired LC
-				println "setExpiredLcsStatusToExpired.execute();"
-                tradeProductRepository.updateTrade(update);
-				println "tradeProductExpireJob.execute();"
-				 // for expired LC
-
-            }
-			
-			
-			
-							
-			tryConn = false;
-			sibsReq = false;
-			sibsRecon = false;
-			
-			//set false to exit loop if success
-//					tryConn = false;
-		     println "\n--- END (SUCCESS): Tag LC as Expired, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success : true,name:'Expire LCs'])).build();
-			
-	
-			}catch(Exception e) {
-			
-						
-											
-						if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-							println "error ALLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAANNNNN"
-						sibsReq = true;
-						sibsRecon = true;
-						println ("count " + selfTimer)
-						if(tryConn == false){
-							sibsReq = false;
-							sibsRecon = false;
-							e.printStackTrace();
-							System.err.println("expireLcs: "+e.getCause()?.getMessage())
-							println "\n--- END (SUCCESS): Tag LC as Expired, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-							return Response.status(200).entity(gson.toJson([sibsretry : true,name:'Expire LCs'])).build();
-			}
-						
-						
-			
-								   System.out.println("Error Message Start : " + e + " : Error Message End");
-								   selfTimer++;
-								   System.out.println("Reconnecting to SIBS...");
-				//				   Log.debug("Reconnecting to SIBS...");
-				
-								}else{
-								sibsReq = false;
-								sibsRecon = false;
-								e.printStackTrace();
-								throw new IllegalArgumentException(e.printStackTrace());
-								}
-						
-						}
-			}
-								//test end
-			
-			
-			
-			
-			
-            println "\n--- END (SUCCESS): Tag LC as Expired, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success : true,name:'Expire LCs'])).build();
-			}catch(Exception e){
-            e.printStackTrace();
-            System.err.println("expireLcs: "+e.getCause()?.getMessage())
-            println "\n--- END (FAILED): Tag LC as Expired, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success : false])).build();
-        }
-    }
-
-
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/sibsTimer")
-	public Response testTimer(@Context UriInfo allUri){
-	Gson gson = new Gson();
-	
-	if(sibsReq == true)
-	sibsStatus = sibsExtractionJob.checkConnection();
-	else
-	sibsStatus = true;
-	
-	return Response.status(200).entity(gson.toJson([recon : sibsStatus])).build();
-
-		
-	}
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/reverseOrCancelLc")
-	public Response reverseOrCancelLc(@Context UriInfo allUri){
-		println "\n--- START: Reverse or Cancel LCs, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		try {
-			MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-			String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-//            Assert.notNull(reportDate,"Report date must not be null!")
-			if(reportDate == null){
-				println "report date is null"
-				// tradeProductExpireJob.execute();=> earmarking is done during process revalue batch
-			} else {
-				// MM-dd-yyyy
-				String timestampFormattedDate = reportDate+"-00.00.00"
-				println "timestampFormattedDate:"+timestampFormattedDate
-				println "tradeProductExpireJob.execute();"
-				//tradeProductExpireJob.execute(reportDate); => earmarking is done during process revalue batch
-			}
-			println "\n--- END (SUCCESS): Reverse or Cancel LCs, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Reverse Expired LC'])).build();
-		}catch(Exception e){
-			e.printStackTrace();
-			System.err.println("expireLcs: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): Reverse or Cancel LCs, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/purgeEts")
-    public Response purgeEts(@Context UriInfo allUri){
-        println "\n--- START: Purge Unapproved ETS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        String reportDate = allUri.getQueryParameters()?.getFirst(REPORT_DATE)?.toString();
-        Assert.notNull(reportDate,"Report date must not be null!")
-        println "reportDate: " + reportDate
-        try{
-			
-
-			
-		
-			
-			
-			def selfTimer = 0;
-			def tryConn = true;
-			System.out.println("Connecting to SIBS...");
-				//Log.debug("Connecting to SIBS...");
-			while(tryConn == true){
-			try{
-			
-				
-			if(selfTimer >= 30) //Terminator
-			tryConn = false;
-	
-			if(selfTimer != 0){
-
-			timerStarts = 1000
-			while(timerStarts != 60000){
-											
-			Thread.sleep(1000); //sleep for 1 second
-			timerStarts += 1000;
-
-
-											
-			}
-
-			}
-			String[] documentNumbers = tradeServiceRepository.getDocumentNumbersOfUnapprovedEts(DATE_FORMATTER.parse(reportDate))
-			println "documentNumbers: " + documentNumbers
-		
-			
-			cancelDormantEtsJob.execute(reportDate);
-			
-			if (documentNumbers.length > 0){
-				
-				facilityReferenceNormalization.deleteOutstandingUnapprovedFacilityAvailment(documentNumbers)
-			
-				println facilityReferenceNormalization.test(documentNumbers)
-			}
-			
-						
-		
-			sibsReq = false;
-			sibsRecon = false;
-			tryConn = false;
-			
-
-			//set false to exit loop if success
-
-			println "\n--- END (SUCCESS): Purge Unapproved ETS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Purge Unapproved ETS'])).build();
-	   
-		
-	
-			}catch(Exception e) {
-
-			
-								
-
-//			checkConn = sibsExtractionJob.checkConnection();
-			if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-//			if(checkConn == false){
-				sibsReq = true;
-				sibsRecon = true;
-			println ("count " + selfTimer)
-			if(tryConn == false){
-				sibsReq = false;
-				sibsRecon = false;
-				e.printStackTrace();
-				System.err.println("expireLcs: "+e.getCause()?.getMessage())
-				println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes): Purge Unapproved ETS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-
-				return Response.status(200).entity(gson.toJson([sibsretry : true,name:'Purge Unapproved ETS'])).build();
-			}
-			
-			
-
-					   System.out.println("Error Message Start : " + e + " : Error Message End");
-					   selfTimer++;
-					   System.out.println("Reconnecting to SIBS...");
-	//				   Log.debug("Reconnecting to SIBS...");
-	
-					}else{
-					sibsReq = false;
-					sibsRecon = false;
-					e.printStackTrace();
-					throw new IllegalArgumentException(e.printStackTrace());
-					}
-			
-			}
-			
-			}
-			
-			//test end
-			
-			
-						
-            println "\n--- END (SUCCESS): Purge Unapproved ETS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Purge Unapproved ETS'])).build();
-	   
-			
-			
-			
-	
-	}catch(Exception e){
-	   		System.err.println("purgeEts: "+e.getCause()?.getMessage())
-            println "\n--- END (FAILED): Purge Unapproved ETS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		    return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/gl")
-    public Response generateGl(@Context UriInfo allUri){
-		println "\n--- START: GL Movement, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-		try{
-			MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-			String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-			Assert.notNull(reportDate,"Report date must not be null!")
-            println "reportDate = ${reportDate}"
-            glReportGenerator.execute(GL_QUERY, DATE_FORMATTER.parse(reportDate), getDate(reportDate));
-			println "tag all gl as posted"
-			accountingService.updateIsPosted(true);
-			
-			Boolean balanceChecking = accountingService.balanceChecking();
-			println "\n.. Checking Accounting Entries Debit vs Credit..."
-			if(balanceChecking) {
-				println "All are balance"
-			}else {
-				throw new Exception("GL Entires are Not Balance");
-			}
-			
-            println "\n--- END (SUCCESS): GL Movement, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'GL Movement'])).build();
-	   }catch(Exception e){
-            e.printStackTrace();
-	   		System.err.println("gl: "+e.getCause()?.getMessage())
-            println "\n--- END (FAILED): GL Movement, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/glis")
-    public Response generateGlis(@Context UriInfo allUri){
-		println "\n--- START: GLIS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-		try{
-			MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-			String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-			Assert.notNull(reportDate,"Report date must not be null!")
-            println "reportDate = ${reportDate}"
-			glisReportGenerator.execute(DATE_FORMATTER.parse(reportDate))
-            println "\n--- END (SUCCESS): GLIS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'GLIS Hand-Off File'])).build();
-	   }catch(Exception e){
-            e.printStackTrace();
-	   		System.err.println("glis: "+e.getCause()?.getMessage())
-            println "\n--- END (FAILED): GLIS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/abortPendingEtsReversal")
-    public Response abortPendingEtsReversal(@Context UriInfo allUri){
-		println "\n--- START: Abort Pending ETS Reversal, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-		try{
-			abortPendingEtsReversalJob.execute();
-            println "\n--- END (SUCCESS): Abort Pending ETS Reversal, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Abort Pending ETS Reversal'])).build();
-	   }catch(Exception e){
-	   		System.err.println("abortPendingEtsReversal: "+ e.getCause()?.getMessage())
-            println "\n--- END (FAILED): Abort Pending ETS Reversal, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		    return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/synchronizeRoutingStatus")
-    public Response synchronizeRoutingStatus(@Context UriInfo allUri){
-		println "\n--- START: Synchronize Routing Status, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-        Gson gson = new Gson();
-        Assert.notNull(parameters?.getFirst(REPORT_DATE)?.toString(),"Report date must not be null!")
-		String p_message = "";
-        try{
-            String dateStr = parameters?.getFirst(REPORT_DATE)?.toString();
-            java.sql.Date date = getDate2(dateStr);
-			
-			p_message = synchronizeRoutingStatusCsvJob.execute(SYNCHRONIZE_ROUTING_STATUS, , 'callableFlag', date.toString());
-            println "\n--- END (SUCCESS):  Synchronize Routing Status JOB, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name: p_message.startsWith("2") ? p_message :'Synchronize Routing Status'])).build();
-	   }catch(Exception e){
-	   		System.err.println("synchronizeRoutingStatus: "+ e.getCause()?.getMessage())
-            println "\n--- END (FAILED): Synchronize Routing Status, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		    return Response.status(200).entity(gson.toJson([success : false,name: 'dbException', p_message : e.getCause()?.getMessage()])).build();
-	   }
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/params")
-	public Response generateParameterFiles(@Context UriInfo allUri){
-		println "\n--- START Parameter, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		Map returnMap = new HashMap();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		Assert.notNull(reportDate,"Report date must not be null!")
-		println "reportDate:"+reportDate
-		try{
-
-
-			//test
-
-			def selfTimer = 0;
-			def tryConn = true;
-			System.out.println("Connecting to SIBS...");
-			//Log.debug("Connecting to SIBS...");
-			while(tryConn == true){
-				try{
-
-
-					if(selfTimer >= 30) //Terminator
-						tryConn = false;
-
-					if(selfTimer != 0){
-
-						timerStarts = 1000
-						while(timerStarts != 60000){
-
-							Thread.sleep(1000); //sleep for 1 second
-							timerStarts += 1000;
-
-
-
-						}
-
-					}
-
-
-
-					glParameterFileJob.execute(GL_PARAMETER_FILE_SQL,DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate));
-
-
-
-					tryConn = false;
-					sibsReq = false;
-					sibsRecon = false;
-
-					println "\n--- END (SUCCESS): GL Parameter:" + DateUtil.convertToTimeString(new Date()) + "---"
-					return Response.status(200).entity(gson.toJson([success : true,name:'GL Parameter'])).build();
-
-				}catch(Exception e) {
-
-
-
-					//			if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-					def states = sibsExtractionJob.checkConnection();
-					if(states == false){
-						sibsReq = true;
-						sibsRecon = true;
-						println ("count " + selfTimer)
-						if(tryConn == false){
-							sibsReq = false;
-							sibsRecon = false;
-							e.printStackTrace();
-							System.err.println("expireLcs: "+e.getCause()?.getMessage())
-							println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes): GL Parameter:" + DateUtil.convertToTimeString(new Date()) + "---"
-							return Response.status(200).entity(gson.toJson([sibsretry : true,name:'GL Parameter'])).build();
-
-							//			println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes):" + DateUtil.convertToTimeString(new Date()) + "---"
-							//	        return Response.status(200).entity(gson.toJson([sibsretry : true,name:'GL Parameter'])).build();
-
-						}
-
-
-
-						System.out.println("Error Message Start : " + e + " : Error Message End");
-						selfTimer++;
-						System.out.println("Reconnecting to SIBS...");
-						//				   Log.debug("Reconnecting to SIBS...");
-
-					}else{
-						sibsReq = false;
-						sibsRecon = false;
-						e.printStackTrace();
-						throw new IllegalArgumentException(e.printStackTrace());
-					}
-
-				}
-
-			}
-			//test end
-
-
-
-		}catch(Exception e){
-			System.err.println("Parameter: "+ e.getCause()?.getMessage())
-			println "\n--- END (FAILED): GL Parameter, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/allocation")
-    public Response generateAllocation(@Context UriInfo allUri){
-        println "\n--- START Allocation, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        Map returnMap = new HashMap();
-        MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-        String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-        println "reportDate:"+reportDate
-        Assert.notNull(reportDate,"Report date must not be null!")
-        try{
-            glAllocationsReportJob.execute(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate),"561501030000","10903");
-			glAllocationsExcelJob.executeToExcel(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate),"561501030000","10903");
-            println "\n--- END (SUCCESS): Allocation:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success : true,name:'Allocation File'])).build();
-        }catch(Exception e){
-            e.printStackTrace()
-            System.err.println("Allocation: "+ e.getCause()?.getMessage())
-            println "\n--- END (FAILED): Allocation, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success : false])).build();
-        }
-    }
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/allocationException")
-	public Response generateAllocationExceptionReport(@Context UriInfo allUri){
-		println "\n--- START Allocation Exception Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		Map returnMap = new HashMap();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		println "reportDate:"+reportDate
-		Assert.notNull(reportDate,"Report date must not be null!")
-		try{
-			glAllocationsExcelJob.executeAllocationExceptionReport(DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate),"561501030000","10903");
-			println "\n--- END (SUCCESS): Allocation Exception Report:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : true,name:'Allocation Exception Report'])).build();
-		}catch(Exception e){
-			e.printStackTrace()
-			System.err.println("Allocation: "+ e.getCause()?.getMessage())
-			println "\n--- END (FAILED): Allocation Exception Report, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-	}
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/transaction")
-    public Response generateTransactionFile(@Context UriInfo allUri){
-		println "\n--- START: AMLA Transaction / Totals, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-        Assert.notNull(parameters?.getFirst(REPORT_DATE)?.toString(),"Report date must not be null!")
-        try{
-            String dateStr = parameters?.getFirst(REPORT_DATE)?.toString();
-            java.sql.Date date = getDate2(dateStr);
-            println "reportDate = ${dateStr}"
-            transactionLogJob.execute(TRANSACTION_LOG_QUERY, date);
-            amlaTotalsLogJob.execute(AMLA_TOTALS_QUERY, date, date, date);
-			amlaExpiredLcService.deleteTransLogBatchFlag();
-            println "\n--- END (SUCCESS): AMLA Transaction / Totals, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success:true,name:'AMLA Transaction'])).build();
-        }catch(Exception e){
-            e.printStackTrace();
-            System.err.println("Transaction: "+e.getCause()?.getMessage())
-            println "\n--- END (FAILED): AMLA Transaction / Totals, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-        }
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/customerAccount")
-    public Response generateCustomerAccountFile(@Context UriInfo allUri){
-		println "\n--- START: AMLA Customer Account, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-        Assert.notNull(parameters?.getFirst(REPORT_DATE)?.toString(),"Report date must not be null!")
-		try{
-            String dateStr = parameters?.getFirst(REPORT_DATE)?.toString();
-            java.sql.Date date = getDate2(dateStr);
-            println "reportDate = ${dateStr}"
-			customerAccountLogGeneratorJob.execute(CUSTOMER_ACCOUNT_LOG_QUERY, date);
-			amlaExpiredLcService.deleteCustomerAccBatchFlag();
-            println "\n--- END (SUCCESS): AMLA Customer Account, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		//return to original code
-			return Response.status(200).entity(gson.toJson([success:true,name:'AMLA Customer Account'])).build();
-		}catch(Exception e){
-            e.printStackTrace();
-			System.err.println("customer account: "+e.getCause()?.getMessage())
-            println "\n--- END (FAILED): AMLA Customer Account, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			//return to original code
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/account")
-    public Response generateAccountFile(@Context UriInfo allUri){
-		println "\n--- START: AMLA Account, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-        Assert.notNull(parameters?.getFirst(REPORT_DATE)?.toString(),"Report date must not be null!")
-		try{
-            String dateStr = parameters?.getFirst(REPORT_DATE)?.toString();
-            
-            java.sql.Date date = getDate2(dateStr);
-            println "reportDate = ${dateStr}"
-			accountLogJob.execute(ACCOUNT_LOG_QUERY, date);
-			amlaExpiredLcService.deleteAccountLogBatchFlag();
-            println "\n--- END (SUCCESS): AMLA Account, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'AMLA Account'])).build();
-		}catch(Exception e){
-            e.printStackTrace();
-			System.err.println("account: "+e.getCause()?.getMessage())
-            println "\n--- END (FAILED): AMLA Account, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/customer")
-    public Response generateCustomerFile(@Context UriInfo allUri){
-		println "\n--- START: AMLA Customer, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-        Assert.notNull(parameters?.getFirst(REPORT_DATE)?.toString(),"Report date must not be null!")
-        try{
-            String dateStr = parameters?.getFirst(REPORT_DATE)?.toString();
-            
-            java.sql.Date date = getDate2(dateStr);
-            println "reportDate = ${dateStr}"
-            customerLogGeneratorJob.execute(CUSTOMER_LOG_QUERY, date);
-            println "\n--- END (SUCCESS): AMLA Customer, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success:true,name:'AMLA Customer'])).build();
-        }catch(Exception e){
-            e.printStackTrace();
-            System.err.println("customer: "+e.getCause()?.getMessage())
-            println "\n--- END (FAILED): AMLA Customer, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-        }
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/balance")
-	public Response recordEndOfDayBalance(@Context UriInfo allUri) {
-
-		println "\n--- START: Balance, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		println 'recordEndOfDayBalance'
-		Gson gson = new Gson();
-		Map returnMap = new HashMap();
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-
-
-
-		try {
-
-
-			//test
-
-			def selfTimer = 0;
-			def tryConn = true;
-			System.out.println("Connecting to SIBS...");
-			//Log.debug("Connecting to SIBS...");
-			while(tryConn == true){
-				try{
-
-
-					if(selfTimer >= 30) //Terminator
-						tryConn = false;
-
-					if(selfTimer != 0){
-
-						timerStarts = 1000
-						while(timerStarts != 60000){
-
-							Thread.sleep(1000); //sleep for 1 second
-							timerStarts += 1000;
-
-
-
-						}
-
-					}
-
-
-					String currentDate = parameters?.getFirst(REPORT_DATE)?.toString()
-
-					if (currentDate != null) {
-
-						println "currentDate = ${currentDate}"
-						dailyBalanceRecorderJob.execute(currentDate);
-
-					} else {
-
-						println "getAppServerDateString() = ${getAppServerDateString()}"
-						dailyBalanceRecorderJob.execute(getAppServerDateString());
-					}
-
-
-					tryConn = false;
-					sibsReq = false;
-					sibsRecon = false;
-					println "\n--- END (SUCCESS): Balance, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-
-
-					return Response.status(200).entity(gson.toJson([success:true,name:'Balance'])).build();
-
-
-
-				}catch(Exception e) {
-
-
-					def states = sibsExtractionJob.checkConnection();
-					if(states == false){
-						//														if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-
-						sibsReq = true;
-						sibsRecon = true;
-						println ("count " + selfTimer)
-						if(tryConn == false){
-							sibsReq = false;
-							sibsRecon = false;
-							e.printStackTrace();
-
-
-							println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes): Balance, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-							return Response.status(200).entity(gson.toJson([sibsretry:true,name:'Balance'])).build();
-
-
-						}
-
-
-
-						System.out.println("Error Message Start : " + e + " : Error Message End");
-						selfTimer++;
-						System.out.println("Reconnecting to SIBS...");
-						//				   Log.debug("Reconnecting to SIBS...");
-
-					}else{
-						sibsReq = false;
-						sibsRecon = false;
-						e.printStackTrace();
-						throw new IllegalArgumentException(e.printStackTrace());
-					}
-
-				}
-
-			}
-
-
-
-
-
-		} catch(Exception e) {
-
-			System.err.println("Balance: " + e.printStackTrace())
-			System.err.println("Balance: " + e.getCause()?.getMessage())
-			println "\n--- END (FAILED): Balance, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-
-
-
-
-	}
-
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/cifNormalization")
-	public Response updateCifNumber(@Context UriInfo allUri){
-		println "\n--- START: CIF Normalization, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		// ER# 20140909-038 : Start
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString()
-		println "reportDate: " + reportDate
-		Date appdate = getDate2(reportDate)
-		try{
-			long julianDate = toJulianDate(appdate)
-			cifNormalizationProcess.execute(julianDate)
-					
-			println "\n--- END (SUCCESS): CIF Normalization, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'CIF Normalization'])).build();			
-			// ER# 20140909-038 : End
-	   }catch(Exception e){
-			System.err.println("CIF Normalization: "+e);
-			e.printStackTrace();
-			println "\n--- END (FAILED): CIF Normalization, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-	}
-	// ER# 20140909-038 : Start
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/cifNormalization2")
-	public Response extractCifNumbers(@Context UriInfo allUri){
-		println "\n--- START: Extract Normalized CIFs, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		
-		try{
-			cifNormalizationProcess.compareCif()
-					
-			println "\n--- END (SUCCESS): Extract Normalized CIFs, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'Extracrt Normalized CIFs'])).build();
-			
-	   }catch(Exception e){
-			System.err.println("Extract Normalized CIFs: "+e);
-			e.printStackTrace();
-			println "\n--- END (FAILED): Extract Normalized CIFs, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-	}
-	// ER# 20140909-038 : End
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/cifPurging")
-	public Response cifPurging(@Context UriInfo allUri){
-		println "\n--- START CIF Purging, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-		try{
-			
-			cifPurgingGeneratorJob.execute();
-			println "\n--- END (SUCCESS): CIF Purging, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'CIF Purging'])).build();
-	   }catch(Exception e){
-			System.err.println("CIF PURGING: "+e);			
-			e.printStackTrace();
-			println "\n--- END (FAILED): CIF Purging, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-	}
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/expiredAmla")
-	public Response expiredAmla(@Context UriInfo allUri){
-		try{
-			//test
-
-			def selfTimer = 0;
-			def tryConn = true;
-			System.out.println("Connecting to SIBS...");
-			//Log.debug("Connecting to SIBS...");
-			while(tryConn == true){
-				try{
-
-
-					if(selfTimer >= 30) //Terminator
-						tryConn = false;
-
-					if(selfTimer != 0){
-
-						timerStarts = 1000
-						while(timerStarts != 60000){
-
-							Thread.sleep(1000); //sleep for 1 second
-							timerStarts += 1000;
-
-
-
-						}
-
-					}
-
-					Gson gson = new Gson();
-					SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
-					MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-					System.out.println("==================: "+parameters);
-					String dateFrom = parameters.getFirst("dateFrom").toString();
-					String dateTo = parameters.getFirst("dateTo").toString();
-					System.out.println(dateFrom+" "+dateTo);
-
-					Date date1 = new Date();
-					Date date2 = new Date();
-
-					if(parameters.getFirst("date")!=null){
-						println("DAILY BATCH RUN");
-						date1 = sdf.parse(parameters.getFirst("date").toString());
-						date2 = sdf.parse(parameters.getFirst("date").toString());
-					}else{
-						println("ADHOC");
-						date1 = sdf.parse(dateFrom);
-						date2 = sdf.parse(dateTo);
-					}
-
-					amlaExpiredLcService.adhocExpiredAmla(date1,date2);
-
-					tryConn = false;
-					sibsReq = false;
-					sibsRecon = false;
-
-					println "\n--- END (SUCCESS): AMLA_EXPIRED, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-
-					return Response.status(200).entity(gson.toJson([success:true,name:'Amla Expire LC'])).build();
-
-
-
-				}catch(Exception e) {
-
-
-
-					//			if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-					def states = sibsExtractionJob.checkConnection();
-					if(states == false){
-						sibsReq = true;
-						sibsRecon = true;
-						println ("count " + selfTimer)
-						if(tryConn == false){
-							sibsReq = false;
-							sibsRecon = false;
-							e.printStackTrace();
-							System.err.println("CIF PURGING: "+e);
-							println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes): AMLA_EXPIRED, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-
-							return Response.status(200).entity(gson.toJson([sibsretry:true,name:'Amla Expire LC'])).build();
-
-
-						}
-
-
-
-						System.out.println("Error Message Start : " + e + " : Error Message End");
-						selfTimer++;
-						System.out.println("Reconnecting to SIBS...");
-						//				   Log.debug("Reconnecting to SIBS...");
-
-					}else{
-						sibsReq = false;
-						sibsRecon = false;
-						e.printStackTrace();
-						throw new IllegalArgumentException(e.printStackTrace());
-						
-					}
-
-				}
-
-			}
-			//test end
-
-
-
-		}catch(Exception e){
-			System.err.println("CIF PURGING: "+e);
-			println "\n--- END (FAILED): AMLA_EXPIRED, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-
-	}
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/dw")
-    public Response generateDwParameterFiles(@Context UriInfo allUri){
-		println "\n--- START DW Parameter, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        Map returnMap = new HashMap();
-        MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		try{
-	        String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-	        Assert.notNull(reportDate,"Report date must not be null!")
-            println "reportDate:"+reportDate
-	        dwParameterRecord.execute(DW_PARAMETER_FILE_SQL,DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate));
-			println "\n--- END (SUCCESS): DW Parameter, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-	        return Response.status(200).entity(gson.toJson([success : true,name:'DW Parameter'])).build();
-    	}catch(Exception e){
-			e.printStackTrace();
-			System.err.println("DW: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): DW Parameter, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-    }
-
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/cbr")
-    public Response generateDwCbrParameterFiles(@Context UriInfo allUri){
-		println "\n--- START CBR Parameter, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        Map returnMap = new HashMap();
-        MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		try{
-	        String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-	        Assert.notNull(reportDate,"Report date must not be null!")
-            println "reportDate:"+reportDate
-            cbrParameterFileGenerator.execute(CBR_PARAMETER_FILE_SQL,DATE_FORMATTER_BATCH_CONTROLLER.parse(reportDate));
-			println "\n--- END (SUCCESS): CBR Parameter, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-	        return Response.status(200).entity(gson.toJson([success : true,name:'CBR Parameter'])).build();
-    	}catch(Exception e){
-			e.printStackTrace();
-			System.err.println("CBR Parameter: "+e.getCause()?.getMessage())
-			println "\n--- END (FAILED): CBR Parameter, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-    }
-
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/tagAsPending")
-	public Response tagAsPending(@Context UriInfo allUri, String postRequestBody) {
-        println "\n--- START: Tag As Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson()
-
-		String result="";
-		Map returnMap = new HashMap();
-
-		try {
-			Map formDetails = gson.fromJson(postRequestBody, Map.class);
-			String errorMessage = ""
-
-			try{
-				pas5FilesLoaderService.tagAsPending()
-
-				returnMap.put("success", true);
-				returnMap.put("name", "Tag As Pending");
-
-                println "\n--- END (SUCCESS): Tag As Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-
-			} catch(CasaServiceException e){
-//				errorMessage = e.getErrorCode() + " : "  + e.getCasaErrorMessage();
-				println "ERROR: "+ e.getErrorCode() + " : "  + e.getCasaErrorMessage();
-//                returnMap.put("status", "error");
-//                returnMap.put("error", errorMessage);
-                println "\n--- END (FAILED): Tag As Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-				returnMap.put("success", false);
-			}
-		
-			
-			} catch(Exception e) {
-
-			Map errorDetails = new HashMap();
-
-			e.printStackTrace();
-
-//            errorDetails.put("code", e.getMessage());
-//            errorDetails.put("description", e.toString());
-//
-//            returnMap.put("status", "error");
-//            returnMap.put("error", errorDetails);
-
-            println "\n--- END (FAILED): Tag As Pending, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-
-			returnMap.put("success", false);
-		}
-
-		// format return data as json
-		result = gson.toJson(returnMap);
-
-		return Response.status(200).entity(result).build();
-	}
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/revalueEarmark")
-    public Response revalueEarmark(@Context UriInfo allUri, String postRequestBody) {
-        println "\n--- START: Re Value Earmark, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson()
-
-        String result="";
-        Map returnMap = new HashMap();
-
-//        try {
-           
-
-            try{
-				
-				def selfTimer = 0;
-				def tryConn = true;
-				System.out.println("Connecting to SIBS...");
-					//Log.debug("Connecting to SIBS...");
-				while(tryConn == true){
-				try{
-				
-					
-				if(selfTimer >= 30) //Terminator
-				tryConn = false;
-		
-				if(selfTimer != 0){
-
-				timerStarts = 1000
-				while(timerStarts != 60000){
-												
-				Thread.sleep(1000); //sleep for 1 second
-				timerStarts += 1000;
-
-
-												
-				}
-
-				}
-				
-				
-				Map formDetails = gson.fromJson(postRequestBody, Map.class);
-				String errorMessage = ""
-				//Added from outside try catch
-				
-                batchFacilityRevaluationJob.execute();
-
-                
-
-				
-				
-				tryConn = false;
-				sibsReq = false;
-				sibsRecon = false;
-				
-				returnMap.put("success", true);
-				returnMap.put("name", "Process Revalue");
-				println "\n--- END (SUCCESS): Re Value Earmark, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-				//set false to exit loop if success
-//					tryConn = false;
-				        result = gson.toJson(returnMap);
-
-        return Response.status(200).entity(result).build();
-    
-		
-				}catch(Exception e) {
-	
-				
-									
-				if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-					
-				sibsReq = true;
-				sibsRecon = true;
-				println ("count " + selfTimer)
-				if(tryConn == false){
-					sibsReq = false;
-					sibsRecon = false;
-					e.printStackTrace();
-					System.err.println("expireLcs: "+e.getCause()?.getMessage())
-					println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes): Re Value Earmark, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"			
-			
-					returnMap.put("sibsretry", true);
-					returnMap.put("name", "Process Revalue");
-					
-					}
-				
-				
-
-						   System.out.println("Error Message Start : " + e + " : Error Message End");
-						   selfTimer++;
-						   System.out.println("Reconnecting to SIBS...");
-		//				   Log.debug("Reconnecting to SIBS...");
-		
-						}else{
-						sibsReq = false;
-						sibsRecon = false;
-						e.printStackTrace();
-						throw new IllegalArgumentException(e.printStackTrace());
-						}
-				
-				}
-				
-				}
-						
-				
-		
-				
-				//test end
-
-            }catch (Exception e){
-			
-			Map errorDetails = new HashMap();
-//				errorMessage = e.getErrorCode() + " : "  + e.getCasaErrorMessage();
-                println "ERROR: "+ e.printStackTrace()
-//                returnMap.put("status", "error");
-//                returnMap.put("error", errorMessage);
-                println "\n--- END (FAILED): Re Value Earmark, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-                returnMap.put("success", false);
-            }
-//        } catch(Exception e) {
-//
-//            Map errorDetails = new HashMap();
-//
-//            e.printStackTrace();
-//
-////            errorDetails.put("code", e.getMessage());
-////            errorDetails.put("description", e.toString());
-////
-////            returnMap.put("status", "error");
-////            returnMap.put("error", errorDetails);
-//
-//            println "\n--- END (FAILED): Re Value Earmark, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-//
-//            returnMap.put("success", false);
-//        }
-
-        // format return data as json
-        result = gson.toJson(returnMap);
-
-        return Response.status(200).entity(result).build();
-    }
-	
-	@GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/processCicls")
-    public Response processCicls(@Context UriInfo allUri, String postRequestBody) {
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		Gson gson = new Gson()
-		try{
-	       	String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-			Assert.notNull(reportDate,"Report date must not be null!")
-			println "\n--- SIMULAAAA Naaaa:" + reportDate + "---"
-			ciclsProcessorJob.execute(reportDate);
-			println "\n--- END (SUCCESS):" + DateUtil.convertToTimeString(new Date()) + "---"
-	        return Response.status(200).entity(gson.toJson([success : true,name:'Process CICLS Records'])).build();
-		}catch(Exception e){
-			e.printStackTrace()
-			System.err.println("Parameter: "+ e.getCause()?.getMessage())
-			println "\n--- END (FAILED): Process CICLS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-		}
-    }
-
-	@GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/generateCiclsFile")
-    public Response generateCiclsFile(@Context UriInfo allUri){
-		println "\n--- START: CICLS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-		try{
-			MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-			String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-            println "reportDate = ${reportDate}"
-			ciclsReportGeneratorJob.execute(reportDate)
-            println "\n--- END (SUCCESS): CICLS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'Generate CICLS Hand-Off File'])).build();
-	   }catch(Exception e){
-            e.printStackTrace();
-	   		System.err.println("cicls: "+e.getCause()?.getMessage())
-            println "\n--- END (FAILED): Generate CICLS, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-    }
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/processRefBanks")
-	public Response processRefBanks(@Context UriInfo allUri, String postRequestBody) {
-		println "\n--- START: Process Ref Banks, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-
-		String responseText="";
-		Map returnMap = new HashMap();
-		boolean responseStatus=true
-		
-		try {
-			Map<String,Object> placeholder=new HashMap<String,Object>()
-			List<String> columnList=new ArrayList<String>()
-			int successCtr=0;
-			int failCtr=0;
-//			println "+++++++++rawr++++++++++++++++++++++"
-//			println appProperties.object.getProperty("tfs.rmi.port")
-//			appProperties.getObject()
-//			println "+++++++++rawr++++++++++++++++++++++"
-//			def fileMatcher = ~/(?i).*\.txt/
-			FileInputStream fis = null
-			boolean fileExist = false
-
-			File refBankFile = new File(appProperties.object.getProperty('batch.bic.directory') + appProperties.object.getProperty('batch.bic.filename.all'))
-			
-			if(refBankFile == null){
-				refBankFile = new File(appProperties.object.getProperty('batch.bic.directory') + appProperties.object.getProperty('batch.bic.filename.delta'))
-			}
-			
-			if(refBankFile == null){
-				throw new RuntimeException("FI.txt or FIDELTA.txt NOT FOUND")
-			}
-			
-//			if(refBankFile.list() != null && refBankFile.list().length < 1){
-//				throw new Exception("No File Found.")
-//			}
-			println refBankFile
-
-			
-			File backupFileDirectory= new File(appProperties.object.getProperty('batch.bic.backup.directory'))
-			File bicBackupFile = null
-			
-			if(!backupFileDirectory.exists()){
-				backupFileDirectory.mkdir()
-			}
-			
-//			refBankFile.eachFileMatch(FileType.FILES,fileMatcher){f ->
-				try{
-					fis = new FileInputStream(refBankFile)
-					bicBackupFile = new File(appProperties.object.getProperty('batch.bic.backup.directory') + refBankFile.getName())
-					Scanner sc=new Scanner(fis);
-					if(sc.hasNext()){
-						String[] columnArray=sc.nextLine().split("\t")
-							for(String s:columnArray){
-								columnList.add(mapParametersToRefBankObject(s))
-							}
-					}
-					
-					while(sc.hasNext()){
-						String[] oneLine=sc.nextLine().split("\t")
-								
-						placeholder=new HashMap<String,Object>()
-						for(int x=0;x<columnList.size();x++){
-							try{
-								placeholder.put(columnList.get(x), oneLine[x])
-							}catch(ArrayIndexOutOfBoundsException ex){
-								continue;
-							}
-						}
-						if(!refBankService.processRefBankDetails(placeholder)){
-							failCtr++;
-							responseStatus=false
-						}else{
-							successCtr++;
-						}
-					}
-					
-					//delete file after use
-					fis.close()
-					sc.close()
-					if(refBankFile.exists()){
-						FileUtil.copyFile(refBankFile, bicBackupFile)
-						refBankFile.delete()						
-					}
-				}catch(Exception e){
-					throw new Exception("EXCEPTION IN EACH FILE MATCH\n", e)
-				}finally{
-					IOUtils.closeQuietly(fis)
-				}
-//			}
-			
-			println "\n====FINISHED UPLOAD REF BANK=================="
-			println "NO ERRORS ENCOUNTERED: "+responseStatus
-			println "TOTAL ROWS: "+ (failCtr+successCtr)
-			println "ROWS PROCESSED SUCCESS: "+successCtr
-			println "ROWS PROCESSED FAIL: "+failCtr
-			println "=============================================="
-			
-//			Map formDetails = gson.fromJson(postRequestBody, Map.class);
-//			List<Map<String,Object>> bankList= (List<Map<String,Object>>) formDetails.get("responseTextList")
-			
-//			refBankService.processRefBankDetails(bankList);
-
-			if(!responseStatus){
-				returnMap.put("success", false);
-				returnMap.put("failRows",failCtr);
-				returnMap.put("totalRows",(failCtr+successCtr));
-				returnMap.put("name", "Process Ref Banks");
-				responseText = gson.toJson(returnMap);
-				println "\n--- END (FAILED): Process Ref Banks, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-				return Response.status(404).entity(responseText).build();
-			}else{
-				returnMap.put("success", true);
-				returnMap.put("successRows",successCtr);
-				returnMap.put("totalRows",(failCtr+successCtr));
-				returnMap.put("name", "Process Ref Banks");
-				responseText = gson.toJson(returnMap);
-				println "\n--- END (SUCESS): Process Ref Banks, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-				return Response.status(200).entity(responseText).build();
-			}
-		}catch(Exception e){
-			e.printStackTrace();
-			returnMap.put("success", false);
-			returnMap.put("errorCode", e.getMessage());
-			returnMap.put("description", e.toString());
-			returnMap.put("name", "Process Ref Banks");
-			responseText = gson.toJson(returnMap);
-			println "\n--- END (FAILED): Process Ref Banks, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(500).entity(responseText).build();
-		}
-	}
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/processRmaDocument")
-	public Response processRmaDocument(@Context UriInfo allUri, String postRequestBody) {
-		println "\n--- START: Process RMA Document, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-
-		String responseText="";
-		Map returnMap = new HashMap();
-
-		try {
-
-			int successCtr=0;
-			int failCtr=0;
-			int emptyCtr=0;
-			int banksToSaveCtr=0;
-			int banksProcessed=0;
-			int processResult=0;
-			
-			def fileMatcher = ~/(?i).*\.xml/
-			FileInputStream fis = null
-			
-			File rmaBankFile = new File(appProperties.object.getProperty('batch.rma.directory'))
-			if(rmaBankFile.list() != null && rmaBankFile.list().length < 1){
-				returnMap.put("success",true);
-				returnMap.put("name", "Process Rma Document: WARNING!RMA file from SWIFT not found in folder /opt/tfs/SWIFT/RMAFile/, please update Runguide and inform TFS Team");
-//				returnMap.put("name", "WARNING:RMA file from SWIFT not found in folder /opt/tfs/SWIFT/RMAFile/, please update Runguide and inform TFS Team");
-				responseText = gson.toJson(returnMap);
-				return Response.status(200).entity(responseText).build();
-			}
-			
-			File backupFileDirectory= new File(appProperties.object.getProperty('batch.rma.backup.directory'))
-			File rmaBankBackupFile = null
-			
-			if(!backupFileDirectory.exists()){
-				backupFileDirectory.mkdir()
-			}
-			
-			
-			rmaBankFile.eachFileMatch(FileType.FILES,fileMatcher){f ->
-				try{
-					fis = new FileInputStream(f)
-					rmaBankBackupFile = new File(appProperties.object.getProperty('batch.rma.backup.directory') + f.getName())
-					SAXParserFactory saxFactory = SAXParserFactory.newInstance();
-					SAXParser parser=saxFactory.newSAXParser();
-					DefaultHandler handler = new RmaBankHandler();
-					
-					parser.parse(fis, handler);
-					
-					for(Map<String,Object> bankToSave:handler.getBanksToSave()){
-						processResult=refBankService.processRmaDocument(bankToSave);
-						switch(processResult){
-						case 0:
-							emptyCtr++;
-							break;
-						case -1:
-							failCtr++;
-							break;
-						default:
-							successCtr++;
-							banksProcessed+=processResult;
-							break;
-						}
-						banksToSaveCtr++;
-					}
-					//update ALL NULL REF BANKS
-					refBankService.updateAllNullRmaRefBanks();
-					//delete after use
-					fis.close()
-					if(f.exists()){
-						FileUtil.copyFile(f, rmaBankBackupFile)
-						f.delete()
-					}
-				}catch(Exception e){
-					throw new Exception("Exception in Processing Each File in RMA",e)
-				}finally{
-					IOUtils.closeQuietly(fis)
-				}
-			}
-			
-			println "\n====FINISHED UPLOAD RMA DOCUMENT=================="
-			println "TOTAL BANKS IDS TO SAVE: "+ banksToSaveCtr
-			println "BANKS UPDATED SUCCESS: "+banksProcessed
-			println "BANKS SAVE SUCCESS: "+successCtr
-			println "BANKS SAVE FAIL: "+failCtr
-			println "BANKS NOT FOUND IN DB: "+emptyCtr
-			println "=============================================="
-			
-//			Map formDetails = gson.fromJson(postRequestBody, Map.class);
-//			List<Map<String,Object>> bankList= (List<Map<String,Object>>) formDetails.get("responseTextList")
-			
-//			refBankService.processRefBankDetails(bankList);
-
-				returnMap.put("success",true);
-				returnMap.put("successBanks",successCtr);
-				returnMap.put("failBanks",failCtr);
-				returnMap.put("emptyBanks",emptyCtr);
-				returnMap.put("processedBanks",banksProcessed);
-				returnMap.put("totalBanks",banksToSaveCtr);
-				returnMap.put("name", "Process Rma Document");
-				responseText = gson.toJson(returnMap);
-				println "\n--- END (SUCCESS): Process RMA Document, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-				return Response.status(200).entity(responseText).build();
-				
-		} catch(SAXException e) {
-			e.printStackTrace();
-			returnMap.put("success", false);
-			returnMap.put("errorCode", e.getMessage());
-			returnMap.put("description", "SAX EXCEPTION: "+e.toString());
-			returnMap.put("name", "Process Rma Document");
-			responseText = gson.toJson(returnMap);
-			println "\n--- END (FAILED): Process RMA Document, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(500).entity(responseText).build();
-		} catch(Exception e){
-			e.printStackTrace();
-			returnMap.put("success", false);
-			returnMap.put("errorCode", e.getMessage());
-			returnMap.put("description", e.toString());
-			returnMap.put("name", "Process Rma Document");
-			responseText = gson.toJson(returnMap);
-			println "\n--- END (FAILED): Process RMA Document, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(500).entity(responseText).build();
-		}
-	}
-	
-	private String mapParametersToRefBankObject(String paramName){
-		switch(paramName){
-//			--List of  RefBank properties not mapped---
-//			private String rmaFlag;
-//			private String depositoryFlag;
-//			private String glBankCode;
-//			private String rbuAccount;
-//			private String fcduAccount;
-//			private Currency reimbursingCurrency;
-//			private Date updateDate;
-//			private String updatedBy;
-//			private String glCodeRbu;
-//			private String glCodeFcdu;
-//			private Long cbCreditorCode;
-//			private String deleteFlag;
-			case "BIC CODE":
-				return "bic"
-				break;
-			case "BRANCH CODE":
-				return "branchCode"
-				break;
-			case "INSTITUTION NAME":
-				return "institutionName"
-				break;
-			case "BRANCH INFORMATION":
-				return "branchInfo"
-				break;
-			case "CITY HEADING":
-				return "city"
-				break;
-			case "PHYSICAL ADDRESS 1":
-				return "address1"
-				break;
-			case "PHYSICAL ADDRESS 2":
-				return "address2"
-				break;
-			case "PHYSICAL ADDRESS 3":
-				return "address3"
-				break;
-			case "PHYSICAL ADDRESS 4":
-				return "address4"
-				break;
-			case "LOCATION":
-				return "location"
-				break;
-			default:
-				return paramName
-		}
-	}
-
-
-
-	
-    private java.sql.Date getDate(String dateString){
-        Date runDate = DATE_FORMATTER_DESC.parse(dateString)
-        return new java.sql.Date(runDate.getTime());
-    }
-
-    private java.sql.Date getDate2(String dateString){
-        Date runDate = DATE_FORMATTER.parse(dateString)
-        return new java.sql.Date(runDate.getTime());
-    }
-
-    private java.sql.Date getAppServerDate() {
-        Date runDate = new Date();
-        return new java.sql.Date(runDate.getTime());
-    }
-
-    private java.sql.Date getAppServerDateString() {
-        Date runDate = new Date();
-        String dateString = DATE_FORMATTER.format(runDate);
-        return dateString;
-    }
-
-    // test for cif normalization log
-//    @POST
-//    @Produces(MediaType.APPLICATION_JSON)
-//    @Path("/logCifNormalization")
-//    public Response logCifNormalization(@Context UriInfo allUri, String postRequestBody) {
-//        Gson gson = new Gson()
-//
-//        String result="";
-//        Map returnMap = new HashMap();
-//
-//        try {
-//            def cifNormalizationMap = ["oldCifNumber":"CIFNUM-01",
-//                                       "oldCifName":"O-CIFNAME",
-//                                       "newCifNumber":"CIFNUM-02",
-//                                       "newCifName":"N-CIFNAME",
-//                                       "oldMainCifNumber":"MCIFNUM-01",
-//                                       "oldMainCifName":"O-MAINCIFNAME",
-//                                       "newMainCifNumber":"MCIFNUM-02",
-//                                       "newMainCifName":"N-MAINCIFNAME"]
-//
-//            cifNormalizationLogService.saveCifNormalizationLog(cifNormalizationMap, new Date(), BigDecimal.ONE, BigDecimal.TEN);
-//
-//            cifNormalizationLogService.createLogFile();
-//
-//        } catch(Exception e) {
-//
-//            Map errorDetails = new HashMap();
-//
-//            e.printStackTrace();
-//
-//            errorDetails.put("code", e.getMessage());
-//            errorDetails.put("description", e.toString());
-//
-//            returnMap.put("status", "error");
-//            returnMap.put("error", e.getMessage());
-//        }
-//
-//        // format return data as json
-//        result = gson.toJson(returnMap);
-//
-//        return Response.status(200).entity(result).build();
-//    }
-
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/cloneLnappf")
-	public Response cloneLnappf(@Context UriInfo allUri) {
-		println "\n--- START: Cloning LNAPPF, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		Gson gson = new Gson();
-
-		String result="";
-		Map returnMap = new HashMap();
-		Map jsonParams = new HashMap<String, String>();
-
-		// get all query parameters
-		MultivaluedMap<String, String> mpAllQueParams = allUri.getQueryParameters();
-
-		try {
-			//test
-
-			def selfTimer = 0;
-			def tryConn = true;
-			System.out.println("Connecting to SIBS...");
-			//Log.debug("Connecting to SIBS...");
-			while(tryConn == true){
-				try{
-
-
-					if(selfTimer >= 30) //Terminator
-						tryConn = false;
-
-					if(selfTimer > 1){
-
-						timerStarts = 1000
-						while(timerStarts != 60000){
-
-							Thread.sleep(1000); //sleep for 1 second
-							timerStarts += 1000;
-
-
-
-						}
-
-					}
-
-					facilityReferenceNormalization.executeFacilityReferenceNormalization();
-
-					tryConn = false;
-					sibsReq = false;
-					sibsRecon = false;
-
-					println "\n--- END (SUCCESS) : Cloning LNAPPF, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-					returnMap.put("success", true);
-					returnMap.put("name", "Clone LNAPPF");
-
-				}catch(Exception e) {
-
-
-
-					//											if(e.toString().toLowerCase().contains("unable to connect to sibs")){
-					def states = sibsExtractionJob.checkConnection();
-					if(states == false){
-						sibsReq = true;
-						sibsRecon = true;
-						println ("count " + selfTimer)
-						if(tryConn == false){
-							sibsReq = false;
-							sibsRecon = false;
-							e.printStackTrace();
-
-							println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes) : Cloning LNAPPF, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-							returnMap.put("sibsretry", true);
-							returnMap.put("name", "Clone LNAPPF");
-							//												println "\n--- CANNOT CONNECT TO SIBS (PLEASE TRY AFTER 15 Minutes):" + DateUtil.convertToTimeString(new Date()) + "---"
-							//												return Response.status(200).entity(gson.toJson([sibsretry : true,name:'Extract SIBS GL Accounts'])).build();
-
-
-						}
-
-
-
-						System.out.println("Error Message Start : " + e + " : Error Message End");
-						selfTimer++;
-						System.out.println("Reconnecting to SIBS...");
-						//				   Log.debug("Reconnecting to SIBS...");
-
-					}else{
-						sibsReq = false;
-						sibsRecon = false;
-						e.printStackTrace();
-						throw new IllegalArgumentException(e.printStackTrace());
-					}
-
-				}
-
-			}
-			//test end
-
-
-
-		} catch(Exception e) {
-			e.printStackTrace();
-			println "\n--- END (FAILED) : Cloning LNAPPF, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			returnMap.put("success", false);
-		}
-
-		// format return data as json
-		result = gson.toJson(returnMap);
-
-		return Response.status(200).entity(result).build();
-	}
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/getAllLnappf")
-    public Response getAllLnappf(@Context UriInfo allUri) {
-        Gson gson = new Gson();
-
-        String result="";
-        Map returnMap = new HashMap();
-        Map jsonParams = new HashMap<String, String>();
-
-        // get all query parameters
-        MultivaluedMap<String, String> mpAllQueParams = allUri.getQueryParameters();
-
-        try {
-            try{
-                def lnappfEntries = facilityReferenceNormalization.getAllLnappfEntries();
-
-                returnMap.put("response", lnappfEntries)
-                returnMap.put("success", true);
-            }catch (Exception e){
-                println "ERROR: "+ e.printStackTrace();
-                returnMap.put("success", false);
-            }
-        } catch(Exception e) {
-            e.printStackTrace();
-
-            returnMap.put("success", false);
-        }
-
-        // format return data as json
-        result = gson.toJson(returnMap);
-
-        return Response.status(200).entity(result).build();
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/purgeSecEmployeeAudit")
-    public Response purgeSecEmployeeAudit(@Context UriInfo allUri) {
-        println "\n--- START: Purge SEC_EMPLOYEE_AUDIT, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        try {
-            purgeSecEmloyeeAuditJob.execute();
-            println "\n--- END (SUCCESS): Purge SEC_EMPLOYEE_AUDIT, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success : true,name:'Purge SEC_EMPLOYEE_AUDIT'])).build();
-        } catch(Exception e) {
-            e.printStackTrace();
-            System.err.println("Purge SEC_EMPLOYEE_AUDIT = " + e.getCause()?.getMessage())
-            println "\n--- END (FAILED): Purge SEC_EMPLOYEE_AUDIT, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success : false])).build();
-        }
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/updateAllocationUnitCode")
-    public Response updateAllocationUnitCode(@Context UriInfo allUri) {
-
-		String response = "true";
-		boolean sibsretry = false;
-        println "\n--- START: Update Allocation Unit Code, TIME: " + DateUtil.convertToTimeString(new Date()) + " ---\n"
-
-        Gson gson = new Gson();
-
-        Map jsonParams = new HashMap<String, String>();
-
-        // get all query parameters
-        MultivaluedMap<String, String> mpAllQueParams = allUri.getQueryParameters();
-
-        for(String key : mpAllQueParams.keySet()) {
-
-            // if there are multiple instances of the same param, we only use the first one
-            jsonParams.put(key, mpAllQueParams.getFirst(key).toString());
-        }
-
-        try {
-            // This param is for TESTING only
-            // Acts as a filter if we do not want to update all records at the same time
-            String cifNumber = jsonParams.get("cifNumber")
-
-            response = allocationUnitCodeService.executeUpdate(cifNumber);
-			
-        } catch(IllegalArgumentException e){
-			e.printStackTrace();
-			if("UNABLE TO CONNECT TO SIBS".equalsIgnoreCase(e.getMessage())){
-				sibsretry = true;
-			}			
-			response = "false";
-        } catch(Exception e) {
-            e.printStackTrace();
-			response = "false";			
-        }
-		
-		if(response.equalsIgnoreCase("true")) {
-			println "\n--- END (SUCCESS) : Update Allocation Unit Code, TIME: " + DateUtil.convertToTimeString(new Date()) + " ---"
-			return Response.status(200).entity(gson.toJson([success : true, name : 'Update Allocation Unit Code'])).build();
-		} else {
-			println "\n--- END (FAILED): Update Allocation Unit Code, TIME: " + DateUtil.convertToTimeString(new Date()) + " ---"
-			return Response.status(200).entity(gson.toJson([success : false, sibsretry : sibsretry, name : 'Update Allocation Unit Code'])).build();
-		}
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/updateTransactionRouting")
-    public Response updateTransactionRouting(@Context UriInfo allUri) {
-        println "\n--- START: Update Transaction Routing, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        Gson gson = new Gson();
-        try {
-            uploadRoutingJob.execute();
-            println "\n--- END (SUCCESS): Update Transaction Routing, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success : true,name:'Update Transaction Routing'])).build();
-        } catch(Exception e) {
-            e.printStackTrace();
-            System.err.println("Update Transaction Routing = " + e.getCause()?.getMessage())
-            println "\n--- END (FAILED): Update Transaction Routing, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-            return Response.status(200).entity(gson.toJson([success : false])).build();
-        }
-    }
-	// ER# 20140909-038 : Start
-	private long toJulianDate(Date date) {
-		String dateStr = date.toString();
-		Calendar cal = Calendar.getInstance();
-		cal.setTime(date);
-		System.out.println(cal.getTime());
-		
-		dateStr="";
-		dateStr = String.valueOf(cal.get(Calendar.YEAR));
-		dateStr = dateStr + String.valueOf(cal.get(Calendar.DAY_OF_YEAR));
-		
-		System.out.println("Julian Date: " + dateStr);
-		
-		long julianDate = Long.parseLong(dateStr);
-		
-		return julianDate;
-	}
-	// ER# 20140909-038 : End
-	
-	
-	// Start IBD-16-0615-01
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/cifPurgingPhase1")
-	public Response cifPurgingPhase1(@Context UriInfo allUri){
-		println "\n--- START CIF Purging Phase1, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		String runDate = (reportDate.substring(6, 10) + reportDate.substring(0, 2) + reportDate.substring(3, 5))
-		String runDate2 = (reportDate.substring(6, 10) + "-" + reportDate.substring(0, 2) + "-" + reportDate.substring(3, 5))
-		String masterDate = DATE_FORMATTER_DESC.format(new Date())
-		println "masterDate:"+masterDate
-		println runDate2
-		Gson gson = new Gson();
-		try{
-			cifPurgingJob.dropTables();
-			cifPurgingJob.duplicateDB();
-			cifPurgingJob.deleteTfcfaccs();
-			cifPurgingGeneratorJob.setIsPurged(1);
-			cifPurgingJob.executePhase1(runDate,runDate2);
-			cifPurgingJob.updateAccountPurgingDetail(masterDate,runDate2);
-			
-			println "\n--- END (SUCCESS): CIF Purging Phase1, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'CIF Purging'])).build();
-	   }catch(Exception e){
-			System.err.println("CIF PURGING: " + e);
-			println "\n--- END (FAILED): CIF Purging Phase1, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-	}
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/cifPurgingPhase2")
-	public Response cifPurgingPhase2(@Context UriInfo allUri){
-		println "\n--- START CIF  Purging Phase2, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		println (reportDate.substring(6, 10) + reportDate.substring(0, 2) + reportDate.substring(3, 5))
-		String appDate = (reportDate.substring(6, 10) + reportDate.substring(0, 2) + reportDate.substring(3, 5))
-		println appDate
-		Gson gson = new Gson();
-		try{
-			cifPurgingJob.executePhase2();
-			
-			println "\n--- END (SUCCESS): CIF Purging Phase2, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'CIF Purging'])).build();
-	   }catch(Exception e){
-			System.err.println("CIF PURGING: " + e);
-			println "\n--- END (FAILED): CIF Purging Phase2, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-	}
-	
-	@GET
-	@Produces(MediaType.APPLICATION_JSON)
-	@Path("/cifPurgingPhase3")
-	public Response cifPurgingPhase3(@Context UriInfo allUri){
-		println "\n--- START CIF  Purging Phase3, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-		String reportDate = parameters?.getFirst(REPORT_DATE)?.toString();
-		println (reportDate.substring(6, 10) + reportDate.substring(0, 2) + reportDate.substring(3, 5))
-		String appDate = (reportDate.substring(6, 10) + reportDate.substring(0, 2) + reportDate.substring(3, 5))
-		println appDate
-		Gson gson = new Gson();
-		try{
-			cifPurgingJob.dropTables();
-			
-			println "\n--- END (SUCCESS): CIF Purging Phase3, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success:true,name:'CIF Purging'])).build();
-	   }catch(Exception e){
-			System.err.println("CIF PURGING: " + e);
-			println "\n--- END (FAILED): CIF Purging Phase3, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-			return Response.status(200).entity(gson.toJson([success : false])).build();
-	   }
-	}
-	
-	// End IBD-16-0615-01
-        
-    @GET
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/rerouteTradeServiceJob")
-    public Response rerouteTradeServiceJob(@Context UriInfo allUri){
-	println "\n--- START: Reroute Trade Service Job, TIME:" + DateUtil.convertToTimeString(new Date()) + "---"
-        
-		MultivaluedMap<String, String> parameters = allUri.getQueryParameters();
-	
-		println "Size: " + parameters.size();
-		for (Map.Entry<String, String> entry : parameters.entrySet()) {
-			println  "Key : " + entry.getKey();
-			println "Value : " + entry.getValue();
-		}
-        String documentNumber = parameters?.getFirst("docNumber")?.toString();
-        String targetUser = parameters?.getFirst("newApprover")?.toString();
-		String p_message = "";
-		
-        Gson gson = new Gson();
-        Assert.notNull(parameters?.getFirst("docNumber")?.toString(),"Document Number must be provided!")
-        Assert.notNull(parameters?.getFirst("newApprover")?.toString(),"Target User must be provided!")
-        
-        try{		
-            println "Document Number : " + documentNumber;
-            println "Target User : " + targetUser;
-            p_message = rerouteTradeServiceJob.execute(documentNumber,targetUser);
-            println "\n--- END (SUCCESS): Reroute TradeService JOB, TIME:" + DateUtil.convertToTimeString(new Date()) + " ---"
-//            return Response.status(200).entity(gson.toJson([success : true, name:'Rereoute Trade Service Job'])).build();
-			return Response.status(200).entity(gson.toJson([success : true,name: p_message.startsWith("2") ? p_message :'Rereoute Trade Service Job'])).build();
-	   }catch(Exception e){
-            System.err.println("rerouteTradeServiceJob: "+ e.getMessage())
-            println "\n--- END (FAILED): Reroute TradeService JOB, TIME:" + DateUtil.convertToTimeString(new Date()) + " ---"
-//            return Response.status(200).entity(gson.toJson([success : false])).build();
-			return Response.status(200).entity(gson.toJson([success : false,name: '[DBException] ', p_message : e.getMessage()])).build();
-	   }
-    }
-}
diff --git a/tfs-core/src/main/groovy/com/ucpb/tfs2/infrastructure/rest/FacilityRestServices.groovy b/tfs-core/src/main/groovy/com/ucpb/tfs2/infrastructure/rest/FacilityRestServices.groovy
deleted file mode 100644
--- a/tfs-core/src/main/groovy/com/ucpb/tfs2/infrastructure/rest/FacilityRestServices.groovy
+++ /dev/null
@@ -1,179 +0,0 @@
-package com.ucpb.tfs2.infrastructure.rest
-
-import org.springframework.stereotype.Component
-import javax.ws.rs.Path
-import javax.ws.rs.POST
-import javax.ws.rs.Produces
-import javax.ws.rs.core.MediaType
-import javax.ws.rs.core.Response
-import javax.ws.rs.core.Context
-import javax.ws.rs.core.UriInfo
-import com.google.gson.Gson
-import org.springframework.util.Assert
-
-import com.ucpb.tfs.domain.service.TradeServiceRepository
-import org.springframework.beans.factory.annotation.Autowired
-import com.ucpb.tfs.domain.service.TradeService
-
-import com.ucpb.tfs.interfaces.services.FacilityService
-import com.ucpb.tfs.interfaces.domain.Facility
-import org.apache.commons.lang.StringUtils
-import com.ucpb.tfs.interfaces.services.RatesService
-
-import com.ucpb.tfs.domain.instruction.ServiceInstructionRepository
-import com.ucpb.tfs.domain.instruction.ServiceInstructionId
-import com.ucpb.tfs.domain.instruction.ServiceInstruction
-
-import com.ucpb.tfs.domain.service.enumTypes.ServiceType
-import com.ucpb.tfs.domain.product.TradeProduct
-import com.ucpb.tfs.domain.product.TradeProductRepository
-
-/**
- */
-@Component
-@Path("/facility")
-class FacilityRestServices {
-
-    private static final GSON = new Gson();
-
-    private static final Currency PHP = Currency.getInstance("PHP");
-    private static final int RATE_PRECISION = 6
-    private static final String CRAM_FLAG = "cramFlag"
-    private static final String FACILITY_BALANCE = "FACILITY_BALANCE"
-    private static final String CURRENCY = "CURRENCY"
-    private static final String REQUEST_STATUS = "REQUEST_STATUS"
-
-    @Autowired
-    private TradeServiceRepository tradeServiceRepository;
-
-    @Autowired
-    private ServiceInstructionRepository serviceInstructionRepository;
-
-    @Autowired
-    private FacilityService facilityService;
-
-    @Autowired
-    private RatesService ratesService;
-	
-	@Autowired
-	private TradeProductRepository tradeProductRepository
-
-    @POST
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/inquireBalance")
-    public Response inquireFacilityBalanceQuery(@Context UriInfo allUri, String postRequestBody){
-        Map formDetails = GSON.fromJson(postRequestBody, Map.class);
-        Assert.notNull(formDetails["etsNumber"],"ETS Number must not be null!");
-
-        ServiceInstruction ets = serviceInstructionRepository.load(new ServiceInstructionId(formDetails["etsNumber"]));
-
-        Facility facility = new Facility();
-        facility.setCifNumber(ets.getDetails().get("mainCifNumber"));
-        facility.setFacilityType(ets.getDetails().get("facilityType"));
-        facility.setFacilityId(Integer.valueOf(ets.getDetails().get("facilityId")));
-
-        Long transactionSequenceNumber = facilityService.insertFacilityBalanceQuery(facility);
-
-        return Response.status(200).entity(GSON.toJson([status : "success", transactionSequenceNumber : transactionSequenceNumber])).build();
-    }
-    
-    @POST
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/insertBalance")
-    public Response insertFacilityBalanceQuery(@Context UriInfo allUri, String postRequestBody){
-    	Map formDetails = GSON.fromJson(postRequestBody, Map.class);
-    	Assert.notNull(formDetails["facilityId"],"Facility ID must not be null!");
-    	Assert.notNull(formDetails["facilityType"],"Facility Type must not be null!");
-    	Assert.notNull(formDetails["cifNumber"],"CIF Number must not be null!");
-    	
-    	Facility facility = new Facility();
-    	facility.setCifNumber(formDetails["cifNumber"]);
-    	facility.setFacilityType(formDetails["facilityType"]);
-    	facility.setFacilityId(Integer.valueOf(formDetails["facilityId"]));
-    	
-    	Long transactionSequenceNumber = facilityService.insertFacilityBalanceQuery(facility);
-		
-		println "transactionSequenceNumber = " + transactionSequenceNumber
-    	
-    	return Response.status(200).entity(GSON.toJson([status : "success", transactionSequenceNumber : transactionSequenceNumber])).build();
-    }
-
-    @POST
-    @Produces(MediaType.APPLICATION_JSON)
-    @Path("/getBalance")
-    public Response getFacilityBalance(@Context UriInfo allUri, String postRequestBody){
-        Map formDetails = GSON.fromJson(postRequestBody, Map.class);
-        Assert.notNull(formDetails["transactionSequenceNumber"],"Transaction Sequence Number must not be null!");
-        Assert.notNull(formDetails["etsNumber"],"ETS Number must not be null!");
-
-        println "formDetails[\"transactionSequenceNumber\"]:"+formDetails["transactionSequenceNumber"]
-        Map<String,Object> facility = facilityService.getFacilityBalance(new BigDecimal(formDetails["transactionSequenceNumber"]).longValue());
-        String status
-        BigDecimal facilityBalance;
-        boolean isFacilityBalanceSufficient = false;
-        boolean hasCramApproval = false;
-		println "REQUEST_STATUS: " + facility.get(REQUEST_STATUS)
-        if(StringUtils.isBlank(facility.get(REQUEST_STATUS))){
-            status = "pending";
-        }else if ("Y".equals(facility.get(REQUEST_STATUS))){
-            status = "success";
-            facilityBalance = facility.get(FACILITY_BALANCE);
-            String facilityCurrency = StringUtils.trim(facility.get(CURRENCY));
-            TradeService tradeService = tradeServiceRepository.load(new ServiceInstructionId(formDetails["etsNumber"]));
-            ServiceInstruction serviceInstruction = serviceInstructionRepository.load(new ServiceInstructionId(formDetails["etsNumber"]));
-            hasCramApproval = "true".equalsIgnoreCase(tradeService.getDetails().get("cramFlag"));
-			
-			Currency productCurrency = null
-			BigDecimal productAmount = BigDecimal.ZERO
-			if (tradeService.getServiceType().equals(ServiceType.ADJUSTMENT)){
-				println "ADJUSTMENT!!!!!!!!"
-				TradeProduct tradeProduct = tradeProductRepository.load(tradeService.getDocumentNumber())
-				productCurrency = tradeProduct.getCurrency()
-				productAmount = tradeProduct.getAmount()
-			} else {
-				productCurrency = tradeService.getProductChargeCurrency()
-				productAmount = tradeService.getProductChargeAmount()
-			}
-            if (productCurrency?.getCurrencyCode()?.equals(facilityCurrency)){
-               isFacilityBalanceSufficient = productAmount?.compareTo(facilityBalance) <= 0;
-            }else{
-                BigDecimal rate = ratesService.getConversionRateByType(productCurrency?.getCurrencyCode(),facilityCurrency,3);
-                isFacilityBalanceSufficient = (rate.multiply(productAmount).setScale(2, BigDecimal.ROUND_HALF_UP)).compareTo(facilityBalance) <= 0;
-            }
-            tradeService.getDetails().put("isOverAvailed",!isFacilityBalanceSufficient);
-            serviceInstruction.getDetails().put("isOverAvailed",!isFacilityBalanceSufficient);
-//            tradeService.getDetails().put("facilityBalance",)
-            tradeServiceRepository.saveOrUpdate(tradeService);
-            serviceInstructionRepository.merge(serviceInstruction);
-        }else{
-			status = "rejected";
-        }
-		
-        def result = [ status : status, balance : facilityBalance?.toPlainString(), error : facility.get("ERROR_MESSAGE"),
-                isBalanceSufficient : isFacilityBalanceSufficient, hasCramApproval : hasCramApproval]
-
-        return Response.status(200).entity(GSON.toJson(result)).build();
-    }
-
-
-    private BigDecimal getConversionRate(TradeService tradeService){
-        Currency tradeServiceCurrency = tradeService.getProductChargeCurrency();
-        String conversionRate;
-        BigDecimal resultRate = null;
-        if(!PHP.equals(tradeServiceCurrency)){
-            conversionRate = (String)tradeService.getDetails().get(tradeServiceCurrency.toString() + "-PHP");
-            if(StringUtils.isNumeric(conversionRate)){
-                resultRate = new BigDecimal(conversionRate).setScale(RATE_PRECISION,BigDecimal.ROUND_HALF_UP);
-            }else{
-                conversionRate = (String)tradeService.getDetails().get(tradeServiceCurrency.toString() + "-PHP_text_pass_on_rate");
-                if(!StringUtils.isEmpty(conversionRate)){
-                    resultRate = new BigDecimal(conversionRate).setScale(RATE_PRECISION,BigDecimal.ROUND_HALF_UP);
-                }
-            }
-
-        }
-        return resultRate;
-    }
-
-
-}
diff --git a/tfs-core/src/main/resources/tfs-backup.properties b/tfs-core/src/main/resources/tfs-backup.properties
new file mode 100644
--- /dev/null
+++ b/tfs-core/src/main/resources/tfs-backup.properties
@@ -0,0 +1,242 @@
+# RMI port
+tfs.rmi.port=1099
+
+# hibernate settings
+hibernate.hbm2ddl.auto=update
+hibernate.show_sql=true
+
+hibernate.connection.pool_size=10
+
+
+# Derby settings
+# hibernate.dialect=org.hibernate.dialect.DerbyTenSevenDialect
+# tfs.jdbc.driverClassName=org.apache.derby.jdbc.ClientDriver
+# tfs.jdbc.url=jdbc:derby://localhost:1527/tfsdb;create=true
+# tfs.jdbc.username=tfs
+# tfs.jdbc.password=tfs
+# tfs.hibernate.bootstrap=/bootstrap/databootstrap.sql
+
+# interface.jdbc.driverClassName=org.apache.derby.jdbc.ClientDriver
+# interface.jdbc.url=jdbc:derby://localhost:1527/silverlakedb;create=true
+# interface.jdbc.username=tfs
+# interface.jdbc.password=tfs
+
+# DB2 settings
+# # # # hibernate.dialect=org.hibernate.dialect.DB2Dialect
+# # # # tfs.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+# # # # tfs.jdbc.url=jdbc:db2://10.80.80.165:50000/TFS2212
+# # # # tfs.jdbc.username=tfsdb2c
+# # # # tfs.jdbc.password=tfs*0*dssZvuLK
+# # # # tfs.hibernate.bootstrap=/bootstrap/databootstrap-db2.sql
+
+# # # # interface.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+# # # # interface.jdbc.url=jdbc:db2://10.80.80.165:50000/TFS2212
+# # # # interface.jdbc.username=tfsdb2c
+# # # # interface.jdbc.password=tfs*0*dssZvuLK
+hibernate.dialect=org.hibernate.dialect.DB2Dialect
+tfs.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+tfs.jdbc.url=jdbc:db2://localhost:25000/TFS_OLD
+tfs.jdbc.username=tfsdb2c
+tfs.jdbc.password=Jaylomar_28
+tfs.hibernate.bootstrap=/bootstrap/databootstrap-db2.sql
+
+interface.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+interface.jdbc.url=jdbc:db2://localhost:25000/TFS_OLD
+interface.jdbc.username=tfsdb2c
+interface.jdbc.password=Jaylomar_28
+
+#SIBS - casa gateway configurations
+casa.gateway.host=130.130.2.225
+#casa.gateway.port=36115
+casa.gateway.port=31115
+casa.gateway.so.timeout=120000
+casa.gateway.request.timeout=65000
+casa.gateway.reply.timeout=65000
+casa.message.encoding=CP1047
+casa.userId=TFSCASA
+casa.password=ipc123$
+#interface db configurations
+#interface.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+#interface.jdbc.url=jdbc:db2://130.130.0.78:50000/UCICBSD1
+#interface.jdbc.username=tfsdb2c
+#interface.jdbc.password=tfsdb2c
+
+#ldap.url=ldap://192.168.1.101:389
+#ldap.base=dc=ucpb,dc=com
+#ldap.userdn=CN=administrator,CN=Users,DC=ucpb,DC=com
+#ldap.password=password$1
+#ldap.domain=ucpb.com
+
+#tfs.authenticationProvider=adAuth
+
+# TSD
+ldap.url=ldap://ADPW08IBL01.UCPB8.COM:389
+ldap.base=dc=ucpb8,dc=com
+ldap.userdn=CN=Letty C. Mejos,OU=TFS Test ID,DC=UCPB8,DC=COM
+ldap.password=P@ssw0rd1
+ldap.domain=ucpb8.com
+
+# BRANCH
+ldap.branch.url=ldap://ADPW08IBL03.BRANCH.UCPB8.COM:389
+ldap.branch.url=ldap://ADPW08IBL04.BRANCH.UCPB8.COM:389
+ldap.branch.url=ldap://ADPW08IBL05.BRANCH.UCPB8.COM:389
+ldap.branch.url=ldap://ADPW08IBL06.BRANCH.UCPB8.COM:389
+ldap.branch.base=dc=branch,dc=ucpb8,dc=com
+ldap.branch.userdn=CN=TFS Test Branch ID,CN=Users,DC=BRANCH,DC=UCPB8,DC=COM
+ldap.branch.password=P@ssw0rd2
+ldap.branch.domain=branch.ucpb8.com
+
+
+
+# TEST BRANCH
+#ldap.url=ldap://ADPW08IBL03.BRANCH.UCPB8.COM:389
+#ldap.base=dc=branch,dc=ucpb8,dc=com
+#ldap.userdn=CN=tfstestbranchid,DC=BRANCH,DC=UCPB8,DC=COM
+#ldap.password=P@ssw0rd1
+#ldap.domain=branch.ucpb8.com
+
+
+#amla properties
+#amla.poll.frequency=0/6 * * * * ?
+#amla.poll.frequency=0 15 23 ? * *
+#amla.poll.frequency=0/6 * * * * ?
+amla.poll.frequency=0 0 12 * * ?
+amla.max.rows=2000
+amla.output.directory=src/test/resources/amla/processed
+amla.account.output.directory=src/test/resources/amla/processed
+amla.transaction.output.directory=src/test/resources/amla/processed
+amla.customeraccount.output.directory=src/test/resources/amla/processed
+amla.report.delimiter=|
+
+
+
+#tfs.db.username=tfs
+#tfs.db.password=tfs
+#tfs.db.url=jdbc:oracle:thin:@10.133.154.59:1521:DPRMODS
+#tfs.db.driver=org.apache.derby.jdbc.ClientDriver
+
+#tfs.jdbc.url=jdbc:derby://localhost:1527/tfsdb;create=true
+
+#swift message header configurations
+swift.app.identifier=F
+swift.service.identifier=01
+swift.lt.identifier=UCPBPHM0AXXX
+swift.session.number=0000
+swift.sequence.number=000000
+swift.io.identifier=I
+swift.message.priority=000
+swift.delivery.monitoring=0000
+swift.obsolence.period=N
+
+#swift output file directory
+#swift.output.directory=src/test/resources
+swift.output.directory=/opt/tfs/SWIFT/outgoing/OutgoingToSwift
+swift.output.directory.backup=/opt/tfs/SWIFT/outgoing/OutgoingToSwift_backup
+swift.output.validate=false
+#swift.input.directory.invalid=src/test/resources/invalid
+swift.input.directory.invalid=/opt/tfs/SWIFT/incoming/Invalid
+swift.input.directory.valid=/opt/tfs/SWIFT/incoming/Valid
+#swift.input.directory=src/test/resources/input
+swift.input.directory=/opt/tfs/SWIFT/incoming/IncomingFromSwift
+#5 minutes -> 5 Seconds
+swift.input.poll.frequency=5000
+swift.validation.source=/swift/schemas/swift-master.xsd
+swift.transformation.source=/swift/formatter/swift-format.xsl
+swift.schematron.source=/swift/schematron/compiled/swift-master.xsl
+
+#amla transaction codes
+amla.lc.open=LCOPN
+amla.lc.adjustment=LCOPN
+amla.lc.amendment=LCAMD
+amla.lc.nego=LCNEG
+amla.lc.cancel=LCOPN
+amla.nonlc.nego=NONEG
+amla.duties=CDUTF
+amla.export.nego=EXNEG
+amla.export.settlement=EXSET
+amla.export.advising=EXADV
+amla.export.adv.amendment=EXAMD
+amla.nonlc.settlement=NOSET
+amla.ip=LCOPN
+amla.md=LCOPN
+amla.refund=LCOPN
+amla.corres.charge=LCOPN
+
+
+#QUARTZ - job CONFIGURATIONS#
+# # # # jdbc.jobstore=org.quartz.impl.jdbcjobstore.JobStoreTX
+# # # # quartz.table.prefix=QRTZ_
+# # # # jdbc.driver=com.ibm.db2.jcc.DB2Driver
+# # # # jdbc.driver.delegate=org.quartz.impl.jdbcjobstore.DB2v8Delegate
+# # # # quartz.database.url=jdbc:db2://130.130.2.164:50000/TFSIPCD6
+# # # # quartz.database.user=tfsdb2c
+# # # # quartz.database.password=abc123
+# # # # quartz.database.max.conn=5
+# # # # quartz.isclustered=false
+jdbc.jobstore=org.quartz.impl.jdbcjobstore.JobStoreTX
+quartz.table.prefix=QRTZ_
+jdbc.driver=com.ibm.db2.jcc.DB2Driver
+jdbc.driver.delegate=org.quartz.impl.jdbcjobstore.DB2v8Delegate
+quartz.database.url=jdbc:db2://localhost:25000/TFSDB2S
+quartz.database.user=tfsdb2c
+quartz.database.password=Jaylomar_28
+quartz.database.max.conn=5
+quartz.isclustered=false
+
+
+#job schedules
+#tradeservice.report.trigger=0 30 * * * ?
+#tradeservice.report.trigger=0 0 21 * * ?
+tradeservice.report.trigger=0 0 0 1 1 ? 2099
+
+#trade service revert
+#tradeservice.revert.trigger=0 30 * * * ?
+tradeservice.revert.trigger=0 0 12 * * ?
+
+#cicls output directory
+#cicls.output.directory=outputReports
+cicls.directory=/opt/tfs/CICLS_FILES
+
+
+#general ledger output directory
+#gl.output.directory=outputReports
+gl.movement.directory=/opt/tfs/INTERFACE_FILES
+gl.movement.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+
+expired.amla.directory=/opt/tfs/INTERFACE_FILES/
+cif.purging.directory=/opt/tfs/INTERFACE_FILES/TFCFACCS.csv
+
+#amla output directories
+amla.directory=/opt/tfs/INTERFACE_FILES
+amla.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+
+#datawarehouse output directories
+dw.directory=/opt/tfs/INTERFACE_FILESsaan description
+dw.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+dw.batch.directory=/opt/tfs/INTERFACE_FILESsaan description
+
+batch.rma.directory=/opt/tfs/SWIFT/RMAFile
+batch.bic.directory=/opt/tfs/SWIFT/BICFile/
+batch.bic.filename.all=FI.txt
+batch.bic.filename.delta=FIDELTA.txt
+
+batch.rma.backup.directory=/opt/tfs/SWIFT/backup/RMA/
+batch.bic.backup.directory=/opt/tfs/SWIFT/backup/BIC/
+#datawarehouse output directories
+#dw.movement.directory=outputReports
+#dw.allocation.directory=outputReports
+#dw.master.directory=outputReports
+#dw.para1.directory=outputReports
+#dw.gl.param.directory=outputReports
+#dw.cbr.param.directory=outputReports
+#dw.report.directory=outputReports
+tfs.check.multiple.login=true
+
+mail.smtp.auth=true
+mail.smtp.host=EXPNLBMLA.ucpb8.com
+mail.smtp.socketFactory.port=587
+mail.smtp.from=tfsdevteam@ucpb.com
+mail.smtp.username=tfsdevteam
+mail.smtp.password=pass@word9
+mail.smtp.starttls.enable=true
+mail.smtp.ssl.trust=EXPNLBMLA.ucpb8.com
diff --git a/tfs-core/src/main/resources/tfs.properties b/tfs-core/src/main/resources/tfs.properties
new file mode 100644
--- /dev/null
+++ b/tfs-core/src/main/resources/tfs.properties
@@ -0,0 +1,362 @@
+# RMI port
+tfs.rmi.port=1099
+
+# hibernate settings
+hibernate.hbm2ddl.auto=update
+hibernate.show_sql=true
+
+hibernate.connection.pool_size=10
+
+
+# Derby settings
+# hibernate.dialect=org.hibernate.dialect.DerbyTenSevenDialect
+# tfs.jdbc.driverClassName=org.apache.derby.jdbc.ClientDriver
+# tfs.jdbc.url=jdbc:derby://localhost:1527/tfsdb;create=true
+# tfs.jdbc.username=tfs
+# tfs.jdbc.password=tfs
+# tfs.hibernate.bootstrap=/bootstrap/databootstrap.sql
+
+# interface.jdbc.driverClassName=org.apache.derby.jdbc.ClientDriver
+# interface.jdbc.url=jdbc:derby://localhost:1527/silverlakedb;create=true
+# interface.jdbc.username=tfs
+# interface.jdbc.password=tfs
+
+# DB2 settings
+hibernate.dialect=org.hibernate.dialect.DB2Dialect
+tfs.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+tfs.hibernate.bootstrap=/bootstrap/databootstrap-db2.sql
+tfs.jdbc.autoReconnect=true
+
+
+# DEV DB
+tfs.jdbc.url=jdbc:db2://10.80.80.165:50000/TFSUAT
+# tfs.jdbc.url=jdbc:db2://10.80.80.165:50000/TFSSIT
+# tfs.jdbc.url=jdbc:db2://172.22.0.92:50000/TFSSIT
+tfs.jdbc.username=tfsdb2c
+tfs.jdbc.password=tfs*0*dssZvuLK
+# DEV DB
+quartz.database.url=jdbc:db2://10.80.80.165:50000/TFSUAT   
+# quartz.database.url=jdbc:db2://10.80.80.165:50000/TFSUAT   
+quartz.database.user=tfsdb2c
+quartz.database.password=tfs*0*dssZvuLK
+
+# DB2 settings
+# Prod properties # tfs.jdbc.url=jdbc:db2://130.130.0.78:50000/TFSIPCD3
+
+
+interface.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+# Prod properties # interface.jdbc.url=jdbc:db2://130.130.0.78:50000/UCICBSD1
+# interface.jdbc.url=jdbc:db2://10.80.80.165:50000/UCICBSD1
+# # # interface.jdbc.url=jdbc:db2://10.80.80.165:50000/TFSUAT
+interface.jdbc.url=jdbc:db2://10.80.80.165:50000/TFSUAT
+interface.jdbc.username=tfsdb2c
+# Prod properties # interface.jdbc.password=tfsdb2c
+interface.jdbc.password=tfs*0*dssZvuLK
+# interface.jdbc.password=abc123
+interface.jdbc.autoReconnect=true
+
+#SIBS - casa gateway configurations
+# casa.gateway.host=130.130.2.225
+casa.gateway.host=130.130.2.225
+# casa.gateway.host=172.22.0.170
+# U6
+casa.gateway.port=36115	
+# U2
+# casa.gateway.port=32115
+# U1
+# casa.gateway.port=31115
+# unavailable port
+# casa.gateway.port=99999
+# casa.gateway.so.timeout=1
+# casa.gateway.request.timeout=1
+# casa.gateway.reply.timeout=1
+casa.gateway.so.timeout=120000
+casa.gateway.request.timeout=120000
+casa.gateway.reply.timeout=120000
+casa.message.encoding=CP1047
+casa.userId=TFSCASA
+casa.password=ipc123$
+
+casa.accounts.input.directory=/opt/tfs/INTERFACE_FILES/CASA_ACCOUNTS
+casa.accounts.backup.directory=/opt/tfs/INTERFACE_FILES/CASA_ACCOUNTS_BACKUP
+#interface db configurations
+#interface.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+#interface.jdbc.url=jdbc:db2://130.130.0.78:50000/UCICBSD1
+#interface.jdbc.username=tfsdb2c
+#interface.jdbc.password=tfsdb2c
+
+#ldap.url=ldap://192.168.1.101:389
+#ldap.base=dc=ucpb,dc=com
+#ldap.userdn=CN=administrator,CN=Users,DC=ucpb,DC=com
+#ldap.password=password$1
+#ldap.domain=ucpb.com
+
+#tfs.authenticationProvider=adAuth
+
+# TSD
+ldap.url=ldap://ADPW08IBL01.UCPB8.COM:389
+ldap.base=dc=ucpb8,dc=com
+# Prod properties # ldap.userdn=CN=tsdtst6,CN=TFS Test ID,DC=UCPB8,DC=COM
+ldap.userdn=CN=TFSPSU,OU=Service Accounts,OU=Company,DC=UCPB8,DC=COM
+# ldap.password=g2t0G1L2nnz@VxfCKAUtd02jrvvQse
+# ldap.password=TwidOFjLkYSBpiU@24hq0oXOIHH4Rz
+ldap.password=lhCmlHTh2EmIksRjJf32g0ep8YGyh@
+ldap.domain=ucpb8.com
+ldap.directory=UCPB8
+
+# ldap.url=ldap://ADPW08IBL01.UCPB8.COM:389
+# ldap.base=dc=ucpb8,dc=com
+# # Prod properties # ldap.userdn=CN=tsdtst6,CN=TFS Test ID,DC=UCPB8,DC=COM
+# ldap.userdn=CN=Letty C. Mejos,OU=TFS Test ID,DC=UCPB8,DC=COM
+# # ldap.password=g2t0G1L2nnz@VxfCKAUtd02jrvvQse
+# # ldap.password=TwidOFjLkYSBpiU@24hq0oXOIHH4Rz
+# ldap.password=Q@WvE6R7Pp2U4ZY8Z0sFKm16iyvOMi
+# ldap.domain=ucpb8.com
+
+# ---Prod properties 
+# ldap.branch.url=ldap://ADPW08IBL01.UCPB8.COM:389
+# ldap.branch.base=dc=ucpb8,dc=com
+# ldap.branch.userdn=UID=TFSYSPRO,DC=UCPB8,DC=COM
+# ldap.branch.password=P@ssw0rd1$
+# ldap.branch.domain=ucpb8.com
+# ---Prod properties 
+
+# BRANCH
+# ldap.branch.url=ldap://ADPW08IBL03.BRANCH.UCPB8.COM:389
+# ldap.branch.url=ldap://ADPW08IBL04.BRANCH.UCPB8.COM:389
+# ldap.branch.url=ldap://ADPW08IBL05.BRANCH.UCPB8.COM:389
+# ldap.branch.url=ldap://ADPW08IBL06.BRANCH.UCPB8.COM:389
+ldap.branch.url=ldap://bepcsw16vm01.branch.ucpb8.com:389
+ldap.branch.base=dc=branch,dc=ucpb8,dc=com
+ldap.branch.userdn=CN=TFSPSU,OU=Service Accounts,OU=Company,DC=BRANCH,DC=UCPB8,DC=COM
+# ldap.branch.password=g2t0G1L2nnz@VxfCKAUtd02jrvvQse	
+ldap.branch.password=lhCmlHTh2EmIksRjJf32g0ep8YGyh@
+ldap.branch.domain=branch.ucpb8.com
+ldap.branch.directory=BRANCH
+
+
+#tfs.authenticationProvider=adAuth
+#
+##TSD
+#ldap.url=ldap://ADPW08IBL02.UCPB8.COM:389
+#ldap.base=dc=ucpb8,dc=com
+#ldap.userdn=CN=TFSPSU,CN=Users,DC=UCPB8,DC=COM
+#ldap.password=psuprod@456
+#ldap.domain=ucpb8.com
+#
+##BRANCH
+#ldap.branch.url=ldap://ADPW08IBL03.BRANCH.UCPB8.COM:389
+#ldap.branch.url=ldap://ADPW08IBL04.BRANCH.UCPB8.COM:389
+#ldap.branch.url=ldap://ADPW08IBL05.BRANCH.UCPB8.COM:389
+#ldap.branch.url=ldap://ADPW08IBL06.BRANCH.UCPB8.COM:389
+#ldap.branch.base=dc=branch,dc=ucpb8,dc=com
+#ldap.branch.userdn=CN=TFSPSU,CN=Users,DC=BRANCH,DC=UCPB8,DC=COM
+#ldap.branch.password=psuprod@456
+#ldap.branch.domain=branch.ucpb8.com
+
+
+
+
+
+
+
+# TEST BRANCH
+#ldap.url=ldap://ADPW08IBL03.BRANCH.UCPB8.COM:389
+#ldap.base=dc=branch,dc=ucpb8,dc=com
+#ldap.userdn=CN=tfstestbranchid,DC=BRANCH,DC=UCPB8,DC=COM
+#ldap.password=P@ssw0rd1
+#ldap.domain=branch.ucpb8.com
+
+
+#amla properties
+#amla.poll.frequency=0/6 * * * * ?
+#amla.poll.frequency=0 15 23 ? * *
+#amla.poll.frequency=0/6 * * * * ?
+amla.poll.frequency=0 0 12 * * ?
+amla.max.rows=2000
+amla.output.directory=src/test/resources/amla/processed
+amla.account.output.directory=src/test/resources/amla/processed
+amla.transaction.output.directory=src/test/resources/amla/processed
+amla.customeraccount.output.directory=src/test/resources/amla/processed
+amla.report.delimiter=|
+
+
+
+#tfs.db.username=tfs
+#tfs.db.password=tfs
+#tfs.db.url=jdbc:oracle:thin:@10.133.154.59:1521:DPRMODS
+#tfs.db.driver=org.apache.derby.jdbc.ClientDriver
+
+#tfs.jdbc.url=jdbc:derby://localhost:1527/tfsdb;create=true
+
+#swift message header configurations
+swift.app.identifier=F
+swift.service.identifier=01
+# swift.lt.identifier=UCPBPHM0AXXX
+# swift.lt.identifier=UCPBPHMMAXXX
+swift.lt.identifier=TLBPHMM0AXXX
+swift.session.number=0000
+swift.sequence.number=000000
+swift.io.identifier=I
+swift.message.priority=000
+swift.delivery.monitoring=0000
+swift.obsolence.period=N
+
+#swift output file directory
+#swift.output.directory=src/test/resources
+swift.output.directory=/opt/tfs/SWIFT/outgoing/OutgoingToSwift
+swift.output.directory.backup=/opt/tfs/SWIFT/outgoing/OutgoingToSwift_backup
+swift.output.validate=false
+#swift.input.directory.invalid=src/test/resources/invalid
+swift.input.directory.invalid=/opt/tfs/SWIFT/incoming/Invalid
+swift.input.directory.valid=/opt/tfs/SWIFT/incoming/Valid
+#swift.input.directory=src/test/resources/input
+swift.input.directory=/opt/tfs/SWIFT/incoming/IncomingFromSwift
+#5 minutes -> 5 Seconds
+swift.input.poll.frequency=5000
+swift.validation.source=/swift/schemas/swift-master.xsd
+swift.transformation.source=/swift/formatter/swift-format.xsl
+swift.schematron.source=/swift/schematron/compiled/swift-master.xsl
+
+#amla transaction codes
+amla.lc.open=LCOPN
+amla.lc.adjustment=LCOPN
+amla.lc.amendment=LCAMD
+amla.lc.nego=LCNEG
+amla.lc.cancel=LCOPN
+amla.nonlc.nego=NONEG
+amla.duties=CDUTF
+amla.export.nego=EXNEG
+amla.export.settlement=EXSET
+amla.export.advising=EXADV
+amla.export.adv.amendment=EXAMD
+amla.nonlc.settlement=NOSET
+amla.ip=LCOPN
+amla.md=LCOPN
+amla.refund=LCOPN
+amla.corres.charge=LCOPN
+
+
+#QUARTZ - job CONFIGURATIONS#
+jdbc.jobstore=org.quartz.impl.jdbcjobstore.JobStoreTX
+quartz.table.prefix=QRTZ_
+jdbc.driver=com.ibm.db2.jcc.DB2Driver
+jdbc.driver.delegate=org.quartz.impl.jdbcjobstore.DB2v8Delegate
+quartz.database.max.conn=5
+quartz.isclustered=false
+
+
+
+#job schedules
+#tradeservice.report.trigger=0 30 * * * ?
+#tradeservice.report.trigger=0 0 21 * * ?
+tradeservice.report.trigger=0 0 0 1 1 ? 2099
+
+#trade service revert
+#tradeservice.revert.trigger=0 30 * * * ?
+tradeservice.revert.trigger=0 0 12 * * ?
+
+#cicls output directory
+#cicls.output.directory=outputReports
+cicls.directory=/opt/tfs/CICLS_FILES
+
+#general ledger output directory
+#gl.output.directory=outputReports
+gl.movement.directory=/opt/tfs/INTERFACE_FILES
+gl.movement.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+
+cif.purging.directory=/opt/tfs/INTERFACE_FILES/TFCFACCS.csv
+
+#amla output directories
+amla.directory=/opt/tfs/INTERFACE_FILES
+amla.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+expired.amla.directory=/opt/tfs/INTERFACE_FILES
+
+#datawarehouse output directories
+dw.directory=/opt/tfs/INTERFACE_FILES
+dw.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+dw.batch.directory=/opt/tfs/BATCH_REPORT_FILES
+
+#datawarehouse output directories
+#dw.movement.directory=outputReports
+#dw.allocation.directory=outputReports
+#dw.master.directory=outputReports
+#dw.para1.directory=outputReports
+#dw.gl.param.directory=outputReports
+#dw.cbr.param.directory=outputReports
+#dw.report.directory=outputReports
+
+batch.rma.directory=/opt/tfs/SWIFT/RMAFile
+batch.bic.directory=/opt/tfs/SWIFT/BICFile/
+
+batch.bic.filename.all=FI.txt
+batch.bic.filename.delta=FIDELTA.txt
+
+batch.rma.backup.directory=/opt/tfs/SWIFT/backup/RMA/
+batch.bic.backup.directory=/opt/tfs/SWIFT/backup/BIC/
+
+
+tfs.check.multiple.login=false
+
+# mail.smtp.auth=true
+# mail.smtp.host=EXPNLBMLA.ucpb8.com
+# mail.smtp.socketFactory.port=587
+# mail.smtp.from=tfsdevteam@ucpb.com
+# mail.smtp.username=tfsdevteam
+# mail.smtp.password=pass@word8
+# mail.smtp.starttls.enable=true
+# mail.smtp.ssl.trust=EXPNLBMLA.ucpb8.com
+# mail.smtp.enableNotification=false
+
+# TEST PROTECTION 25 LBPTRADEFINANCE
+mail.smtp.auth=true
+mail.smtp.host=landbank-com.mail.protection.outlook.com
+mail.smtp.socketFactory.port=25
+# mail.smtp.from=mferrer@landbank.com
+# mail.smtp.from=hrumbaoa@landbank.com
+# mail.smtp.from=tfstest@landbank.com
+mail.smtp.username=tfsdevteam
+mail.smtp.password=password@15
+# mail.smtp.username=tfsdevteam
+# mail.smtp.password=password@15
+mail.smtp.starttls.enable=true
+mail.smtp.ssl.trust=landbank-com.mail.protection.outlook.com
+mail.smtp.enableNotification=false
+# mail.smtp.enableNotification=true
+# mail.smtp.host=smtp.office365.com
+# mail.smtp.socketFactory.port=587
+mail.smtp.from=lbptradefinance@landbank.com
+
+
+#mail.smtp.host=130.130.9.128
+#mail.smtp.host=lbpmail1.corp.landbank.com
+#mail.smtp.host=smtp.office365.com
+# mail.smtp.from=ucpb_trade_finance@ucpb.com
+#mail.smtp.ssl.trust=130.130.9.128
+#mail.smtp.ssl.trust=lbpmail1.corp.landbank.com
+#mail.smtp.ssl.trust=smtp.office365.com
+
+#CIC directories
+cic.file.name=FCN
+cic.file.format=.txt
+cic.directory=/opt/tfs/INTERFACE_FILES/CIC/
+cic.backup.directory=/opt/tfs/INTERFACE_FILES/CIC_Backup/
+
+# Used for purging Accounts
+tfstemp.jdbc.url=jdbc:db2://130.130.2.164:50000/TFSIPCD4
+#tfstemp.jdbc.username=tfsdb2c
+#tfstemp.jdbc.password=abc123
+tfs.prod.schema=TFSDB2C
+
+purging.major.retention=2
+purging.major.term=YEAR
+purging.minor.retention=2
+purging.minor.term=MONTH
+purging.thread.sleep=10000
+
+tfs.cdt.default.bookingunit=100
+itrs.batch.directory=/opt/tfs/ITRS/
+
+swift.regex.directory=/opt/tfs/SWIFT/regex.prt
+
+cicls.directory=/opt/tfs/INTERFACE_FILES
diff --git a/tfs-core/src/main/resources/tfs.properties.rej b/tfs-core/src/main/resources/tfs.properties.rej
new file mode 100644
--- /dev/null
+++ b/tfs-core/src/main/resources/tfs.properties.rej
@@ -0,0 +1,337 @@
+--- tfs.properties
++++ tfs.properties
+@@ -24,5 +24,11 @@
+ # DB2 settings
+ hibernate.dialect=org.hibernate.dialect.DB2Dialect
+ tfs.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+-tfs.jdbc.url=jdbc:db2://130.130.2.164:50000/TFSIPCD6
++tfs.hibernate.bootstrap=/bootstrap/databootstrap-db2.sql
++tfs.jdbc.autoReconnect=true
++
++
++# DEV DB
++tfs.jdbc.url=jdbc:db2://10.80.80.165:50000/TFS2212
++# tfs.jdbc.url=jdbc:db2://172.22.0.92:50000/TFSSIT
+ tfs.jdbc.username=tfsdb2c
+@@ -28,5 +34,12 @@
+ tfs.jdbc.username=tfsdb2c
+-tfs.jdbc.password=abc123
+-tfs.hibernate.bootstrap=/bootstrap/databootstrap-db2.sql
++tfs.jdbc.password=tfs*0*dssZvuLK
++# DEV DB
++quartz.database.url=jdbc:db2://172.22.0.92:50000/TFS2212
++quartz.database.user=tfsdb2c
++quartz.database.password=tfs*0*dssZvuLK
++
++# DB2 settings
++# Prod properties # tfs.jdbc.url=jdbc:db2://130.130.0.78:50000/TFSIPCD3
++
+ 
+ interface.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+@@ -31,4 +44,6 @@
+ 
+ interface.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+-interface.jdbc.url=jdbc:db2://130.130.2.164:50000/UCICBSD1
++# Prod properties # interface.jdbc.url=jdbc:db2://130.130.0.78:50000/UCICBSD1
++# interface.jdbc.url=jdbc:db2://10.80.80.165:50000/UCICBSD1
++interface.jdbc.url=jdbc:db2://10.80.80.165:50000/TFS2212
+ interface.jdbc.username=tfsdb2c
+@@ -34,4 +49,7 @@
+ interface.jdbc.username=tfsdb2c
+-interface.jdbc.password=abc123
++# Prod properties # interface.jdbc.password=tfsdb2c
++interface.jdbc.password=tfs*0*dssZvuLK
++# interface.jdbc.password=abc123
++interface.jdbc.autoReconnect=true
+ 
+ #SIBS - casa gateway configurations
+@@ -36,3 +54,4 @@
+ 
+ #SIBS - casa gateway configurations
++# casa.gateway.host=130.130.2.225
+ casa.gateway.host=130.130.2.225
+@@ -38,4 +57,14 @@
+ casa.gateway.host=130.130.2.225
+-#casa.gateway.port=36115
+-casa.gateway.port=31115
++# casa.gateway.host=172.22.0.170
++# U6
++casa.gateway.port=36115	
++# U2
++# casa.gateway.port=32115
++# U1
++# casa.gateway.port=31115
++# unavailable port
++# casa.gateway.port=99999
++# casa.gateway.so.timeout=1
++# casa.gateway.request.timeout=1
++# casa.gateway.reply.timeout=1
+ casa.gateway.so.timeout=120000
+@@ -41,6 +70,6 @@
+ casa.gateway.so.timeout=120000
+-casa.gateway.request.timeout=65000
+-casa.gateway.reply.timeout=65000
++casa.gateway.request.timeout=120000
++casa.gateway.reply.timeout=120000
+ casa.message.encoding=CP1047
+ casa.userId=TFSCASA
+ casa.password=ipc123$
+@@ -44,6 +73,9 @@
+ casa.message.encoding=CP1047
+ casa.userId=TFSCASA
+ casa.password=ipc123$
++
++casa.accounts.input.directory=/opt/tfs/INTERFACE_FILES/CASA_ACCOUNTS
++casa.accounts.backup.directory=/opt/tfs/INTERFACE_FILES/CASA_ACCOUNTS_BACKUP
+ #interface db configurations
+ #interface.jdbc.driverClassName=com.ibm.db2.jcc.DB2Driver
+ #interface.jdbc.url=jdbc:db2://130.130.0.78:50000/UCICBSD1
+@@ -61,6 +93,9 @@
+ # TSD
+ ldap.url=ldap://ADPW08IBL01.UCPB8.COM:389
+ ldap.base=dc=ucpb8,dc=com
+-ldap.userdn=CN=Letty C. Mejos,OU=TFS Test ID,DC=UCPB8,DC=COM
+-ldap.password=P@ssw0rd1
++# Prod properties # ldap.userdn=CN=tsdtst6,CN=TFS Test ID,DC=UCPB8,DC=COM
++ldap.userdn=CN=TFSPSU,OU=Service Accounts,OU=Company,DC=UCPB8,DC=COM
++# ldap.password=g2t0G1L2nnz@VxfCKAUtd02jrvvQse
++# ldap.password=TwidOFjLkYSBpiU@24hq0oXOIHH4Rz
++ldap.password=lhCmlHTh2EmIksRjJf32g0ep8YGyh@
+ ldap.domain=ucpb8.com
+@@ -66,3 +101,21 @@
+ ldap.domain=ucpb8.com
++ldap.directory=UCPB8
++
++# ldap.url=ldap://ADPW08IBL01.UCPB8.COM:389
++# ldap.base=dc=ucpb8,dc=com
++# # Prod properties # ldap.userdn=CN=tsdtst6,CN=TFS Test ID,DC=UCPB8,DC=COM
++# ldap.userdn=CN=Letty C. Mejos,OU=TFS Test ID,DC=UCPB8,DC=COM
++# # ldap.password=g2t0G1L2nnz@VxfCKAUtd02jrvvQse
++# # ldap.password=TwidOFjLkYSBpiU@24hq0oXOIHH4Rz
++# ldap.password=Q@WvE6R7Pp2U4ZY8Z0sFKm16iyvOMi
++# ldap.domain=ucpb8.com
++
++# ---Prod properties 
++# ldap.branch.url=ldap://ADPW08IBL01.UCPB8.COM:389
++# ldap.branch.base=dc=ucpb8,dc=com
++# ldap.branch.userdn=UID=TFSYSPRO,DC=UCPB8,DC=COM
++# ldap.branch.password=P@ssw0rd1$
++# ldap.branch.domain=ucpb8.com
++# ---Prod properties 
+ 
+ # BRANCH
+@@ -67,7 +120,8 @@
+ 
+ # BRANCH
+-ldap.branch.url=ldap://ADPW08IBL03.BRANCH.UCPB8.COM:389
+-ldap.branch.url=ldap://ADPW08IBL04.BRANCH.UCPB8.COM:389
+-ldap.branch.url=ldap://ADPW08IBL05.BRANCH.UCPB8.COM:389
+-ldap.branch.url=ldap://ADPW08IBL06.BRANCH.UCPB8.COM:389
++# ldap.branch.url=ldap://ADPW08IBL03.BRANCH.UCPB8.COM:389
++# ldap.branch.url=ldap://ADPW08IBL04.BRANCH.UCPB8.COM:389
++# ldap.branch.url=ldap://ADPW08IBL05.BRANCH.UCPB8.COM:389
++# ldap.branch.url=ldap://ADPW08IBL06.BRANCH.UCPB8.COM:389
++ldap.branch.url=ldap://bepcsw16vm01.branch.ucpb8.com:389
+ ldap.branch.base=dc=branch,dc=ucpb8,dc=com
+@@ -73,4 +127,5 @@
+ ldap.branch.base=dc=branch,dc=ucpb8,dc=com
+-ldap.branch.userdn=CN=TFS Test Branch ID,CN=Users,DC=BRANCH,DC=UCPB8,DC=COM
+-ldap.branch.password=P@ssw0rd2
++ldap.branch.userdn=CN=TFSPSU,OU=Service Accounts,OU=Company,DC=BRANCH,DC=UCPB8,DC=COM
++# ldap.branch.password=g2t0G1L2nnz@VxfCKAUtd02jrvvQse	
++ldap.branch.password=lhCmlHTh2EmIksRjJf32g0ep8YGyh@
+ ldap.branch.domain=branch.ucpb8.com
+@@ -76,4 +131,29 @@
+ ldap.branch.domain=branch.ucpb8.com
++ldap.branch.directory=BRANCH
++
++
++#tfs.authenticationProvider=adAuth
++#
++##TSD
++#ldap.url=ldap://ADPW08IBL02.UCPB8.COM:389
++#ldap.base=dc=ucpb8,dc=com
++#ldap.userdn=CN=TFSPSU,CN=Users,DC=UCPB8,DC=COM
++#ldap.password=psuprod@456
++#ldap.domain=ucpb8.com
++#
++##BRANCH
++#ldap.branch.url=ldap://ADPW08IBL03.BRANCH.UCPB8.COM:389
++#ldap.branch.url=ldap://ADPW08IBL04.BRANCH.UCPB8.COM:389
++#ldap.branch.url=ldap://ADPW08IBL05.BRANCH.UCPB8.COM:389
++#ldap.branch.url=ldap://ADPW08IBL06.BRANCH.UCPB8.COM:389
++#ldap.branch.base=dc=branch,dc=ucpb8,dc=com
++#ldap.branch.userdn=CN=TFSPSU,CN=Users,DC=BRANCH,DC=UCPB8,DC=COM
++#ldap.branch.password=psuprod@456
++#ldap.branch.domain=branch.ucpb8.com
++
++
++
++
+ 
+ 
+ 
+@@ -109,7 +189,9 @@
+ #swift message header configurations
+ swift.app.identifier=F
+ swift.service.identifier=01
+-swift.lt.identifier=UCPBPHM0AXXX
++# swift.lt.identifier=UCPBPHM0AXXX
++# swift.lt.identifier=UCPBPHMMAXXX
++swift.lt.identifier=TLBPHMM0AXXX
+ swift.session.number=0000
+ swift.sequence.number=000000
+ swift.io.identifier=I
+@@ -157,10 +239,7 @@
+ quartz.table.prefix=QRTZ_
+ jdbc.driver=com.ibm.db2.jcc.DB2Driver
+ jdbc.driver.delegate=org.quartz.impl.jdbcjobstore.DB2v8Delegate
+-quartz.database.url=jdbc:db2://130.130.2.164:50000/TFSIPCD6
+-quartz.database.user=tfsdb2c
+-quartz.database.password=abc123
+ quartz.database.max.conn=5
+ quartz.isclustered=false
+ 
+ 
+@@ -163,7 +242,8 @@
+ quartz.database.max.conn=5
+ quartz.isclustered=false
+ 
+ 
++
+ #job schedules
+ #tradeservice.report.trigger=0 30 * * * ?
+ #tradeservice.report.trigger=0 0 21 * * ?
+@@ -179,9 +259,8 @@
+ gl.movement.directory=/opt/tfs/INTERFACE_FILES
+ gl.movement.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+ 
+-expired.amla.directory=/opt/tfs/INTERFACE_FILES/
+ cif.purging.directory=/opt/tfs/INTERFACE_FILES/TFCFACCS.csv
+ 
+ #amla output directories
+ amla.directory=/opt/tfs/INTERFACE_FILES
+ amla.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+@@ -183,7 +262,8 @@
+ cif.purging.directory=/opt/tfs/INTERFACE_FILES/TFCFACCS.csv
+ 
+ #amla output directories
+ amla.directory=/opt/tfs/INTERFACE_FILES
+ amla.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
++expired.amla.directory=/opt/tfs/INTERFACE_FILES
+ 
+ #datawarehouse output directories
+@@ -188,4 +268,4 @@
+ 
+ #datawarehouse output directories
+-dw.directory=/opt/tfs/INTERFACE_FILESsaan description
++dw.directory=/opt/tfs/INTERFACE_FILES
+ dw.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+@@ -191,3 +271,3 @@
+ dw.directory.backup=/opt/tfs/INTERFACE_FILES_BACKUP
+-dw.batch.directory=/opt/tfs/INTERFACE_FILESsaan description
++dw.batch.directory=/opt/tfs/BATCH_REPORT_FILES
+ 
+@@ -193,11 +273,4 @@
+ 
+-batch.rma.directory=/opt/tfs/SWIFT/RMAFile
+-batch.bic.directory=/opt/tfs/SWIFT/BICFile/
+-batch.bic.filename.all=FI.txt
+-batch.bic.filename.delta=FIDELTA.txt
+-
+-batch.rma.backup.directory=/opt/tfs/SWIFT/backup/RMA/
+-batch.bic.backup.directory=/opt/tfs/SWIFT/backup/BIC/
+ #datawarehouse output directories
+ #dw.movement.directory=outputReports
+ #dw.allocation.directory=outputReports
+@@ -206,5 +279,4 @@
+ #dw.gl.param.directory=outputReports
+ #dw.cbr.param.directory=outputReports
+ #dw.report.directory=outputReports
+-tfs.check.multiple.login=true
+ 
+@@ -210,2 +282,25 @@
+ 
++batch.rma.directory=/opt/tfs/SWIFT/RMAFile
++batch.bic.directory=/opt/tfs/SWIFT/BICFile/
++
++batch.bic.filename.all=FI.txt
++batch.bic.filename.delta=FIDELTA.txt
++
++batch.rma.backup.directory=/opt/tfs/SWIFT/backup/RMA/
++batch.bic.backup.directory=/opt/tfs/SWIFT/backup/BIC/
++
++
++tfs.check.multiple.login=false
++
++# mail.smtp.auth=true
++# mail.smtp.host=EXPNLBMLA.ucpb8.com
++# mail.smtp.socketFactory.port=587
++# mail.smtp.from=tfsdevteam@ucpb.com
++# mail.smtp.username=tfsdevteam
++# mail.smtp.password=pass@word8
++# mail.smtp.starttls.enable=true
++# mail.smtp.ssl.trust=EXPNLBMLA.ucpb8.com
++# mail.smtp.enableNotification=false
++
++# TEST PROTECTION 25 LBPTRADEFINANCE
+ mail.smtp.auth=true
+@@ -211,5 +306,7 @@
+ mail.smtp.auth=true
+-mail.smtp.host=EXPNLBMLA.ucpb8.com
+-mail.smtp.socketFactory.port=587
+-mail.smtp.from=tfsdevteam@ucpb.com
++mail.smtp.host=landbank-com.mail.protection.outlook.com
++mail.smtp.socketFactory.port=25
++# mail.smtp.from=mferrer@landbank.com
++# mail.smtp.from=hrumbaoa@landbank.com
++# mail.smtp.from=tfstest@landbank.com
+ mail.smtp.username=tfsdevteam
+@@ -215,3 +312,5 @@
+ mail.smtp.username=tfsdevteam
+-mail.smtp.password=pass@word9
++mail.smtp.password=password@15
++# mail.smtp.username=tfsdevteam
++# mail.smtp.password=password@15
+ mail.smtp.starttls.enable=true
+@@ -217,2 +316,39 @@
+ mail.smtp.starttls.enable=true
+-mail.smtp.ssl.trust=EXPNLBMLA.ucpb8.com
++mail.smtp.ssl.trust=landbank-com.mail.protection.outlook.com
++mail.smtp.enableNotification=false
++# mail.smtp.enableNotification=true
++# mail.smtp.host=smtp.office365.com
++# mail.smtp.socketFactory.port=587
++mail.smtp.from=lbptradefinance@landbank.com
++
++
++#mail.smtp.host=130.130.9.128
++#mail.smtp.host=lbpmail1.corp.landbank.com
++#mail.smtp.host=smtp.office365.com
++# mail.smtp.from=ucpb_trade_finance@ucpb.com
++#mail.smtp.ssl.trust=130.130.9.128
++#mail.smtp.ssl.trust=lbpmail1.corp.landbank.com
++#mail.smtp.ssl.trust=smtp.office365.com
++
++#CIC directories
++cic.file.name=FCN
++cic.file.format=.txt
++cic.directory=/opt/tfs/INTERFACE_FILES/CIC/
++cic.backup.directory=/opt/tfs/INTERFACE_FILES/CIC_Backup/
++
++# Used for purging Accounts
++tfstemp.jdbc.url=jdbc:db2://130.130.2.164:50000/TFSIPCD4
++#tfstemp.jdbc.username=tfsdb2c
++#tfstemp.jdbc.password=abc123
++tfs.prod.schema=TFSDB2C
++
++purging.major.retention=2
++purging.major.term=YEAR
++purging.minor.retention=2
++purging.minor.term=MONTH
++purging.thread.sleep=10000
++
++tfs.cdt.default.bookingunit=100
++itrs.batch.directory=/opt/tfs/ITRS/
++
++swift.regex.directory=/opt/tfs/SWIFT/regex.prt
diff --git a/tfs-core/src/test/java/com/ucpb/tfs2/infrastructure/rest/FacilityRestServicesTest.java b/tfs-core/src/test/java/com/ucpb/tfs2/infrastructure/rest/FacilityRestServicesTest.java
deleted file mode 100644
--- a/tfs-core/src/test/java/com/ucpb/tfs2/infrastructure/rest/FacilityRestServicesTest.java
+++ /dev/null
@@ -1,230 +0,0 @@
-package com.ucpb.tfs2.infrastructure.rest;
-
-import com.google.gson.Gson;
-import com.ucpb.tfs.domain.instruction.ServiceInstruction;
-import com.ucpb.tfs.domain.instruction.ServiceInstructionId;
-import com.ucpb.tfs.domain.instruction.ServiceInstructionRepository;
-import com.ucpb.tfs.domain.service.TradeService;
-import com.ucpb.tfs.domain.service.TradeServiceId;
-import com.ucpb.tfs.domain.service.TradeServiceRepository;
-import com.ucpb.tfs.interfaces.domain.Facility;
-import com.ucpb.tfs.interfaces.services.FacilityService;
-import com.ucpb.tfs.interfaces.services.RatesService;
-import org.apache.commons.lang.StringUtils;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.InjectMocks;
-import org.mockito.MockitoAnnotations;
-import org.mockito.runners.MockitoJUnitRunner;
-
-import javax.ws.rs.core.Response;
-import javax.ws.rs.core.UriInfo;
-
-import java.math.BigDecimal;
-import java.util.Currency;
-import java.util.HashMap;
-import java.util.Map;
-
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.*;
-
-/**
- */
-@RunWith(MockitoJUnitRunner.class)
-public class FacilityRestServicesTest {
-
-    @MockitoAnnotations.Mock
-    private TradeServiceRepository tradeServiceRepository;
-
-    @MockitoAnnotations.Mock
-    private FacilityService facilityService;
-
-    @MockitoAnnotations.Mock
-    private RatesService ratesService;
-
-    @MockitoAnnotations.Mock
-    private ServiceInstructionRepository serviceInstructionRepository;
-
-    @InjectMocks
-    private FacilityRestServices facilityRestServices;
-
-    private TradeService tradeService;
-
-    private ServiceInstruction ets;
-
-    private static final Gson GSON = new Gson();
-
-
-    @Before
-    public void setup(){
-        tradeService = mock(TradeService.class);
-    }
-
-
-    @Test
-    public void successfullyInsertBalanceQueryForValidEts(){
-        ets = mock(ServiceInstruction.class);
-        Map<String,Object> details = new HashMap<String,Object>();
-        details.put("mainCifNumber","MAIN");
-        details.put("facilityId","1");
-        details.put("facilityType","FCN");
-        when(ets.getDetails()).thenReturn(details);
-
-        UriInfo allUri = mock(UriInfo.class);
-        String postRequestBody = "{'etsNumber':'etsNumber'}";
-
-
-//        when(tradeServiceRepository.load(new TradeServiceId("tradeServiceId"))).thenReturn(tradeService);
-        when(serviceInstructionRepository.load(new ServiceInstructionId("etsNumber"))).thenReturn(ets);
-        when(facilityService.insertFacilityBalanceQuery(any(Facility.class))).thenReturn(Long.valueOf(100));
-
-
-        Response response = facilityRestServices.insertFacilityBalanceQuery(allUri, postRequestBody);
-
-        verify(facilityService).insertFacilityBalanceQuery(any(Facility.class));
-
-        assertEquals(200, response.getStatus());
-        System.out.println(response.getEntity().toString());
-        Map<String,Object> responseData = GSON.fromJson(response.getEntity().toString(),Map.class);
-        assertEquals("success",responseData.get("status"));
-        assertEquals(Double.valueOf("100"),responseData.get("transactionSequenceNumber"));
-    }
-
-    @Test
-    public void successfullyRetrieveBalanceUsingValidTransactionSequenceNumber(){
-        UriInfo allUri = mock(UriInfo.class);
-        String postRequestBody = "{'transactionSequenceNumber':'121','etsNumber':'etsNumber'}";
-
-        Map<String,Object> facility = new HashMap<String,Object>();
-        facility.put("REQUEST_STATUS","Y");
-        facility.put("FACILITY_BALANCE",new BigDecimal("99999999.12"));
-        facility.put("CURRENCY","PHP");
-
-        when(tradeService.getProductChargeCurrency()).thenReturn(Currency.getInstance("HKD"));
-        when(tradeService.getProductChargeAmount()).thenReturn(new BigDecimal("1213141"));
-        when(tradeServiceRepository.load(new ServiceInstructionId("etsNumber"))).thenReturn(tradeService);
-        when(facilityService.getFacilityBalance(121L)).thenReturn(facility);
-        when(ratesService.getConversionRateByType("HKD","PHP",3)).thenReturn(new BigDecimal("7.21"));
-
-        Response response = facilityRestServices.getFacilityBalance(allUri,postRequestBody);
-
-        Map<String,Object> responseData = GSON.fromJson(response.getEntity().toString(),Map.class);
-        assertEquals("success",responseData.get("status"));
-        assertEquals("99999999.12",responseData.get("balance").toString());
-        assertEquals("true",responseData.get("isBalanceSufficient").toString());
-    }
-
-    @Test
-    public void balanceSufficientIfEqualToTransactionAmount(){
-        UriInfo allUri = mock(UriInfo.class);
-        String postRequestBody = "{'transactionSequenceNumber':'121','tradeServiceId':'TRADE-SERVICE-ID'}";
-
-        Map<String,Object> facility = new HashMap<String,Object>();
-        facility.put("REQUEST_STATUS","Y");
-        facility.put("FACILITY_BALANCE",new BigDecimal("99999999.99"));
-        facility.put("CURRENCY","PHP");
-
-        when(tradeService.getProductChargeCurrency()).thenReturn(Currency.getInstance("HKD"));
-        when(tradeService.getProductChargeAmount()).thenReturn(new BigDecimal("1.11"));
-        when(tradeServiceRepository.load(new TradeServiceId("TRADE-SERVICE-ID"))).thenReturn(tradeService);
-        when(facilityService.getFacilityBalance(121L)).thenReturn(facility);
-        when(ratesService.getConversionRateByType("HKD","PHP",3)).thenReturn(new BigDecimal("9"));
-
-        Response response = facilityRestServices.getFacilityBalance(allUri,postRequestBody);
-
-        Map<String,Object> responseData = GSON.fromJson(response.getEntity().toString(),Map.class);
-        assertEquals("success",responseData.get("status"));
-        assertEquals("99999999.99",responseData.get("balance").toString());
-        assertEquals("true",responseData.get("isBalanceSufficient").toString());
-    }
-
-    @Test
-    public void doNotConvertIfProductCurrencyIsEqualToFacilityCurrency(){
-        UriInfo allUri = mock(UriInfo.class);
-        String postRequestBody = "{'transactionSequenceNumber':'121','tradeServiceId':'TRADE-SERVICE-ID'}";
-
-        Map<String,Object> facility = new HashMap<String,Object>();
-        facility.put("REQUEST_STATUS","Y");
-        facility.put("FACILITY_BALANCE",new BigDecimal("99999999.99"));
-        facility.put("CURRENCY","HKD");
-
-        when(tradeService.getProductChargeCurrency()).thenReturn(Currency.getInstance("HKD"));
-        when(tradeService.getProductChargeAmount()).thenReturn(new BigDecimal("99999999999999"));
-        when(tradeServiceRepository.load(new TradeServiceId("TRADE-SERVICE-ID"))).thenReturn(tradeService);
-        when(facilityService.getFacilityBalance(121L)).thenReturn(facility);
-
-        verify(ratesService,never()).getConversionRateByType(anyString(),anyString(),anyInt());
-
-        Response response = facilityRestServices.getFacilityBalance(allUri,postRequestBody);
-
-        Map<String,Object> responseData = GSON.fromJson(response.getEntity().toString(),Map.class);
-        assertEquals("success",responseData.get("status"));
-        assertEquals("99999999.99",responseData.get("balance").toString());
-        assertEquals("false",responseData.get("isBalanceSufficient").toString());
-    }
-
-    @Test
-    public void balanceInsufficientAfterConversion(){
-        UriInfo allUri = mock(UriInfo.class);
-        String postRequestBody = "{'transactionSequenceNumber':'121','tradeServiceId':'TRADE-SERVICE-ID'}";
-
-        Map<String,Object> facility = new HashMap<String,Object>();
-        facility.put("REQUEST_STATUS","Y");
-        facility.put("FACILITY_BALANCE",new BigDecimal("1.12"));
-        facility.put("CURRENCY","PHP");
-
-        when(tradeService.getProductChargeCurrency()).thenReturn(Currency.getInstance("HKD"));
-        when(tradeService.getProductChargeAmount()).thenReturn(new BigDecimal("1213141"));
-        when(tradeServiceRepository.load(new TradeServiceId("TRADE-SERVICE-ID"))).thenReturn(tradeService);
-        when(facilityService.getFacilityBalance(121L)).thenReturn(facility);
-        when(ratesService.getConversionRateByType("HKD","PHP",3)).thenReturn(new BigDecimal("7.21"));
-
-        Response response = facilityRestServices.getFacilityBalance(allUri,postRequestBody);
-
-        Map<String,Object> responseData = GSON.fromJson(response.getEntity().toString(),Map.class);
-        assertEquals("success",responseData.get("status"));
-        assertEquals("1.12",responseData.get("balance").toString());
-        assertEquals("false",responseData.get("isBalanceSufficient").toString());
-    }
-
-    @Test
-    public void returnPendingStatusForEmptySibsResponse(){
-        UriInfo allUri = mock(UriInfo.class);
-        String postRequestBody = "{'transactionSequenceNumber':'121','tradeServiceId':'TRADESERVICEID'}";
-
-        Map<String,Object> facility = new HashMap<String,Object>();
-        facility.put("REQUEST_STATUS","");
-
-        when(facilityService.getFacilityBalance(121L)).thenReturn(facility);
-
-        Response response = facilityRestServices.getFacilityBalance(allUri,postRequestBody);
-
-        Map<String,Object> responseData = GSON.fromJson(response.getEntity().toString(),Map.class);
-        assertEquals("pending",responseData.get("status"));
-    }
-
-
-    @Test
-    public void returnRejectedStatusForUnknownStatusCode(){
-        UriInfo allUri = mock(UriInfo.class);
-        String postRequestBody = "{'transactionSequenceNumber':'121','tradeServiceId' : 'TRADE SERVICE ID'}";
-
-        Map<String,Object> facility = new HashMap<String,Object>();
-        facility.put("REQUEST_STATUS","UNKNOWN");
-
-        when(facilityService.getFacilityBalance(121L)).thenReturn(facility);
-
-        Response response = facilityRestServices.getFacilityBalance(allUri,postRequestBody);
-
-        Map<String,Object> responseData = GSON.fromJson(response.getEntity().toString(),Map.class);
-        assertEquals("rejected",responseData.get("status"));
-    }
-
-
-
-}
